// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: login.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace YlPb {

  /// <summary>Holder for reflection information generated from login.proto</summary>
  public static partial class LoginReflection {

    #region Descriptor
    /// <summary>File descriptor for login.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoginReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgtsb2dpbi5wcm90bxIFeWxfcGIaCmNoYXQucHJvdG8iKgoOQ2hlY2tHcm91",
            "cEluZm8SCgoCSWQYASABKA0SDAoEQ29kZRgCIAEoDSKgAQoPTG9naW5BY2Nv",
            "dW50UmVxEg4KBlVzZXJJZBgBIAEoDRIQCghTb2NrZXRJZBgCIAEoCRINCgVT",
            "aWdpbhgDIAEoCRIgCgVEdHlwZRgEIAEoDjIRLnlsX3BiLkRldmljZVR5cGUS",
            "DgoGUHVzaElkGAUgASgJEioKC0NoZWNrR3JvdXBzGAYgAygLMhUueWxfcGIu",
            "Q2hlY2tHcm91cEluZm8i6QEKD0xvZ2luQWNjb3VudFJlcxIRCglFcnJvckNv",
            "ZGUYASABKAUSEAoIU29ja2V0SWQYAiABKAkSEAoISHR0cEFkZHIYAyABKAkS",
            "FgoOSXNUcmFuc0hLSW50ZXIYBCABKAgSEQoJSXNSZWNlaXB0GAUgASgIEhAK",
            "CEVuZHBvaW50GAYgASgJEhMKC0FjY2Vzc0tleUlkGAcgASgJEhcKD0FjY2Vz",
            "c0tleVNlY3JldBgIIAEoCRISCgpCdWNrZXROYW1lGAkgASgJEiAKBkdyb3Vw",
            "cxgKIAMoCzIQLnlsX3BiLkdyb3VwSW5mbyIlChBQdXNoVXNlck91dExvZ2lu",
            "EhEKCUVycm9yQ29kZRgBIAEoBSI0Cg1QdXNoRXJyb3JDb2RlEhEKCUVycm9y",
            "Q29kZRgBIAEoBRIQCghFcnJvclN0chgCIAEoCSImChJTZXRVc2VyTGFuZ3Vh",
            "Z2VSZXESEAoITGFuZ3VhZ2UYASABKAUiJwoSU2V0VXNlckxhbmd1YWdlUmVz",
            "EhEKCUVycm9yQ29kZRgBIAEoBSITChFDbGllbnRSZWFkeUVuZFJlcSINCgtM",
            "b2dpbk91dFJlcSIgCgtMb2dpbk91dFJlcxIRCglFcnJvckNvZGUYASABKAUq",
            "OAoKRGV2aWNlVHlwZRILCgdBbmRyb2lkEAESBwoDSU9TEAISCwoHV2luZG93",
            "cxADEgcKA01hYxAE"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::YlPb.ChatReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::YlPb.DeviceType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.CheckGroupInfo), global::YlPb.CheckGroupInfo.Parser, new[]{ "Id", "Code" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.LoginAccountReq), global::YlPb.LoginAccountReq.Parser, new[]{ "UserId", "SocketId", "Sigin", "Dtype", "PushId", "CheckGroups" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.LoginAccountRes), global::YlPb.LoginAccountRes.Parser, new[]{ "ErrorCode", "SocketId", "HttpAddr", "IsTransHKInter", "IsReceipt", "Endpoint", "AccessKeyId", "AccessKeySecret", "BucketName", "Groups" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.PushUserOutLogin), global::YlPb.PushUserOutLogin.Parser, new[]{ "ErrorCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.PushErrorCode), global::YlPb.PushErrorCode.Parser, new[]{ "ErrorCode", "ErrorStr" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.SetUserLanguageReq), global::YlPb.SetUserLanguageReq.Parser, new[]{ "Language" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.SetUserLanguageRes), global::YlPb.SetUserLanguageRes.Parser, new[]{ "ErrorCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.ClientReadyEndReq), global::YlPb.ClientReadyEndReq.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.LoginOutReq), global::YlPb.LoginOutReq.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.LoginOutRes), global::YlPb.LoginOutRes.Parser, new[]{ "ErrorCode" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///ComId = 1  //消息主Id
  /// </summary>
  public enum DeviceType {
    /// <summary>
    ///安卓 设备
    /// </summary>
    [pbr::OriginalName("Android")] Android = 1,
    /// <summary>
    ///iOS 苹果手机 
    /// </summary>
    [pbr::OriginalName("IOS")] Ios = 2,
    /// <summary>
    ///Windows PC设备
    /// </summary>
    [pbr::OriginalName("Windows")] Windows = 3,
    /// <summary>
    ///mac电脑 PC设备
    /// </summary>
    [pbr::OriginalName("Mac")] Mac = 4,
  }

  #endregion

  #region Messages
  public sealed partial class CheckGroupInfo : pb::IMessage<CheckGroupInfo> {
    private static readonly pb::MessageParser<CheckGroupInfo> _parser = new pb::MessageParser<CheckGroupInfo>(() => new CheckGroupInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckGroupInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.LoginReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckGroupInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckGroupInfo(CheckGroupInfo other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckGroupInfo Clone() {
      return new CheckGroupInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    /// <summary>
    ///群Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "Id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 2;
    private readonly static uint CodeDefaultValue = 0;

    private uint code_;
    /// <summary>
    ///群校验码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Code {
      get { if ((_hasBits0 & 2) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "Code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "Code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCode() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckGroupInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckGroupInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasCode) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasCode) {
        output.WriteRawTag(16);
        output.WriteUInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckGroupInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Code = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///-------------------------------------------------------------------------------------协议------------------------------------------------------------------------------
  ///Msg = 1 登陆账号
  /// </summary>
  public sealed partial class LoginAccountReq : pb::IMessage<LoginAccountReq> {
    private static readonly pb::MessageParser<LoginAccountReq> _parser = new pb::MessageParser<LoginAccountReq>(() => new LoginAccountReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginAccountReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.LoginReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAccountReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAccountReq(LoginAccountReq other) : this() {
      _hasBits0 = other._hasBits0;
      userId_ = other.userId_;
      socketId_ = other.socketId_;
      sigin_ = other.sigin_;
      dtype_ = other.dtype_;
      pushId_ = other.pushId_;
      checkGroups_ = other.checkGroups_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAccountReq Clone() {
      return new LoginAccountReq(this);
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private readonly static uint UserIdDefaultValue = 0;

    private uint userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { if ((_hasBits0 & 1) != 0) { return userId_; } else { return UserIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        userId_ = value;
      }
    }
    /// <summary>Gets whether the "UserId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUserId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "UserId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUserId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "SocketId" field.</summary>
    public const int SocketIdFieldNumber = 2;
    private readonly static string SocketIdDefaultValue = "";

    private string socketId_;
    /// <summary>
    ///连接di
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SocketId {
      get { return socketId_ ?? SocketIdDefaultValue; }
      set {
        socketId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "SocketId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSocketId {
      get { return socketId_ != null; }
    }
    /// <summary>Clears the value of the "SocketId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSocketId() {
      socketId_ = null;
    }

    /// <summary>Field number for the "Sigin" field.</summary>
    public const int SiginFieldNumber = 3;
    private readonly static string SiginDefaultValue = "";

    private string sigin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sigin {
      get { return sigin_ ?? SiginDefaultValue; }
      set {
        sigin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Sigin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSigin {
      get { return sigin_ != null; }
    }
    /// <summary>Clears the value of the "Sigin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSigin() {
      sigin_ = null;
    }

    /// <summary>Field number for the "Dtype" field.</summary>
    public const int DtypeFieldNumber = 4;
    private readonly static global::YlPb.DeviceType DtypeDefaultValue = global::YlPb.DeviceType.Android;

    private global::YlPb.DeviceType dtype_;
    /// <summary>
    ///设备类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.DeviceType Dtype {
      get { if ((_hasBits0 & 2) != 0) { return dtype_; } else { return DtypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dtype_ = value;
      }
    }
    /// <summary>Gets whether the "Dtype" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDtype {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "Dtype" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDtype() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "PushId" field.</summary>
    public const int PushIdFieldNumber = 5;
    private readonly static string PushIdDefaultValue = "";

    private string pushId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PushId {
      get { return pushId_ ?? PushIdDefaultValue; }
      set {
        pushId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "PushId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPushId {
      get { return pushId_ != null; }
    }
    /// <summary>Clears the value of the "PushId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPushId() {
      pushId_ = null;
    }

    /// <summary>Field number for the "CheckGroups" field.</summary>
    public const int CheckGroupsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::YlPb.CheckGroupInfo> _repeated_checkGroups_codec
        = pb::FieldCodec.ForMessage(50, global::YlPb.CheckGroupInfo.Parser);
    private readonly pbc::RepeatedField<global::YlPb.CheckGroupInfo> checkGroups_ = new pbc::RepeatedField<global::YlPb.CheckGroupInfo>();
    /// <summary>
    ///校验群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::YlPb.CheckGroupInfo> CheckGroups {
      get { return checkGroups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginAccountReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginAccountReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (SocketId != other.SocketId) return false;
      if (Sigin != other.Sigin) return false;
      if (Dtype != other.Dtype) return false;
      if (PushId != other.PushId) return false;
      if(!checkGroups_.Equals(other.checkGroups_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUserId) hash ^= UserId.GetHashCode();
      if (HasSocketId) hash ^= SocketId.GetHashCode();
      if (HasSigin) hash ^= Sigin.GetHashCode();
      if (HasDtype) hash ^= Dtype.GetHashCode();
      if (HasPushId) hash ^= PushId.GetHashCode();
      hash ^= checkGroups_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasUserId) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (HasSocketId) {
        output.WriteRawTag(18);
        output.WriteString(SocketId);
      }
      if (HasSigin) {
        output.WriteRawTag(26);
        output.WriteString(Sigin);
      }
      if (HasDtype) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Dtype);
      }
      if (HasPushId) {
        output.WriteRawTag(42);
        output.WriteString(PushId);
      }
      checkGroups_.WriteTo(output, _repeated_checkGroups_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUserId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (HasSocketId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SocketId);
      }
      if (HasSigin) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sigin);
      }
      if (HasDtype) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dtype);
      }
      if (HasPushId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PushId);
      }
      size += checkGroups_.CalculateSize(_repeated_checkGroups_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginAccountReq other) {
      if (other == null) {
        return;
      }
      if (other.HasUserId) {
        UserId = other.UserId;
      }
      if (other.HasSocketId) {
        SocketId = other.SocketId;
      }
      if (other.HasSigin) {
        Sigin = other.Sigin;
      }
      if (other.HasDtype) {
        Dtype = other.Dtype;
      }
      if (other.HasPushId) {
        PushId = other.PushId;
      }
      checkGroups_.Add(other.checkGroups_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
          case 18: {
            SocketId = input.ReadString();
            break;
          }
          case 26: {
            Sigin = input.ReadString();
            break;
          }
          case 32: {
            Dtype = (global::YlPb.DeviceType) input.ReadEnum();
            break;
          }
          case 42: {
            PushId = input.ReadString();
            break;
          }
          case 50: {
            checkGroups_.AddEntriesFrom(input, _repeated_checkGroups_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Msg = 2 登陆返回
  /// </summary>
  public sealed partial class LoginAccountRes : pb::IMessage<LoginAccountRes> {
    private static readonly pb::MessageParser<LoginAccountRes> _parser = new pb::MessageParser<LoginAccountRes>(() => new LoginAccountRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginAccountRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.LoginReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAccountRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAccountRes(LoginAccountRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      socketId_ = other.socketId_;
      httpAddr_ = other.httpAddr_;
      isTransHKInter_ = other.isTransHKInter_;
      isReceipt_ = other.isReceipt_;
      endpoint_ = other.endpoint_;
      accessKeyId_ = other.accessKeyId_;
      accessKeySecret_ = other.accessKeySecret_;
      bucketName_ = other.bucketName_;
      groups_ = other.groups_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAccountRes Clone() {
      return new LoginAccountRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///0 成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "SocketId" field.</summary>
    public const int SocketIdFieldNumber = 2;
    private readonly static string SocketIdDefaultValue = "";

    private string socketId_;
    /// <summary>
    ///连接di
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SocketId {
      get { return socketId_ ?? SocketIdDefaultValue; }
      set {
        socketId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "SocketId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSocketId {
      get { return socketId_ != null; }
    }
    /// <summary>Clears the value of the "SocketId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSocketId() {
      socketId_ = null;
    }

    /// <summary>Field number for the "HttpAddr" field.</summary>
    public const int HttpAddrFieldNumber = 3;
    private readonly static string HttpAddrDefaultValue = "";

    private string httpAddr_;
    /// <summary>
    ///服务器对应http服务地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAddr {
      get { return httpAddr_ ?? HttpAddrDefaultValue; }
      set {
        httpAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "HttpAddr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHttpAddr {
      get { return httpAddr_ != null; }
    }
    /// <summary>Clears the value of the "HttpAddr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHttpAddr() {
      httpAddr_ = null;
    }

    /// <summary>Field number for the "IsTransHKInter" field.</summary>
    public const int IsTransHKInterFieldNumber = 4;
    private readonly static bool IsTransHKInterDefaultValue = false;

    private bool isTransHKInter_;
    /// <summary>
    ///是否是翻译人员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTransHKInter {
      get { if ((_hasBits0 & 2) != 0) { return isTransHKInter_; } else { return IsTransHKInterDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isTransHKInter_ = value;
      }
    }
    /// <summary>Gets whether the "IsTransHKInter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsTransHKInter {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "IsTransHKInter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsTransHKInter() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "IsReceipt" field.</summary>
    public const int IsReceiptFieldNumber = 5;
    private readonly static bool IsReceiptDefaultValue = false;

    private bool isReceipt_;
    /// <summary>
    ///是否接单
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReceipt {
      get { if ((_hasBits0 & 4) != 0) { return isReceipt_; } else { return IsReceiptDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isReceipt_ = value;
      }
    }
    /// <summary>Gets whether the "IsReceipt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsReceipt {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "IsReceipt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsReceipt() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "Endpoint" field.</summary>
    public const int EndpointFieldNumber = 6;
    private readonly static string EndpointDefaultValue = "";

    private string endpoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Endpoint {
      get { return endpoint_ ?? EndpointDefaultValue; }
      set {
        endpoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Endpoint" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEndpoint {
      get { return endpoint_ != null; }
    }
    /// <summary>Clears the value of the "Endpoint" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEndpoint() {
      endpoint_ = null;
    }

    /// <summary>Field number for the "AccessKeyId" field.</summary>
    public const int AccessKeyIdFieldNumber = 7;
    private readonly static string AccessKeyIdDefaultValue = "";

    private string accessKeyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessKeyId {
      get { return accessKeyId_ ?? AccessKeyIdDefaultValue; }
      set {
        accessKeyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "AccessKeyId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccessKeyId {
      get { return accessKeyId_ != null; }
    }
    /// <summary>Clears the value of the "AccessKeyId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccessKeyId() {
      accessKeyId_ = null;
    }

    /// <summary>Field number for the "AccessKeySecret" field.</summary>
    public const int AccessKeySecretFieldNumber = 8;
    private readonly static string AccessKeySecretDefaultValue = "";

    private string accessKeySecret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessKeySecret {
      get { return accessKeySecret_ ?? AccessKeySecretDefaultValue; }
      set {
        accessKeySecret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "AccessKeySecret" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccessKeySecret {
      get { return accessKeySecret_ != null; }
    }
    /// <summary>Clears the value of the "AccessKeySecret" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccessKeySecret() {
      accessKeySecret_ = null;
    }

    /// <summary>Field number for the "BucketName" field.</summary>
    public const int BucketNameFieldNumber = 9;
    private readonly static string BucketNameDefaultValue = "";

    private string bucketName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BucketName {
      get { return bucketName_ ?? BucketNameDefaultValue; }
      set {
        bucketName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "BucketName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBucketName {
      get { return bucketName_ != null; }
    }
    /// <summary>Clears the value of the "BucketName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBucketName() {
      bucketName_ = null;
    }

    /// <summary>Field number for the "Groups" field.</summary>
    public const int GroupsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::YlPb.GroupInfo> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(82, global::YlPb.GroupInfo.Parser);
    private readonly pbc::RepeatedField<global::YlPb.GroupInfo> groups_ = new pbc::RepeatedField<global::YlPb.GroupInfo>();
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::YlPb.GroupInfo> Groups {
      get { return groups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginAccountRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginAccountRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (SocketId != other.SocketId) return false;
      if (HttpAddr != other.HttpAddr) return false;
      if (IsTransHKInter != other.IsTransHKInter) return false;
      if (IsReceipt != other.IsReceipt) return false;
      if (Endpoint != other.Endpoint) return false;
      if (AccessKeyId != other.AccessKeyId) return false;
      if (AccessKeySecret != other.AccessKeySecret) return false;
      if (BucketName != other.BucketName) return false;
      if(!groups_.Equals(other.groups_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasSocketId) hash ^= SocketId.GetHashCode();
      if (HasHttpAddr) hash ^= HttpAddr.GetHashCode();
      if (HasIsTransHKInter) hash ^= IsTransHKInter.GetHashCode();
      if (HasIsReceipt) hash ^= IsReceipt.GetHashCode();
      if (HasEndpoint) hash ^= Endpoint.GetHashCode();
      if (HasAccessKeyId) hash ^= AccessKeyId.GetHashCode();
      if (HasAccessKeySecret) hash ^= AccessKeySecret.GetHashCode();
      if (HasBucketName) hash ^= BucketName.GetHashCode();
      hash ^= groups_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasSocketId) {
        output.WriteRawTag(18);
        output.WriteString(SocketId);
      }
      if (HasHttpAddr) {
        output.WriteRawTag(26);
        output.WriteString(HttpAddr);
      }
      if (HasIsTransHKInter) {
        output.WriteRawTag(32);
        output.WriteBool(IsTransHKInter);
      }
      if (HasIsReceipt) {
        output.WriteRawTag(40);
        output.WriteBool(IsReceipt);
      }
      if (HasEndpoint) {
        output.WriteRawTag(50);
        output.WriteString(Endpoint);
      }
      if (HasAccessKeyId) {
        output.WriteRawTag(58);
        output.WriteString(AccessKeyId);
      }
      if (HasAccessKeySecret) {
        output.WriteRawTag(66);
        output.WriteString(AccessKeySecret);
      }
      if (HasBucketName) {
        output.WriteRawTag(74);
        output.WriteString(BucketName);
      }
      groups_.WriteTo(output, _repeated_groups_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasSocketId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SocketId);
      }
      if (HasHttpAddr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpAddr);
      }
      if (HasIsTransHKInter) {
        size += 1 + 1;
      }
      if (HasIsReceipt) {
        size += 1 + 1;
      }
      if (HasEndpoint) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Endpoint);
      }
      if (HasAccessKeyId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessKeyId);
      }
      if (HasAccessKeySecret) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessKeySecret);
      }
      if (HasBucketName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BucketName);
      }
      size += groups_.CalculateSize(_repeated_groups_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginAccountRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasSocketId) {
        SocketId = other.SocketId;
      }
      if (other.HasHttpAddr) {
        HttpAddr = other.HttpAddr;
      }
      if (other.HasIsTransHKInter) {
        IsTransHKInter = other.IsTransHKInter;
      }
      if (other.HasIsReceipt) {
        IsReceipt = other.IsReceipt;
      }
      if (other.HasEndpoint) {
        Endpoint = other.Endpoint;
      }
      if (other.HasAccessKeyId) {
        AccessKeyId = other.AccessKeyId;
      }
      if (other.HasAccessKeySecret) {
        AccessKeySecret = other.AccessKeySecret;
      }
      if (other.HasBucketName) {
        BucketName = other.BucketName;
      }
      groups_.Add(other.groups_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            SocketId = input.ReadString();
            break;
          }
          case 26: {
            HttpAddr = input.ReadString();
            break;
          }
          case 32: {
            IsTransHKInter = input.ReadBool();
            break;
          }
          case 40: {
            IsReceipt = input.ReadBool();
            break;
          }
          case 50: {
            Endpoint = input.ReadString();
            break;
          }
          case 58: {
            AccessKeyId = input.ReadString();
            break;
          }
          case 66: {
            AccessKeySecret = input.ReadString();
            break;
          }
          case 74: {
            BucketName = input.ReadString();
            break;
          }
          case 82: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Msg = 3 推送用户推出登陆状态
  /// </summary>
  public sealed partial class PushUserOutLogin : pb::IMessage<PushUserOutLogin> {
    private static readonly pb::MessageParser<PushUserOutLogin> _parser = new pb::MessageParser<PushUserOutLogin>(() => new PushUserOutLogin());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PushUserOutLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.LoginReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushUserOutLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushUserOutLogin(PushUserOutLogin other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushUserOutLogin Clone() {
      return new PushUserOutLogin(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///登出原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PushUserOutLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PushUserOutLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PushUserOutLogin other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Msg = 4 业务异常消息推送s's
  /// </summary>
  public sealed partial class PushErrorCode : pb::IMessage<PushErrorCode> {
    private static readonly pb::MessageParser<PushErrorCode> _parser = new pb::MessageParser<PushErrorCode>(() => new PushErrorCode());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PushErrorCode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.LoginReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushErrorCode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushErrorCode(PushErrorCode other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      errorStr_ = other.errorStr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushErrorCode Clone() {
      return new PushErrorCode(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///ErrorCode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ErrorStr" field.</summary>
    public const int ErrorStrFieldNumber = 2;
    private readonly static string ErrorStrDefaultValue = "";

    private string errorStr_;
    /// <summary>
    ///ErrorCodeStr
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorStr {
      get { return errorStr_ ?? ErrorStrDefaultValue; }
      set {
        errorStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ErrorStr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorStr {
      get { return errorStr_ != null; }
    }
    /// <summary>Clears the value of the "ErrorStr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorStr() {
      errorStr_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PushErrorCode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PushErrorCode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorStr != other.ErrorStr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasErrorStr) hash ^= ErrorStr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasErrorStr) {
        output.WriteRawTag(18);
        output.WriteString(ErrorStr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasErrorStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorStr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PushErrorCode other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasErrorStr) {
        ErrorStr = other.ErrorStr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            ErrorStr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Msg = 5 设置用户语言请求
  /// </summary>
  public sealed partial class SetUserLanguageReq : pb::IMessage<SetUserLanguageReq> {
    private static readonly pb::MessageParser<SetUserLanguageReq> _parser = new pb::MessageParser<SetUserLanguageReq>(() => new SetUserLanguageReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetUserLanguageReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.LoginReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUserLanguageReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUserLanguageReq(SetUserLanguageReq other) : this() {
      _hasBits0 = other._hasBits0;
      language_ = other.language_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUserLanguageReq Clone() {
      return new SetUserLanguageReq(this);
    }

    /// <summary>Field number for the "Language" field.</summary>
    public const int LanguageFieldNumber = 1;
    private readonly static int LanguageDefaultValue = 0;

    private int language_;
    /// <summary>
    ///目标语言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Language {
      get { if ((_hasBits0 & 1) != 0) { return language_; } else { return LanguageDefaultValue; } }
      set {
        _hasBits0 |= 1;
        language_ = value;
      }
    }
    /// <summary>Gets whether the "Language" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLanguage {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Language" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLanguage() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetUserLanguageReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetUserLanguageReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Language != other.Language) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLanguage) hash ^= Language.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasLanguage) {
        output.WriteRawTag(8);
        output.WriteInt32(Language);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLanguage) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Language);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetUserLanguageReq other) {
      if (other == null) {
        return;
      }
      if (other.HasLanguage) {
        Language = other.Language;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Language = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Msg = 6 设置用户语言请求回应
  /// </summary>
  public sealed partial class SetUserLanguageRes : pb::IMessage<SetUserLanguageRes> {
    private static readonly pb::MessageParser<SetUserLanguageRes> _parser = new pb::MessageParser<SetUserLanguageRes>(() => new SetUserLanguageRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetUserLanguageRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.LoginReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUserLanguageRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUserLanguageRes(SetUserLanguageRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUserLanguageRes Clone() {
      return new SetUserLanguageRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///登出原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetUserLanguageRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetUserLanguageRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetUserLanguageRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///msg = 7 设置用户准备完毕
  /// </summary>
  public sealed partial class ClientReadyEndReq : pb::IMessage<ClientReadyEndReq> {
    private static readonly pb::MessageParser<ClientReadyEndReq> _parser = new pb::MessageParser<ClientReadyEndReq>(() => new ClientReadyEndReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientReadyEndReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.LoginReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientReadyEndReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientReadyEndReq(ClientReadyEndReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientReadyEndReq Clone() {
      return new ClientReadyEndReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientReadyEndReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientReadyEndReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientReadyEndReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///msg = 8 登出请求
  /// </summary>
  public sealed partial class LoginOutReq : pb::IMessage<LoginOutReq> {
    private static readonly pb::MessageParser<LoginOutReq> _parser = new pb::MessageParser<LoginOutReq>(() => new LoginOutReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginOutReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.LoginReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginOutReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginOutReq(LoginOutReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginOutReq Clone() {
      return new LoginOutReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginOutReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginOutReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginOutReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///msg = 9 登出请求
  /// </summary>
  public sealed partial class LoginOutRes : pb::IMessage<LoginOutRes> {
    private static readonly pb::MessageParser<LoginOutRes> _parser = new pb::MessageParser<LoginOutRes>(() => new LoginOutRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginOutRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.LoginReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginOutRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginOutRes(LoginOutRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginOutRes Clone() {
      return new LoginOutRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///0 成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginOutRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginOutRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginOutRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: chat.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace YlPb {

  /// <summary>Holder for reflection information generated from chat.proto</summary>
  public static partial class ChatReflection {

    #region Descriptor
    /// <summary>File descriptor for chat.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChatReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpjaGF0LnByb3RvEgV5bF9wYiKOAQoJUmVkV2FsbGV0Eg8KB09yZGVySWQY",
            "ASABKAkSDAoEU3VJZBgCIAEoDRIMCgRUdUlkGAMgASgNEg0KBVRpdGxlGAQg",
            "ASgJEg4KBkFtb3VudBgFIAEoDRIkCgVTdGF0ZRgGIAEoDjIVLnlsX3BiLlJl",
            "ZFdhbGxldFN0YXRlEg8KB1JlY1RpbWUYByABKAMiXAoMQmFzZVVzZXJJbmZv",
            "EgoKAklkGAEgASgNEhAKCE5pY2VOYW1lGAIgASgJEg8KB0hlYWRVcmwYAyAB",
            "KAkSCwoDU2V4GAQgASgFEhAKCExhbmd1YWdlGAUgASgNIjcKDkNoYXRNc2dP",
            "YmpJbmZvEgoKAklkGAEgASgNEgwKBE5hbWUYAiABKAkSCwoDVXJsGAMgASgJ",
            "IkYKCUNoYXROaWNlbxInCglOaWN0b1R5cGUYASABKA4yFC55bF9wYi5DaGF0",
            "TmljZW9UeXBlEhAKCE5pY3RvTXNnGAIgASgJImsKCEdpZnRDaGF0EgwKBFN1",
            "SWQYASABKA0SDAoEVHVJZBgCIAEoDRIOCgZHaWZ0SWQYAyABKA0SEAoIR2lm",
            "dE5hbWUYBCABKAkSEgoKR2lmdEFtb3VudBgFIAEoDRINCgVNb25leRgGIAEo",
            "DSI0CghGaWxlQ2hhdBIMCgRUeXBlGAEgASgJEgwKBFNpemUYAiABKA0SDAoE",
            "TmFtZRgDIAEoCSKAAQoIUXVvdGVNc2cSKwoLQ2hhbm5lbFR5cGUYASABKA4y",
            "Fi55bF9wYi5DaGF0Q2hhbm5lbFR5cGUSEAoIVGFyZ2V0SWQYAiABKA0SEgoK",
            "U2VuZFVzZXJJZBgDIAEoDRIQCghTZW5kVGltZRgEIAEoAxIPCgdDb250ZW50",
            "GAUgASgJIi8KDkh1bWFuVHJhbnNGYWlsEg0KBU1vbmV5GAEgASgNEg4KBlRp",
            "Y2tldBgCIAEoDSJuChBTaGFyZUNvbnRlbnREYXRhEgoKAklkGAEgASgEEgwK",
            "BFR5cGUYAiABKAQSDAoEVGV4dBgDIAEoCRINCgVJbWFnZRgEIAEoCRIjCgZB",
            "dXRob3IYBSADKAsyEy55bF9wYi5CYXNlVXNlckluZm8iXwoPU2hhcmVDV1No",
            "b3BEYXRhEgwKBFR5cGUYASABKA0SDQoFVGl0bGUYAiABKAkSDQoFSW1hZ2UY",
            "AyABKAkSCwoDVXJsGAQgASgJEhMKC0Rlc2NyaXB0aW9uGAUgASgJIjoKDEdy",
            "b3VwVG91VGlhbxIKCgJJZBgBIAEoBBINCgVUaXRsZRgCIAEoCRIPCgdDb250",
            "ZW50GAMgASgJIn8KCkFzc2Vzc0NoYXQSFAoMQXNzZXNzVXNlcklkGAEgASgN",
            "EhAKCExhbmd1YWdlGAIgASgNEhAKCENvdXJ0ZXN5GAMgASgNEhIKCkFwcGVh",
            "cmFuY2UYBCABKA0SEQoJR2lmdExldmVsGAUgASgNEhAKCElzQXNzZXNzGAYg",
            "ASgIIvwBCglWaXNhT3JkZXISCgoCSWQYASABKAkSDAoEVHlwZRgCIAEoCRIN",
            "CgVDb3VudBgDIAEoCRIQCghVc2VybmFtZRgEIAEoCRIRCglUZWxlcGhvbmUY",
            "BSABKAkSEAoIVG90YWxOdW0YBiABKAUSDwoHUmVhbE51bRgHIAEoBRISCgpD",
            "cmVhdGVUaW1lGAggASgDEg4KBlN0YXR1cxgJIAEoBRIPCgdQcm9jZXNzGAog",
            "ASgFEgwKBENpdHkYCyABKAkSFQoNRGV0YWlsQWRkcmVzcxgMIAEoCRIQCghD",
            "b3N0VHlwZRgNIAEoBRISCgpUcmF2ZWxEYXRlGA4gASgDIrkCCgtDaGF0U2Vu",
            "ZFJlcRIrCgtDaGFubmVsVHlwZRgBIAEoDjIWLnlsX3BiLkNoYXRDaGFubmVs",
            "VHlwZRIQCghUYXJnZXRJZBgCIAEoDRIQCghTZW5kVGltZRgDIAEoAxIeCgVD",
            "VHlwZRgEIAEoDjIPLnlsX3BiLkNoYXRUeXBlEhMKC0NvbnRlbnRCdWZmGAUg",
            "ASgMEhMKC0NvbnRlbnRTemllGAYgASgFEhQKDEVuY2xvc3VyZVVybBgHIAEo",
            "CRISCgpBbHRVc2VySWRzGAggAygNEhAKCFF1b3RlTXNnGAkgASgMEhQKDFRy",
            "YW5zQ29udGVudBgKIAEoDBIZChFCdXJuQWZ0ZXJSZWFkVGltZRgLIAEoBRIi",
            "CgZDTVR5cGUYDCABKA4yEi55bF9wYi5DaGF0TXNnVHlwZSJxCgtDaGF0U2Vu",
            "ZFJlcxIRCglFcnJvckNvZGUYASABKAUSKwoLQ2hhbm5lbFR5cGUYAiABKA4y",
            "Fi55bF9wYi5DaGF0Q2hhbm5lbFR5cGUSEAoIVGFyZ2V0SWQYAyABKA0SEAoI",
            "U2VuZFRpbWUYBCABKAMi1AMKCFB1c2hDaGF0EisKC0NoYW5uZWxUeXBlGAEg",
            "ASgOMhYueWxfcGIuQ2hhdENoYW5uZWxUeXBlEikKCkNoYW5uZWxPYmoYAiAB",
            "KAsyFS55bF9wYi5DaGF0TXNnT2JqSW5mbxIiCgZDTVR5cGUYAyABKA4yEi55",
            "bF9wYi5DaGF0TXNnVHlwZRIkCgdTZW5kT2JqGAQgASgLMhMueWxfcGIuQmFz",
            "ZVVzZXJJbmZvEhAKCFNlbmRUaW1lGAUgASgDEh4KBUNUeXBlGAYgASgOMg8u",
            "eWxfcGIuQ2hhdFR5cGUSEwoLQ29udGVudEJ1ZmYYByABKAwSEwoLQ29udGVu",
            "dFN6aWUYCCABKAUSFgoOVHJhbnNsYXRlU3RhdGUYCSABKA0SGAoQVGVuY2Vu",
            "dFRyYW5zbGF0ZRgKIAEoDBIXCg9Hb29nbGVUcmFuc2xhdGUYCyABKAwSFgoO",
            "SHVtYW5UcmFuc2xhdGUYDCABKAwSFAoMRW5jbG9zdXJlVXJsGA0gASgJEhIK",
            "CkFsdFVzZXJJZHMYDiADKA0SEAoIUXVvdGVNc2cYDyABKAwSEAoITXNnU3Rh",
            "dGUYECABKAUSGQoRQnVybkFmdGVyUmVhZFRpbWUYESABKAUiHwoOQW5zd2Vy",
            "UHVzaENoYXQSDQoFTXNnSWQYASABKAMiRgoXUHVzaFVzZXJVbnJlYWRNc2dO",
            "b3RpY2USKwoHTm90aWNlcxgCIAMoCzIaLnlsX3BiLlVzZXJVbnJlYWRNc2dO",
            "b3RpY2UinAEKDFVucmVhZE1zZ0RlcxISCgpTZW5kVXNlcklkGAEgASgNEhAK",
            "CFNlbmRUaW1lGAIgASgDEh4KBUNUeXBlGAMgASgOMg8ueWxfcGIuQ2hhdFR5",
            "cGUSEwoLQ29udGVudEJ1ZmYYBCABKAwSGAoQVGVuY2VudFRyYW5zbGF0ZRgF",
            "IAEoDBIXCg9Hb29nbGVUcmFuc2xhdGUYBiABKAwilgEKE1VzZXJVbnJlYWRN",
            "c2dOb3RpY2USKwoLQ2hhbm5lbFR5cGUYASABKA4yFi55bF9wYi5DaGF0Q2hh",
            "bm5lbFR5cGUSEAoIVGFyZ2V0SWQYAiABKA0SFAoMVW5yZWFkTXNnTnVtGAMg",
            "ASgNEioKDUxhc3RVbnJlYWRNc2cYBCABKAsyEy55bF9wYi5VbnJlYWRNc2dE",
            "ZXMiVwoWUmVxdWVzdFRhcmdldFVucmVhZFJlcRIrCgtDaGFubmVsVHlwZRgB",
            "IAEoDjIWLnlsX3BiLkNoYXRDaGFubmVsVHlwZRIQCghUYXJnZXRJZBgCIAEo",
            "DSIrChZSZXF1ZXN0VGFyZ2V0VW5yZWFkUmVzEhEKCUVycm9yQ29kZRgBIAEo",
            "BSJJChZSZXF1ZXN0UmVhbHRpbWVDYWxsUmVxEg8KB1RVc2VySWQYASABKA0S",
            "HgoFQ1R5cGUYAiABKA4yDy55bF9wYi5DaGF0VHlwZSIrChZSZXF1ZXN0UmVh",
            "bHRpbWVDYWxsUmVzEhEKCUVycm9yQ29kZRgBIAEoBSJDChBQdXNoUmVhbHRp",
            "bWVDYWxsEg8KB1NVc2VySWQYASABKA0SHgoFQ1R5cGUYAiABKA4yDy55bF9w",
            "Yi5DaGF0VHlwZSI7ChZSZXNwb25kUmVhbHRpbWVDYWxsUmVxEg8KB1NVc2Vy",
            "SWQYASABKA0SEAoISXNBbnN3ZXIYAiABKAgiPAoXUHVzaFJlYWx0aW1lQ2Fs",
            "bFJlc3BvbmQSDwoHVFVzZXJJZBgBIAEoDRIQCghJc0Fuc3dlchgCIAEoCCJf",
            "ChRSZXF1ZXN0R2lmdEdpdmluZ1JlcRIUCgxUYXJnZXRVc2VySWQYASABKA0S",
            "DgoGR2lmdElkGAIgASgNEhIKCkdpZnRBbW91bnQYAyABKA0SDQoFTW9uZXkY",
            "BCABKA0iVwoOUHVzaEdpZnRHaXZpbmcSEgoKU2VuZFVzZXJJZBgBIAEoDRIO",
            "CgZHaWZ0SWQYAiABKA0SEgoKR2lmdEFtb3VudBgDIAEoDRINCgVNb25leRgE",
            "IAEoDSIkChFRdWVyeVVzZXJzSW5mb1JlcRIPCgdVc2VySWRzGAEgAygNIjcK",
            "EVF1ZXJ5VXNlcnNJbmZvUmVzEiIKBUluZm9zGAEgAygLMhMueWxfcGIuQmFz",
            "ZVVzZXJJbmZvIocBChRDaGF0TWVzc2FnZVJlY2FsbFJlcRIrCgtDaGFubmVs",
            "VHlwZRgBIAEoDjIWLnlsX3BiLkNoYXRDaGFubmVsVHlwZRIQCghUYXJnZXRJ",
            "ZBgCIAEoDRIQCghTZW5kVGltZRgDIAEoAxIeCgVDVHlwZRgEIAEoDjIPLnls",
            "X3BiLkNoYXRUeXBlIikKFENoYXRNZXNzYWdlUmVjYWxsUmVzEhEKCUVycm9y",
            "Q29kZRgBIAEoBSKDAQoQQnVybkFmdGVyUmVhZFJlcRIrCgtDaGFubmVsVHlw",
            "ZRgBIAEoDjIWLnlsX3BiLkNoYXRDaGFubmVsVHlwZRIQCghUYXJnZXRJZBgC",
            "IAEoDRIQCghTZW5kVGltZRgDIAEoAxIeCgVDVHlwZRgEIAEoDjIPLnlsX3Bi",
            "LkNoYXRUeXBlIiUKEEJ1cm5BZnRlclJlYWRSZXMSEQoJRXJyb3JDb2RlGAEg",
            "ASgFIigKDEdyb3VwVGFnSW5mbxIKCgJJZBgBIAEoDRIMCgRUZXh0GAIgAygJ",
            "IrYBCgtHcm91cE1lbWJlchIhCgRJbmZvGAEgASgLMhMueWxfcGIuQmFzZVVz",
            "ZXJJbmZvEgwKBE5hbWUYAiABKAkSLAoISWRlbnRpdHkYAyABKA4yGi55bF9w",
            "Yi5Hcm91cE1lbWJlcklkZW50aXR5EhMKC01lc3NhZ2VGcmVlGAQgASgIEhUK",
            "DUVmZmVjdGl2ZVVzZXIYBSABKAgSHAoUSXNTaG93TWVuYmVyTmljZU5hbWUY",
            "BiABKAgiuAEKCUdyb3VwSW5mbxIKCgJJZBgBIAEoDRIMCgRDb2RlGAIgASgN",
            "EhEKCUdyb3VwTmFtZRgDIAEoCRILCgNVcmwYBCABKAkSDgoGTm90aWNlGAUg",
            "ASgJEiMKB01lbWJlcnMYBiADKAsyEi55bF9wYi5Hcm91cE1lbWJlchIZChFJ",
            "c09wZW5NZW1iZXJDaGVjaxgHIAEoCBIhCgRUYWdzGAggAygLMhMueWxfcGIu",
            "R3JvdXBUYWdJbmZvIo0CCg9Hcm91cENoYXROb3RpY2USKgoKQ2hhbmdlVHlw",
            "ZRgBIAEoDjIWLnlsX3BiLkdyb3VwQ2hhbmdlVHlwZRImCglPcGVyYXR1SWQY",
            "AiABKAsyEy55bF9wYi5CYXNlVXNlckluZm8SKAoLT3BlcmF0ZWR1SWQYAyAD",
            "KAsyEy55bF9wYi5CYXNlVXNlckluZm8SEQoJQ2hhbmdlU3RyGAQgASgJEhIK",
            "CkNoYW5nZUJvb2wYBSABKAgSIQoEVGFncxgGIAMoCzITLnlsX3BiLkdyb3Vw",
            "VGFnSW5mbxIyCg5DaGFuZ2VJZGVudGl0eRgHIAEoDjIaLnlsX3BiLkdyb3Vw",
            "TWVtYmVySWRlbnRpdHkiJQoSQ3JlYXRlQ2hhdEdyb3VwUmVxEg8KB01lbWJl",
            "cnMYAyADKA0iSAoSQ3JlYXRlQ2hhdEdyb3VwUmVzEhEKCUVycm9yQ29kZRgB",
            "IAEoBRIfCgVHcm91cBgCIAEoCzIQLnlsX3BiLkdyb3VwSW5mbyIjChBRdWl0",
            "Q2hhdEdyb3VwUmVxEg8KB0dyb3VwSWQYASABKA0iNgoQUXVpdENoYXRHcm91",
            "cFJlcxIRCglFcnJvckNvZGUYASABKAUSDwoHR3JvdXBJZBgCIAEoDSIkChFR",
            "dWVyeUNoYXRHcm91cFJlcRIPCgdHcm91cElkGAEgASgNIkcKEVF1ZXJ5Q2hh",
            "dEdyb3VwUmVzEhEKCUVycm9yQ29kZRgBIAEoBRIfCgVHcm91cBgCIAEoCzIQ",
            "LnlsX3BiLkdyb3VwSW5mbyI1ChFBZGRHcm91cE1lbWJlclJlcRIPCgdHcm91",
            "cElkGAEgASgNEg8KB1VzZXJJZHMYAiADKA0iNwoRQWRkR3JvdXBNZW1iZXJS",
            "ZXMSEQoJRXJyb3JDb2RlGAEgASgFEg8KB0dyb3VwSWQYAiABKA0iOAoUUmVt",
            "b3ZlR3JvdXBNZW1iZXJSZXESDwoHR3JvdXBJZBgBIAEoDRIPCgdVc2VySWRz",
            "GAIgAygNIjoKFFJlbW92ZUdyb3VwTWVtYmVyUmVzEhEKCUVycm9yQ29kZRgB",
            "IAEoBRIPCgdHcm91cElkGAIgASgNIjcKFE1vZGlmeUdyb3VwTm90aWNlUmVx",
            "Eg8KB0dyb3VwSWQYASABKA0SDgoGTm90aWNlGAIgASgJIjoKFE1vZGlmeUdy",
            "b3VwTm90aWNlUmVzEhEKCUVycm9yQ29kZRgBIAEoBRIPCgdHcm91cElkGAIg",
            "ASgNIjMKEk1vZGlmeUdyb3VwTmFtZVJlcRIPCgdHcm91cElkGAEgASgNEgwK",
            "BE5hbWUYAiABKAkiOAoSTW9kaWZ5R3JvdXBOYW1lUmVzEhEKCUVycm9yQ29k",
            "ZRgBIAEoBRIPCgdHcm91cElkGAIgASgNIjoKGUdyb3VwTWVtYmVyTW9kaWZ5",
            "QWxpYXNSZXESDwoHR3JvdXBJZBgBIAEoDRIMCgROYW1lGAIgASgJIk0KGUdy",
            "b3VwTWVtYmVyTW9kaWZ5QWxpYXNSZXMSEQoJRXJyb3JDb2RlGAEgASgFEg8K",
            "B0dyb3VwSWQYAiABKA0SDAoETmFtZRgDIAEoCSIbChlRdWVyeVVzZXJSZWxh",
            "dGlvbkdyb3VwUmVxIlcKGVF1ZXJ5VXNlclJlbGF0aW9uR3JvdXBSZXMSEQoJ",
            "RXJyb3JDb2RlGAEgASgFEicKDVJlbGF0aW9uR3JvdXAYAiADKAsyEC55bF9w",
            "Yi5Hcm91cEluZm8iPQoPU2V0dGluZ0dyb3VwUmVxEg8KB0dyb3VwSWQYASAB",
            "KA0SGQoRSXNPcGVuTWVtYmVyQ2hlY2sYAiABKAgiNQoPU2V0dGluZ0dyb3Vw",
            "UmVzEhEKCUVycm9yQ29kZRgBIAEoBRIPCgdHcm91cElkGAIgASgNIioKF0dy",
            "b3VwUVJjb2RlQWRkTWVtYmVyUmVxEg8KB0dyb3VwSWQYASABKA0iTQoXR3Jv",
            "dXBRUmNvZGVBZGRNZW1iZXJSZXMSEQoJRXJyb3JDb2RlGAEgASgFEh8KBUdy",
            "b3VwGAIgASgLMhAueWxfcGIuR3JvdXBJbmZvIjYKE0dyb3VwTWFzdGVyVHJh",
            "bnNSZXESDwoHR3JvdXBJZBgBIAEoDRIOCgZVc2VySWQYAiABKA0iSQoTR3Jv",
            "dXBNYXN0ZXJUcmFuc1JlcxIRCglFcnJvckNvZGUYASABKAUSDwoHR3JvdXBJ",
            "ZBgCIAEoDRIOCgZVc2VySWQYAyABKA0iQAocR3JvdXBNYXN0ZXJDaGVja0Fk",
            "ZE1lbWJlclJlcRIPCgdHcm91cElkGAEgASgNEg8KB1VzZXJJZHMYAiADKA0i",
            "UwocR3JvdXBNYXN0ZXJDaGVja0FkZE1lbWJlclJlcxIRCglFcnJvckNvZGUY",
            "ASABKAUSDwoHR3JvdXBJZBgCIAEoDRIPCgdVc2VySWRzGAMgAygNIkQKHFNl",
            "dEdyb3VwTWFzdGVyTWVzc2FnZUZyZWVSZXESDwoHR3JvdXBJZBgBIAEoDRIT",
            "CgtNZXNzYWdlRnJlZRgCIAEoCCJXChxTZXRHcm91cE1hc3Rlck1lc3NhZ2VG",
            "cmVlUmVzEhEKCUVycm9yQ29kZRgBIAEoBRIPCgdHcm91cElkGAIgASgNEhMK",
            "C01lc3NhZ2VGcmVlGAMgASgIIlAKH1NldEdyb3VwSXNTaG93TWVuYmVyTmlj",
            "ZU5hbWVSZXESDwoHR3JvdXBJZBgBIAEoDRIcChRJc1Nob3dNZW5iZXJOaWNl",
            "TmFtZRgCIAEoCCJjCh9TZXRHcm91cElzU2hvd01lbmJlck5pY2VOYW1lUmVz",
            "EhEKCUVycm9yQ29kZRgBIAEoBRIPCgdHcm91cElkGAIgASgNEhwKFElzU2hv",
            "d01lbmJlck5pY2VOYW1lGAMgASgIIhEKD0dldEdyb3VwVGFnc1JlcSI0Cg9H",
            "ZXRHcm91cFRhZ3NSZXMSIQoEVGFncxgBIAMoCzITLnlsX3BiLkdyb3VwVGFn",
            "SW5mbyIwCg9TZXRHcm91cFRhZ3NSZXESDwoHR3JvdXBJZBgBIAEoDRIMCgRU",
            "YWdzGAIgAygNIjUKD1NldEdyb3VwVGFnc1JlcxIRCglFcnJvckNvZGUYASAB",
            "KAUSDwoHR3JvdXBJZBgCIAEoDSJrChlTZXRHcm91cE1lbWJlcklkZW50aXR5",
            "UmVxEg8KB0dyb3VwSWQYASABKA0SDwoHVXNlcklkcxgCIAMoDRIsCghJZGVu",
            "dGl0eRgDIAEoDjIaLnlsX3BiLkdyb3VwTWVtYmVySWRlbnRpdHkifgoZU2V0",
            "R3JvdXBNZW1iZXJJZGVudGl0eVJlcxIRCglFcnJvckNvZGUYASABKAUSDwoH",
            "R3JvdXBJZBgCIAEoDRIPCgdVc2VySWRzGAMgAygNEiwKCElkZW50aXR5GAQg",
            "ASgOMhoueWxfcGIuR3JvdXBNZW1iZXJJZGVudGl0eSJBChFSZWxlYXNlR3Jv",
            "dXBUVFJlcRIPCgdHcm91cElkGAEgASgNEgwKBFRhZ3MYAiADKAUSDQoFVGl0",
            "bGUYAyABKAkiJgoRUmVsZWFzZUdyb3VwVFRSZXMSEQoJRXJyb3JDb2RlGAEg",
            "ASgFKj8KD0NoYXRDaGFubmVsVHlwZRILCgdTZXNzaW9uEAASCQoFR3JvdXAQ",
            "ARIHCgNDU0QQAhILCgdUcmFuc0hLEAMq8gIKCENoYXRUeXBlEhAKDFRleHRD",
            "aGF0VHlwZRAAEhEKDUltYWdlQ2hhdFR5cGUQARIWChJTaG9ydFZvaWNlQ2hh",
            "dFR5cGUQAhIWChJTaG9ydFZpZGVvQ2hhdFR5cGUQAxIZChVSZWFsdGltZUNh",
            "bGxWb2ljZVR5cGUQBBIZChVSZWFsdGltZUNhbGxWaWRlb1R5cGUQBRIVChFS",
            "ZWRXYWxsZXRDaGF0VHlwZRAGEhEKDVBsYWNlQ2hhdFR5cGUQBxIQCgxFbW90",
            "aWNvblR5cGUQCBIXChNHcm91cENoYXROb3RpY2VUeXBlEAkSEAoMR2lmdENo",
            "YXRUeXBlEAoSEAoMRmlsZUNoYXRUeXBlEAsSFAoQU2hhcmVDb250ZW50VHlw",
            "ZRAMEhQKEEdyb3VwVG91VGlhb1R5cGUQDRISCg5Bc3Nlc3NDaGF0VHlwZRAO",
            "EhEKDVZpc2FPcmRlclR5cGUQDxIPCgtDV1NoYXJlVHlwZRAQKjsKDlJlZFdh",
            "bGxldFN0YXRlEg8KC1VuY29sbGVjdGVkEAASDAoIUmVjZWl2ZWQQARIKCgZF",
            "eHBpcmUQAipCCg5UcmFuc2xhdGVTdGF0ZRIMCghOb1BlcnNvbhAAEgsKB1Nh",
            "bWVMYW4QARIKCgZVbm9wZW4QAhIJCgVPcGVuZBADKjoKDUNoYXROaWNlb1R5",
            "cGUSEgoOR3JvdXBBZGRNZW1iZXIQARIVChFHcm91cFJlbW92ZU1lbWJlchAC",
            "KlMKC0NoYXRNc2dUeXBlEgsKB1VzZXJNc2cQABINCglTeXN0ZW1Nc2cQARIN",
            "CglVcERhdGVNc2cQAhIMCghGZWVkQkNTRBADEgsKB1Zpc2FDU0QQBCpSChNH",
            "cm91cE1lbWJlcklkZW50aXR5EhIKDmlkZW50aXR5Tm9ybWFsEAASEwoPaWRl",
            "bnRpdHlNYW5hZ2VyEAESEgoOaWRlbnRpdHlNYXN0ZXIQAirpAgoPR3JvdXBD",
            "aGFuZ2VUeXBlEg0KCUFkZE1lbWJlchABEhAKDFJlbW92ZU1lbWJlchACEg8K",
            "C01hc3RlclRyYW5zEAMSFQoRR3JvdXBOb3RpY2VDaGFuZ2UQBBITCg9Hcm91",
            "cE5hbWVDaGFuZ2UQBRIaChZHcm91cE1lbWJlckFsaWFzQ2hhbmdlEAYSIAoc",
            "R3JvdXBJc09wZW5NZW1iZXJDaGVja0NoYW5nZRAHEhoKFkdyb3VwTWVtYmVy",
            "Q2hlY2tOb3RpY2UQCBIZChVRUkNvZGVBZGRNZW1iZXJOb3RpY2UQCRIjCh9H",
            "cm91cE1lbWJlckNoZWNrQWRkTWVtYmVyTm90aWNlEAoSFAoQR3JvdXBNZW1i",
            "ZXJMZWF2ZRALEhQKEEdyb3VwVGFnc0NoYW5hZ2UQDBIeChpHcm91cE1lbWJl",
            "cklkZW50aXR5Q2hhbmFnZRANEhIKDlJlbGVhc2VHcm91cFRUEA4="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::YlPb.ChatChannelType), typeof(global::YlPb.ChatType), typeof(global::YlPb.RedWalletState), typeof(global::YlPb.TranslateState), typeof(global::YlPb.ChatNiceoType), typeof(global::YlPb.ChatMsgType), typeof(global::YlPb.GroupMemberIdentity), typeof(global::YlPb.GroupChangeType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.RedWallet), global::YlPb.RedWallet.Parser, new[]{ "OrderId", "SuId", "TuId", "Title", "Amount", "State", "RecTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.BaseUserInfo), global::YlPb.BaseUserInfo.Parser, new[]{ "Id", "NiceName", "HeadUrl", "Sex", "Language" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.ChatMsgObjInfo), global::YlPb.ChatMsgObjInfo.Parser, new[]{ "Id", "Name", "Url" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.ChatNiceo), global::YlPb.ChatNiceo.Parser, new[]{ "NictoType", "NictoMsg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.GiftChat), global::YlPb.GiftChat.Parser, new[]{ "SuId", "TuId", "GiftId", "GiftName", "GiftAmount", "Money" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.FileChat), global::YlPb.FileChat.Parser, new[]{ "Type", "Size", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.QuoteMsg), global::YlPb.QuoteMsg.Parser, new[]{ "ChannelType", "TargetId", "SendUserId", "SendTime", "Content" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.HumanTransFail), global::YlPb.HumanTransFail.Parser, new[]{ "Money", "Ticket" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.ShareContentData), global::YlPb.ShareContentData.Parser, new[]{ "Id", "Type", "Text", "Image", "Author" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.ShareCWShopData), global::YlPb.ShareCWShopData.Parser, new[]{ "Type", "Title", "Image", "Url", "Description" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.GroupTouTiao), global::YlPb.GroupTouTiao.Parser, new[]{ "Id", "Title", "Content" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.AssessChat), global::YlPb.AssessChat.Parser, new[]{ "AssessUserId", "Language", "Courtesy", "Appearance", "GiftLevel", "IsAssess" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.VisaOrder), global::YlPb.VisaOrder.Parser, new[]{ "Id", "Type", "Count", "Username", "Telephone", "TotalNum", "RealNum", "CreateTime", "Status", "Process", "City", "DetailAddress", "CostType", "TravelDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.ChatSendReq), global::YlPb.ChatSendReq.Parser, new[]{ "ChannelType", "TargetId", "SendTime", "CType", "ContentBuff", "ContentSzie", "EnclosureUrl", "AltUserIds", "QuoteMsg", "TransContent", "BurnAfterReadTime", "CMType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.ChatSendRes), global::YlPb.ChatSendRes.Parser, new[]{ "ErrorCode", "ChannelType", "TargetId", "SendTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.PushChat), global::YlPb.PushChat.Parser, new[]{ "ChannelType", "ChannelObj", "CMType", "SendObj", "SendTime", "CType", "ContentBuff", "ContentSzie", "TranslateState", "TencentTranslate", "GoogleTranslate", "HumanTranslate", "EnclosureUrl", "AltUserIds", "QuoteMsg", "MsgState", "BurnAfterReadTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.AnswerPushChat), global::YlPb.AnswerPushChat.Parser, new[]{ "MsgId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.PushUserUnreadMsgNotice), global::YlPb.PushUserUnreadMsgNotice.Parser, new[]{ "Notices" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.UnreadMsgDes), global::YlPb.UnreadMsgDes.Parser, new[]{ "SendUserId", "SendTime", "CType", "ContentBuff", "TencentTranslate", "GoogleTranslate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.UserUnreadMsgNotice), global::YlPb.UserUnreadMsgNotice.Parser, new[]{ "ChannelType", "TargetId", "UnreadMsgNum", "LastUnreadMsg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.RequestTargetUnreadReq), global::YlPb.RequestTargetUnreadReq.Parser, new[]{ "ChannelType", "TargetId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.RequestTargetUnreadRes), global::YlPb.RequestTargetUnreadRes.Parser, new[]{ "ErrorCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.RequestRealtimeCallReq), global::YlPb.RequestRealtimeCallReq.Parser, new[]{ "TUserId", "CType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.RequestRealtimeCallRes), global::YlPb.RequestRealtimeCallRes.Parser, new[]{ "ErrorCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.PushRealtimeCall), global::YlPb.PushRealtimeCall.Parser, new[]{ "SUserId", "CType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.RespondRealtimeCallReq), global::YlPb.RespondRealtimeCallReq.Parser, new[]{ "SUserId", "IsAnswer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.PushRealtimeCallRespond), global::YlPb.PushRealtimeCallRespond.Parser, new[]{ "TUserId", "IsAnswer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.RequestGiftGivingReq), global::YlPb.RequestGiftGivingReq.Parser, new[]{ "TargetUserId", "GiftId", "GiftAmount", "Money" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.PushGiftGiving), global::YlPb.PushGiftGiving.Parser, new[]{ "SendUserId", "GiftId", "GiftAmount", "Money" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.QueryUsersInfoReq), global::YlPb.QueryUsersInfoReq.Parser, new[]{ "UserIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.QueryUsersInfoRes), global::YlPb.QueryUsersInfoRes.Parser, new[]{ "Infos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.ChatMessageRecallReq), global::YlPb.ChatMessageRecallReq.Parser, new[]{ "ChannelType", "TargetId", "SendTime", "CType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.ChatMessageRecallRes), global::YlPb.ChatMessageRecallRes.Parser, new[]{ "ErrorCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.BurnAfterReadReq), global::YlPb.BurnAfterReadReq.Parser, new[]{ "ChannelType", "TargetId", "SendTime", "CType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.BurnAfterReadRes), global::YlPb.BurnAfterReadRes.Parser, new[]{ "ErrorCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.GroupTagInfo), global::YlPb.GroupTagInfo.Parser, new[]{ "Id", "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.GroupMember), global::YlPb.GroupMember.Parser, new[]{ "Info", "Name", "Identity", "MessageFree", "EffectiveUser", "IsShowMenberNiceName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.GroupInfo), global::YlPb.GroupInfo.Parser, new[]{ "Id", "Code", "GroupName", "Url", "Notice", "Members", "IsOpenMemberCheck", "Tags" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.GroupChatNotice), global::YlPb.GroupChatNotice.Parser, new[]{ "ChangeType", "OperatuId", "OperateduId", "ChangeStr", "ChangeBool", "Tags", "ChangeIdentity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.CreateChatGroupReq), global::YlPb.CreateChatGroupReq.Parser, new[]{ "Members" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.CreateChatGroupRes), global::YlPb.CreateChatGroupRes.Parser, new[]{ "ErrorCode", "Group" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.QuitChatGroupReq), global::YlPb.QuitChatGroupReq.Parser, new[]{ "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.QuitChatGroupRes), global::YlPb.QuitChatGroupRes.Parser, new[]{ "ErrorCode", "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.QueryChatGroupReq), global::YlPb.QueryChatGroupReq.Parser, new[]{ "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.QueryChatGroupRes), global::YlPb.QueryChatGroupRes.Parser, new[]{ "ErrorCode", "Group" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.AddGroupMemberReq), global::YlPb.AddGroupMemberReq.Parser, new[]{ "GroupId", "UserIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.AddGroupMemberRes), global::YlPb.AddGroupMemberRes.Parser, new[]{ "ErrorCode", "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.RemoveGroupMemberReq), global::YlPb.RemoveGroupMemberReq.Parser, new[]{ "GroupId", "UserIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.RemoveGroupMemberRes), global::YlPb.RemoveGroupMemberRes.Parser, new[]{ "ErrorCode", "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.ModifyGroupNoticeReq), global::YlPb.ModifyGroupNoticeReq.Parser, new[]{ "GroupId", "Notice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.ModifyGroupNoticeRes), global::YlPb.ModifyGroupNoticeRes.Parser, new[]{ "ErrorCode", "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.ModifyGroupNameReq), global::YlPb.ModifyGroupNameReq.Parser, new[]{ "GroupId", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.ModifyGroupNameRes), global::YlPb.ModifyGroupNameRes.Parser, new[]{ "ErrorCode", "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.GroupMemberModifyAliasReq), global::YlPb.GroupMemberModifyAliasReq.Parser, new[]{ "GroupId", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.GroupMemberModifyAliasRes), global::YlPb.GroupMemberModifyAliasRes.Parser, new[]{ "ErrorCode", "GroupId", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.QueryUserRelationGroupReq), global::YlPb.QueryUserRelationGroupReq.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.QueryUserRelationGroupRes), global::YlPb.QueryUserRelationGroupRes.Parser, new[]{ "ErrorCode", "RelationGroup" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.SettingGroupReq), global::YlPb.SettingGroupReq.Parser, new[]{ "GroupId", "IsOpenMemberCheck" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.SettingGroupRes), global::YlPb.SettingGroupRes.Parser, new[]{ "ErrorCode", "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.GroupQRcodeAddMemberReq), global::YlPb.GroupQRcodeAddMemberReq.Parser, new[]{ "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.GroupQRcodeAddMemberRes), global::YlPb.GroupQRcodeAddMemberRes.Parser, new[]{ "ErrorCode", "Group" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.GroupMasterTransReq), global::YlPb.GroupMasterTransReq.Parser, new[]{ "GroupId", "UserId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.GroupMasterTransRes), global::YlPb.GroupMasterTransRes.Parser, new[]{ "ErrorCode", "GroupId", "UserId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.GroupMasterCheckAddMemberReq), global::YlPb.GroupMasterCheckAddMemberReq.Parser, new[]{ "GroupId", "UserIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.GroupMasterCheckAddMemberRes), global::YlPb.GroupMasterCheckAddMemberRes.Parser, new[]{ "ErrorCode", "GroupId", "UserIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.SetGroupMasterMessageFreeReq), global::YlPb.SetGroupMasterMessageFreeReq.Parser, new[]{ "GroupId", "MessageFree" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.SetGroupMasterMessageFreeRes), global::YlPb.SetGroupMasterMessageFreeRes.Parser, new[]{ "ErrorCode", "GroupId", "MessageFree" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.SetGroupIsShowMenberNiceNameReq), global::YlPb.SetGroupIsShowMenberNiceNameReq.Parser, new[]{ "GroupId", "IsShowMenberNiceName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.SetGroupIsShowMenberNiceNameRes), global::YlPb.SetGroupIsShowMenberNiceNameRes.Parser, new[]{ "ErrorCode", "GroupId", "IsShowMenberNiceName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.GetGroupTagsReq), global::YlPb.GetGroupTagsReq.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.GetGroupTagsRes), global::YlPb.GetGroupTagsRes.Parser, new[]{ "Tags" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.SetGroupTagsReq), global::YlPb.SetGroupTagsReq.Parser, new[]{ "GroupId", "Tags" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.SetGroupTagsRes), global::YlPb.SetGroupTagsRes.Parser, new[]{ "ErrorCode", "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.SetGroupMemberIdentityReq), global::YlPb.SetGroupMemberIdentityReq.Parser, new[]{ "GroupId", "UserIds", "Identity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.SetGroupMemberIdentityRes), global::YlPb.SetGroupMemberIdentityRes.Parser, new[]{ "ErrorCode", "GroupId", "UserIds", "Identity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.ReleaseGroupTTReq), global::YlPb.ReleaseGroupTTReq.Parser, new[]{ "GroupId", "Tags", "Title" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::YlPb.ReleaseGroupTTRes), global::YlPb.ReleaseGroupTTRes.Parser, new[]{ "ErrorCode" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ChatChannelType {
    /// <summary>
    ///会话
    /// </summary>
    [pbr::OriginalName("Session")] Session = 0,
    /// <summary>
    ///群组
    /// </summary>
    [pbr::OriginalName("Group")] Group = 1,
    /// <summary>
    ///客服频道
    /// </summary>
    [pbr::OriginalName("CSD")] Csd = 2,
    /// <summary>
    ///翻译管家
    /// </summary>
    [pbr::OriginalName("TransHK")] TransHk = 3,
  }

  public enum ChatType {
    /// <summary>
    ///文字聊天
    /// </summary>
    [pbr::OriginalName("TextChatType")] TextChatType = 0,
    /// <summary>
    ///图片
    /// </summary>
    [pbr::OriginalName("ImageChatType")] ImageChatType = 1,
    /// <summary>
    ///短语音
    /// </summary>
    [pbr::OriginalName("ShortVoiceChatType")] ShortVoiceChatType = 2,
    /// <summary>
    ///短视频
    /// </summary>
    [pbr::OriginalName("ShortVideoChatType")] ShortVideoChatType = 3,
    /// <summary>
    ///实时通话-语音
    /// </summary>
    [pbr::OriginalName("RealtimeCallVoiceType")] RealtimeCallVoiceType = 4,
    /// <summary>
    ///实时通话-视频
    /// </summary>
    [pbr::OriginalName("RealtimeCallVideoType")] RealtimeCallVideoType = 5,
    /// <summary>
    ///红包
    /// </summary>
    [pbr::OriginalName("RedWalletChatType")] RedWalletChatType = 6,
    /// <summary>
    ///地址类型
    /// </summary>
    [pbr::OriginalName("PlaceChatType")] PlaceChatType = 7,
    /// <summary>
    ///表情
    /// </summary>
    [pbr::OriginalName("EmoticonType")] EmoticonType = 8,
    /// <summary>
    ///群公告类型
    /// </summary>
    [pbr::OriginalName("GroupChatNoticeType")] GroupChatNoticeType = 9,
    /// <summary>
    ///礼物聊天类型
    /// </summary>
    [pbr::OriginalName("GiftChatType")] GiftChatType = 10,
    /// <summary>
    ///文件聊天类型
    /// </summary>
    [pbr::OriginalName("FileChatType")] FileChatType = 11,
    /// <summary>
    ///分享内容类型
    /// </summary>
    [pbr::OriginalName("ShareContentType")] ShareContentType = 12,
    /// <summary>
    ///群头条类型
    /// </summary>
    [pbr::OriginalName("GroupTouTiaoType")] GroupTouTiaoType = 13,
    /// <summary>
    ///评价类型
    /// </summary>
    [pbr::OriginalName("AssessChatType")] AssessChatType = 14,
    /// <summary>
    ///签证订单
    /// </summary>
    [pbr::OriginalName("VisaOrderType")] VisaOrderType = 15,
    /// <summary>
    ///诚物分享类型
    /// </summary>
    [pbr::OriginalName("CWShareType")] CwshareType = 16,
  }

  public enum RedWalletState {
    /// <summary>
    ///未领取
    /// </summary>
    [pbr::OriginalName("Uncollected")] Uncollected = 0,
    /// <summary>
    ///已领取
    /// </summary>
    [pbr::OriginalName("Received")] Received = 1,
    /// <summary>
    ///过期
    /// </summary>
    [pbr::OriginalName("Expire")] Expire = 2,
  }

  /// <summary>
  ///用户间翻译状态
  /// </summary>
  public enum TranslateState {
    /// <summary>
    ///没有翻译人员在线
    /// </summary>
    [pbr::OriginalName("NoPerson")] NoPerson = 0,
    /// <summary>
    ///同一语言
    /// </summary>
    [pbr::OriginalName("SameLan")] SameLan = 1,
    /// <summary>
    ///没有开启人工翻译
    /// </summary>
    [pbr::OriginalName("Unopen")] Unopen = 2,
    /// <summary>
    ///已经开启人工翻译
    /// </summary>
    [pbr::OriginalName("Opend")] Opend = 3,
  }

  public enum ChatNiceoType {
    /// <summary>
    ///聊天群-加入用户
    /// </summary>
    [pbr::OriginalName("GroupAddMember")] GroupAddMember = 1,
    /// <summary>
    ///聊天群-移除用户
    /// </summary>
    [pbr::OriginalName("GroupRemoveMember")] GroupRemoveMember = 2,
  }

  public enum ChatMsgType {
    /// <summary>
    ///用户消息
    /// </summary>
    [pbr::OriginalName("UserMsg")] UserMsg = 0,
    /// <summary>
    ///系统消息
    /// </summary>
    [pbr::OriginalName("SystemMsg")] SystemMsg = 1,
    /// <summary>
    ///更新消息
    /// </summary>
    [pbr::OriginalName("UpDateMsg")] UpDateMsg = 2,
    /// <summary>
    ///反馈客服消息
    /// </summary>
    [pbr::OriginalName("FeedBCSD")] FeedBcsd = 3,
    /// <summary>
    ///签证客服消息
    /// </summary>
    [pbr::OriginalName("VisaCSD")] VisaCsd = 4,
  }

  /// <summary>
  ///-------------------------------------------------------------------------------Group相关---------------------------------------------------------------------------------------
  ///群身份
  /// </summary>
  public enum GroupMemberIdentity {
    /// <summary>
    ///普通成员
    /// </summary>
    [pbr::OriginalName("identityNormal")] IdentityNormal = 0,
    /// <summary>
    ///管理员
    /// </summary>
    [pbr::OriginalName("identityManager")] IdentityManager = 1,
    /// <summary>
    ///群主
    /// </summary>
    [pbr::OriginalName("identityMaster")] IdentityMaster = 2,
  }

  /// <summary>
  ///聊天群信息变化类型
  /// </summary>
  public enum GroupChangeType {
    /// <summary>
    ///加入用户
    /// </summary>
    [pbr::OriginalName("AddMember")] AddMember = 1,
    /// <summary>
    ///移除用户
    /// </summary>
    [pbr::OriginalName("RemoveMember")] RemoveMember = 2,
    /// <summary>
    ///群主转让
    /// </summary>
    [pbr::OriginalName("MasterTrans")] MasterTrans = 3,
    /// <summary>
    ///群公告改变
    /// </summary>
    [pbr::OriginalName("GroupNoticeChange")] GroupNoticeChange = 4,
    /// <summary>
    ///群昵称改变
    /// </summary>
    [pbr::OriginalName("GroupNameChange")] GroupNameChange = 5,
    /// <summary>
    ///群成员别名改变
    /// </summary>
    [pbr::OriginalName("GroupMemberAliasChange")] GroupMemberAliasChange = 6,
    /// <summary>
    ///群设置校验成员改变
    /// </summary>
    [pbr::OriginalName("GroupIsOpenMemberCheckChange")] GroupIsOpenMemberCheckChange = 7,
    /// <summary>
    ///群成员校验公告
    /// </summary>
    [pbr::OriginalName("GroupMemberCheckNotice")] GroupMemberCheckNotice = 8,
    /// <summary>
    ///通过二维码加入到群
    /// </summary>
    [pbr::OriginalName("QRCodeAddMemberNotice")] QrcodeAddMemberNotice = 9,
    /// <summary>
    ///群主校验添加成员通告
    /// </summary>
    [pbr::OriginalName("GroupMemberCheckAddMemberNotice")] GroupMemberCheckAddMemberNotice = 10,
    /// <summary>
    ///群成员离开
    /// </summary>
    [pbr::OriginalName("GroupMemberLeave")] GroupMemberLeave = 11,
    /// <summary>
    ///群标签变化
    /// </summary>
    [pbr::OriginalName("GroupTagsChanage")] GroupTagsChanage = 12,
    /// <summary>
    ///群成员身份变更
    /// </summary>
    [pbr::OriginalName("GroupMemberIdentityChanage")] GroupMemberIdentityChanage = 13,
    /// <summary>
    ///发布群头条
    /// </summary>
    [pbr::OriginalName("ReleaseGroupTT")] ReleaseGroupTt = 14,
  }

  #endregion

  #region Messages
  /// <summary>
  ///红包数据
  /// </summary>
  public sealed partial class RedWallet : pb::IMessage<RedWallet> {
    private static readonly pb::MessageParser<RedWallet> _parser = new pb::MessageParser<RedWallet>(() => new RedWallet());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedWallet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedWallet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedWallet(RedWallet other) : this() {
      _hasBits0 = other._hasBits0;
      orderId_ = other.orderId_;
      suId_ = other.suId_;
      tuId_ = other.tuId_;
      title_ = other.title_;
      amount_ = other.amount_;
      state_ = other.state_;
      recTime_ = other.recTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedWallet Clone() {
      return new RedWallet(this);
    }

    /// <summary>Field number for the "OrderId" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private readonly static string OrderIdDefaultValue = "";

    private string orderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_ ?? OrderIdDefaultValue; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "OrderId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrderId {
      get { return orderId_ != null; }
    }
    /// <summary>Clears the value of the "OrderId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrderId() {
      orderId_ = null;
    }

    /// <summary>Field number for the "SuId" field.</summary>
    public const int SuIdFieldNumber = 2;
    private readonly static uint SuIdDefaultValue = 0;

    private uint suId_;
    /// <summary>
    ///发送者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuId {
      get { if ((_hasBits0 & 1) != 0) { return suId_; } else { return SuIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        suId_ = value;
      }
    }
    /// <summary>Gets whether the "SuId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "SuId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "TuId" field.</summary>
    public const int TuIdFieldNumber = 3;
    private readonly static uint TuIdDefaultValue = 0;

    private uint tuId_;
    /// <summary>
    ///接收者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TuId {
      get { if ((_hasBits0 & 2) != 0) { return tuId_; } else { return TuIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        tuId_ = value;
      }
    }
    /// <summary>Gets whether the "TuId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTuId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "TuId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTuId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 4;
    private readonly static string TitleDefaultValue = "";

    private string title_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_ ?? TitleDefaultValue; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Title" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTitle {
      get { return title_ != null; }
    }
    /// <summary>Clears the value of the "Title" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTitle() {
      title_ = null;
    }

    /// <summary>Field number for the "Amount" field.</summary>
    public const int AmountFieldNumber = 5;
    private readonly static uint AmountDefaultValue = 0;

    private uint amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Amount {
      get { if ((_hasBits0 & 4) != 0) { return amount_; } else { return AmountDefaultValue; } }
      set {
        _hasBits0 |= 4;
        amount_ = value;
      }
    }
    /// <summary>Gets whether the "Amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAmount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "Amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAmount() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 6;
    private readonly static global::YlPb.RedWalletState StateDefaultValue = global::YlPb.RedWalletState.Uncollected;

    private global::YlPb.RedWalletState state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.RedWalletState State {
      get { if ((_hasBits0 & 8) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 8;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "State" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "State" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "RecTime" field.</summary>
    public const int RecTimeFieldNumber = 7;
    private readonly static long RecTimeDefaultValue = 0L;

    private long recTime_;
    /// <summary>
    ///领取时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecTime {
      get { if ((_hasBits0 & 16) != 0) { return recTime_; } else { return RecTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        recTime_ = value;
      }
    }
    /// <summary>Gets whether the "RecTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "RecTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecTime() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedWallet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedWallet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (SuId != other.SuId) return false;
      if (TuId != other.TuId) return false;
      if (Title != other.Title) return false;
      if (Amount != other.Amount) return false;
      if (State != other.State) return false;
      if (RecTime != other.RecTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOrderId) hash ^= OrderId.GetHashCode();
      if (HasSuId) hash ^= SuId.GetHashCode();
      if (HasTuId) hash ^= TuId.GetHashCode();
      if (HasTitle) hash ^= Title.GetHashCode();
      if (HasAmount) hash ^= Amount.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      if (HasRecTime) hash ^= RecTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasOrderId) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (HasSuId) {
        output.WriteRawTag(16);
        output.WriteUInt32(SuId);
      }
      if (HasTuId) {
        output.WriteRawTag(24);
        output.WriteUInt32(TuId);
      }
      if (HasTitle) {
        output.WriteRawTag(34);
        output.WriteString(Title);
      }
      if (HasAmount) {
        output.WriteRawTag(40);
        output.WriteUInt32(Amount);
      }
      if (HasState) {
        output.WriteRawTag(48);
        output.WriteEnum((int) State);
      }
      if (HasRecTime) {
        output.WriteRawTag(56);
        output.WriteInt64(RecTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (HasSuId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuId);
      }
      if (HasTuId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TuId);
      }
      if (HasTitle) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (HasAmount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
      }
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (HasRecTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedWallet other) {
      if (other == null) {
        return;
      }
      if (other.HasOrderId) {
        OrderId = other.OrderId;
      }
      if (other.HasSuId) {
        SuId = other.SuId;
      }
      if (other.HasTuId) {
        TuId = other.TuId;
      }
      if (other.HasTitle) {
        Title = other.Title;
      }
      if (other.HasAmount) {
        Amount = other.Amount;
      }
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasRecTime) {
        RecTime = other.RecTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 16: {
            SuId = input.ReadUInt32();
            break;
          }
          case 24: {
            TuId = input.ReadUInt32();
            break;
          }
          case 34: {
            Title = input.ReadString();
            break;
          }
          case 40: {
            Amount = input.ReadUInt32();
            break;
          }
          case 48: {
            State = (global::YlPb.RedWalletState) input.ReadEnum();
            break;
          }
          case 56: {
            RecTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BaseUserInfo : pb::IMessage<BaseUserInfo> {
    private static readonly pb::MessageParser<BaseUserInfo> _parser = new pb::MessageParser<BaseUserInfo>(() => new BaseUserInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaseUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseUserInfo(BaseUserInfo other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      niceName_ = other.niceName_;
      headUrl_ = other.headUrl_;
      sex_ = other.sex_;
      language_ = other.language_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseUserInfo Clone() {
      return new BaseUserInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "Id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "NiceName" field.</summary>
    public const int NiceNameFieldNumber = 2;
    private readonly static string NiceNameDefaultValue = "";

    private string niceName_;
    /// <summary>
    ///昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NiceName {
      get { return niceName_ ?? NiceNameDefaultValue; }
      set {
        niceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "NiceName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNiceName {
      get { return niceName_ != null; }
    }
    /// <summary>Clears the value of the "NiceName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNiceName() {
      niceName_ = null;
    }

    /// <summary>Field number for the "HeadUrl" field.</summary>
    public const int HeadUrlFieldNumber = 3;
    private readonly static string HeadUrlDefaultValue = "";

    private string headUrl_;
    /// <summary>
    ///头像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadUrl {
      get { return headUrl_ ?? HeadUrlDefaultValue; }
      set {
        headUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "HeadUrl" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeadUrl {
      get { return headUrl_ != null; }
    }
    /// <summary>Clears the value of the "HeadUrl" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeadUrl() {
      headUrl_ = null;
    }

    /// <summary>Field number for the "Sex" field.</summary>
    public const int SexFieldNumber = 4;
    private readonly static int SexDefaultValue = 0;

    private int sex_;
    /// <summary>
    ///性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { if ((_hasBits0 & 2) != 0) { return sex_; } else { return SexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        sex_ = value;
      }
    }
    /// <summary>Gets whether the "Sex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "Sex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "Language" field.</summary>
    public const int LanguageFieldNumber = 5;
    private readonly static uint LanguageDefaultValue = 0;

    private uint language_;
    /// <summary>
    ///语言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Language {
      get { if ((_hasBits0 & 4) != 0) { return language_; } else { return LanguageDefaultValue; } }
      set {
        _hasBits0 |= 4;
        language_ = value;
      }
    }
    /// <summary>Gets whether the "Language" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLanguage {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "Language" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLanguage() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BaseUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BaseUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (NiceName != other.NiceName) return false;
      if (HeadUrl != other.HeadUrl) return false;
      if (Sex != other.Sex) return false;
      if (Language != other.Language) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasNiceName) hash ^= NiceName.GetHashCode();
      if (HasHeadUrl) hash ^= HeadUrl.GetHashCode();
      if (HasSex) hash ^= Sex.GetHashCode();
      if (HasLanguage) hash ^= Language.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasNiceName) {
        output.WriteRawTag(18);
        output.WriteString(NiceName);
      }
      if (HasHeadUrl) {
        output.WriteRawTag(26);
        output.WriteString(HeadUrl);
      }
      if (HasSex) {
        output.WriteRawTag(32);
        output.WriteInt32(Sex);
      }
      if (HasLanguage) {
        output.WriteRawTag(40);
        output.WriteUInt32(Language);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasNiceName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NiceName);
      }
      if (HasHeadUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadUrl);
      }
      if (HasSex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (HasLanguage) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Language);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BaseUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasNiceName) {
        NiceName = other.NiceName;
      }
      if (other.HasHeadUrl) {
        HeadUrl = other.HeadUrl;
      }
      if (other.HasSex) {
        Sex = other.Sex;
      }
      if (other.HasLanguage) {
        Language = other.Language;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            NiceName = input.ReadString();
            break;
          }
          case 26: {
            HeadUrl = input.ReadString();
            break;
          }
          case 32: {
            Sex = input.ReadInt32();
            break;
          }
          case 40: {
            Language = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///聊天对象信息
  /// </summary>
  public sealed partial class ChatMsgObjInfo : pb::IMessage<ChatMsgObjInfo> {
    private static readonly pb::MessageParser<ChatMsgObjInfo> _parser = new pb::MessageParser<ChatMsgObjInfo>(() => new ChatMsgObjInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatMsgObjInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMsgObjInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMsgObjInfo(ChatMsgObjInfo other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      name_ = other.name_;
      url_ = other.url_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMsgObjInfo Clone() {
      return new ChatMsgObjInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "Id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "Name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "Url" field.</summary>
    public const int UrlFieldNumber = 3;
    private readonly static string UrlDefaultValue = "";

    private string url_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_ ?? UrlDefaultValue; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUrl {
      get { return url_ != null; }
    }
    /// <summary>Clears the value of the "Url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUrl() {
      url_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatMsgObjInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatMsgObjInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Url != other.Url) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasUrl) hash ^= Url.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasUrl) {
        output.WriteRawTag(26);
        output.WriteString(Url);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatMsgObjInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasUrl) {
        Url = other.Url;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Url = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChatNiceo : pb::IMessage<ChatNiceo> {
    private static readonly pb::MessageParser<ChatNiceo> _parser = new pb::MessageParser<ChatNiceo>(() => new ChatNiceo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatNiceo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatNiceo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatNiceo(ChatNiceo other) : this() {
      _hasBits0 = other._hasBits0;
      nictoType_ = other.nictoType_;
      nictoMsg_ = other.nictoMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatNiceo Clone() {
      return new ChatNiceo(this);
    }

    /// <summary>Field number for the "NictoType" field.</summary>
    public const int NictoTypeFieldNumber = 1;
    private readonly static global::YlPb.ChatNiceoType NictoTypeDefaultValue = global::YlPb.ChatNiceoType.GroupAddMember;

    private global::YlPb.ChatNiceoType nictoType_;
    /// <summary>
    ///公告类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatNiceoType NictoType {
      get { if ((_hasBits0 & 1) != 0) { return nictoType_; } else { return NictoTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        nictoType_ = value;
      }
    }
    /// <summary>Gets whether the "NictoType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNictoType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "NictoType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNictoType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "NictoMsg" field.</summary>
    public const int NictoMsgFieldNumber = 2;
    private readonly static string NictoMsgDefaultValue = "";

    private string nictoMsg_;
    /// <summary>
    ///公告消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NictoMsg {
      get { return nictoMsg_ ?? NictoMsgDefaultValue; }
      set {
        nictoMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "NictoMsg" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNictoMsg {
      get { return nictoMsg_ != null; }
    }
    /// <summary>Clears the value of the "NictoMsg" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNictoMsg() {
      nictoMsg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatNiceo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatNiceo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NictoType != other.NictoType) return false;
      if (NictoMsg != other.NictoMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNictoType) hash ^= NictoType.GetHashCode();
      if (HasNictoMsg) hash ^= NictoMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasNictoType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) NictoType);
      }
      if (HasNictoMsg) {
        output.WriteRawTag(18);
        output.WriteString(NictoMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasNictoType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NictoType);
      }
      if (HasNictoMsg) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NictoMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatNiceo other) {
      if (other == null) {
        return;
      }
      if (other.HasNictoType) {
        NictoType = other.NictoType;
      }
      if (other.HasNictoMsg) {
        NictoMsg = other.NictoMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NictoType = (global::YlPb.ChatNiceoType) input.ReadEnum();
            break;
          }
          case 18: {
            NictoMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GiftChat : pb::IMessage<GiftChat> {
    private static readonly pb::MessageParser<GiftChat> _parser = new pb::MessageParser<GiftChat>(() => new GiftChat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiftChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftChat(GiftChat other) : this() {
      _hasBits0 = other._hasBits0;
      suId_ = other.suId_;
      tuId_ = other.tuId_;
      giftId_ = other.giftId_;
      giftName_ = other.giftName_;
      giftAmount_ = other.giftAmount_;
      money_ = other.money_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftChat Clone() {
      return new GiftChat(this);
    }

    /// <summary>Field number for the "SuId" field.</summary>
    public const int SuIdFieldNumber = 1;
    private readonly static uint SuIdDefaultValue = 0;

    private uint suId_;
    /// <summary>
    ///发送者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuId {
      get { if ((_hasBits0 & 1) != 0) { return suId_; } else { return SuIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        suId_ = value;
      }
    }
    /// <summary>Gets whether the "SuId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "SuId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "TuId" field.</summary>
    public const int TuIdFieldNumber = 2;
    private readonly static uint TuIdDefaultValue = 0;

    private uint tuId_;
    /// <summary>
    ///接收者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TuId {
      get { if ((_hasBits0 & 2) != 0) { return tuId_; } else { return TuIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        tuId_ = value;
      }
    }
    /// <summary>Gets whether the "TuId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTuId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "TuId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTuId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "GiftId" field.</summary>
    public const int GiftIdFieldNumber = 3;
    private readonly static uint GiftIdDefaultValue = 0;

    private uint giftId_;
    /// <summary>
    ///礼物Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GiftId {
      get { if ((_hasBits0 & 4) != 0) { return giftId_; } else { return GiftIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        giftId_ = value;
      }
    }
    /// <summary>Gets whether the "GiftId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGiftId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "GiftId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGiftId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "GiftName" field.</summary>
    public const int GiftNameFieldNumber = 4;
    private readonly static string GiftNameDefaultValue = "";

    private string giftName_;
    /// <summary>
    ///礼物名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GiftName {
      get { return giftName_ ?? GiftNameDefaultValue; }
      set {
        giftName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "GiftName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGiftName {
      get { return giftName_ != null; }
    }
    /// <summary>Clears the value of the "GiftName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGiftName() {
      giftName_ = null;
    }

    /// <summary>Field number for the "GiftAmount" field.</summary>
    public const int GiftAmountFieldNumber = 5;
    private readonly static uint GiftAmountDefaultValue = 0;

    private uint giftAmount_;
    /// <summary>
    ///礼物数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GiftAmount {
      get { if ((_hasBits0 & 8) != 0) { return giftAmount_; } else { return GiftAmountDefaultValue; } }
      set {
        _hasBits0 |= 8;
        giftAmount_ = value;
      }
    }
    /// <summary>Gets whether the "GiftAmount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGiftAmount {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "GiftAmount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGiftAmount() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "Money" field.</summary>
    public const int MoneyFieldNumber = 6;
    private readonly static uint MoneyDefaultValue = 0;

    private uint money_;
    /// <summary>
    ///钱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Money {
      get { if ((_hasBits0 & 16) != 0) { return money_; } else { return MoneyDefaultValue; } }
      set {
        _hasBits0 |= 16;
        money_ = value;
      }
    }
    /// <summary>Gets whether the "Money" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMoney {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "Money" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMoney() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiftChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiftChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SuId != other.SuId) return false;
      if (TuId != other.TuId) return false;
      if (GiftId != other.GiftId) return false;
      if (GiftName != other.GiftName) return false;
      if (GiftAmount != other.GiftAmount) return false;
      if (Money != other.Money) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSuId) hash ^= SuId.GetHashCode();
      if (HasTuId) hash ^= TuId.GetHashCode();
      if (HasGiftId) hash ^= GiftId.GetHashCode();
      if (HasGiftName) hash ^= GiftName.GetHashCode();
      if (HasGiftAmount) hash ^= GiftAmount.GetHashCode();
      if (HasMoney) hash ^= Money.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSuId) {
        output.WriteRawTag(8);
        output.WriteUInt32(SuId);
      }
      if (HasTuId) {
        output.WriteRawTag(16);
        output.WriteUInt32(TuId);
      }
      if (HasGiftId) {
        output.WriteRawTag(24);
        output.WriteUInt32(GiftId);
      }
      if (HasGiftName) {
        output.WriteRawTag(34);
        output.WriteString(GiftName);
      }
      if (HasGiftAmount) {
        output.WriteRawTag(40);
        output.WriteUInt32(GiftAmount);
      }
      if (HasMoney) {
        output.WriteRawTag(48);
        output.WriteUInt32(Money);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSuId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuId);
      }
      if (HasTuId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TuId);
      }
      if (HasGiftId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GiftId);
      }
      if (HasGiftName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GiftName);
      }
      if (HasGiftAmount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GiftAmount);
      }
      if (HasMoney) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Money);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiftChat other) {
      if (other == null) {
        return;
      }
      if (other.HasSuId) {
        SuId = other.SuId;
      }
      if (other.HasTuId) {
        TuId = other.TuId;
      }
      if (other.HasGiftId) {
        GiftId = other.GiftId;
      }
      if (other.HasGiftName) {
        GiftName = other.GiftName;
      }
      if (other.HasGiftAmount) {
        GiftAmount = other.GiftAmount;
      }
      if (other.HasMoney) {
        Money = other.Money;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SuId = input.ReadUInt32();
            break;
          }
          case 16: {
            TuId = input.ReadUInt32();
            break;
          }
          case 24: {
            GiftId = input.ReadUInt32();
            break;
          }
          case 34: {
            GiftName = input.ReadString();
            break;
          }
          case 40: {
            GiftAmount = input.ReadUInt32();
            break;
          }
          case 48: {
            Money = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FileChat : pb::IMessage<FileChat> {
    private static readonly pb::MessageParser<FileChat> _parser = new pb::MessageParser<FileChat>(() => new FileChat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileChat(FileChat other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      size_ = other.size_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileChat Clone() {
      return new FileChat(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    /// <summary>
    ///文件类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "Type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 2;
    private readonly static uint SizeDefaultValue = 0;

    private uint size_;
    /// <summary>
    ///文件大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { if ((_hasBits0 & 1) != 0) { return size_; } else { return SizeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        size_ = value;
      }
    }
    /// <summary>Gets whether the "Size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSize() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    ///文件名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "Name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Size != other.Size) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasSize) hash ^= Size.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasSize) {
        output.WriteRawTag(16);
        output.WriteUInt32(Size);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasSize) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileChat other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasSize) {
        Size = other.Size;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 16: {
            Size = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///引用消息数据结构
  /// </summary>
  public sealed partial class QuoteMsg : pb::IMessage<QuoteMsg> {
    private static readonly pb::MessageParser<QuoteMsg> _parser = new pb::MessageParser<QuoteMsg>(() => new QuoteMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuoteMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuoteMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuoteMsg(QuoteMsg other) : this() {
      _hasBits0 = other._hasBits0;
      channelType_ = other.channelType_;
      targetId_ = other.targetId_;
      sendUserId_ = other.sendUserId_;
      sendTime_ = other.sendTime_;
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuoteMsg Clone() {
      return new QuoteMsg(this);
    }

    /// <summary>Field number for the "ChannelType" field.</summary>
    public const int ChannelTypeFieldNumber = 1;
    private readonly static global::YlPb.ChatChannelType ChannelTypeDefaultValue = global::YlPb.ChatChannelType.Session;

    private global::YlPb.ChatChannelType channelType_;
    /// <summary>
    ///发送频道类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatChannelType ChannelType {
      get { if ((_hasBits0 & 1) != 0) { return channelType_; } else { return ChannelTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        channelType_ = value;
      }
    }
    /// <summary>Gets whether the "ChannelType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ChannelType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "TargetId" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private readonly static uint TargetIdDefaultValue = 0;

    private uint targetId_;
    /// <summary>
    ///发送目标Id SessionId or GroudId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { if ((_hasBits0 & 2) != 0) { return targetId_; } else { return TargetIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetId_ = value;
      }
    }
    /// <summary>Gets whether the "TargetId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "TargetId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "SendUserId" field.</summary>
    public const int SendUserIdFieldNumber = 3;
    private readonly static uint SendUserIdDefaultValue = 0;

    private uint sendUserId_;
    /// <summary>
    ///消息发送者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SendUserId {
      get { if ((_hasBits0 & 4) != 0) { return sendUserId_; } else { return SendUserIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        sendUserId_ = value;
      }
    }
    /// <summary>Gets whether the "SendUserId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSendUserId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "SendUserId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSendUserId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "SendTime" field.</summary>
    public const int SendTimeFieldNumber = 4;
    private readonly static long SendTimeDefaultValue = 0L;

    private long sendTime_;
    /// <summary>
    ///发送时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTime {
      get { if ((_hasBits0 & 8) != 0) { return sendTime_; } else { return SendTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        sendTime_ = value;
      }
    }
    /// <summary>Gets whether the "SendTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSendTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "SendTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSendTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 5;
    private readonly static string ContentDefaultValue = "";

    private string content_;
    /// <summary>
    ///消息附件地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_ ?? ContentDefaultValue; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Content" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContent {
      get { return content_ != null; }
    }
    /// <summary>Clears the value of the "Content" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuoteMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuoteMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelType != other.ChannelType) return false;
      if (TargetId != other.TargetId) return false;
      if (SendUserId != other.SendUserId) return false;
      if (SendTime != other.SendTime) return false;
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChannelType) hash ^= ChannelType.GetHashCode();
      if (HasTargetId) hash ^= TargetId.GetHashCode();
      if (HasSendUserId) hash ^= SendUserId.GetHashCode();
      if (HasSendTime) hash ^= SendTime.GetHashCode();
      if (HasContent) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasChannelType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChannelType);
      }
      if (HasTargetId) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetId);
      }
      if (HasSendUserId) {
        output.WriteRawTag(24);
        output.WriteUInt32(SendUserId);
      }
      if (HasSendTime) {
        output.WriteRawTag(32);
        output.WriteInt64(SendTime);
      }
      if (HasContent) {
        output.WriteRawTag(42);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasChannelType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChannelType);
      }
      if (HasTargetId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (HasSendUserId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SendUserId);
      }
      if (HasSendTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTime);
      }
      if (HasContent) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuoteMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasChannelType) {
        ChannelType = other.ChannelType;
      }
      if (other.HasTargetId) {
        TargetId = other.TargetId;
      }
      if (other.HasSendUserId) {
        SendUserId = other.SendUserId;
      }
      if (other.HasSendTime) {
        SendTime = other.SendTime;
      }
      if (other.HasContent) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelType = (global::YlPb.ChatChannelType) input.ReadEnum();
            break;
          }
          case 16: {
            TargetId = input.ReadUInt32();
            break;
          }
          case 24: {
            SendUserId = input.ReadUInt32();
            break;
          }
          case 32: {
            SendTime = input.ReadInt64();
            break;
          }
          case 42: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///翻译失败返回消息结果
  /// </summary>
  public sealed partial class HumanTransFail : pb::IMessage<HumanTransFail> {
    private static readonly pb::MessageParser<HumanTransFail> _parser = new pb::MessageParser<HumanTransFail>(() => new HumanTransFail());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HumanTransFail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HumanTransFail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HumanTransFail(HumanTransFail other) : this() {
      _hasBits0 = other._hasBits0;
      money_ = other.money_;
      ticket_ = other.ticket_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HumanTransFail Clone() {
      return new HumanTransFail(this);
    }

    /// <summary>Field number for the "Money" field.</summary>
    public const int MoneyFieldNumber = 1;
    private readonly static uint MoneyDefaultValue = 0;

    private uint money_;
    /// <summary>
    ///退回h币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Money {
      get { if ((_hasBits0 & 1) != 0) { return money_; } else { return MoneyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        money_ = value;
      }
    }
    /// <summary>Gets whether the "Money" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMoney {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Money" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMoney() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Ticket" field.</summary>
    public const int TicketFieldNumber = 2;
    private readonly static uint TicketDefaultValue = 0;

    private uint ticket_;
    /// <summary>
    ///退回翻译券
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ticket {
      get { if ((_hasBits0 & 2) != 0) { return ticket_; } else { return TicketDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ticket_ = value;
      }
    }
    /// <summary>Gets whether the "Ticket" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTicket {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "Ticket" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTicket() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HumanTransFail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HumanTransFail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Money != other.Money) return false;
      if (Ticket != other.Ticket) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMoney) hash ^= Money.GetHashCode();
      if (HasTicket) hash ^= Ticket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasMoney) {
        output.WriteRawTag(8);
        output.WriteUInt32(Money);
      }
      if (HasTicket) {
        output.WriteRawTag(16);
        output.WriteUInt32(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMoney) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Money);
      }
      if (HasTicket) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ticket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HumanTransFail other) {
      if (other == null) {
        return;
      }
      if (other.HasMoney) {
        Money = other.Money;
      }
      if (other.HasTicket) {
        Ticket = other.Ticket;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Money = input.ReadUInt32();
            break;
          }
          case 16: {
            Ticket = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///分享内容
  /// </summary>
  public sealed partial class ShareContentData : pb::IMessage<ShareContentData> {
    private static readonly pb::MessageParser<ShareContentData> _parser = new pb::MessageParser<ShareContentData>(() => new ShareContentData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShareContentData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareContentData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareContentData(ShareContentData other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      type_ = other.type_;
      text_ = other.text_;
      image_ = other.image_;
      author_ = other.author_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareContentData Clone() {
      return new ShareContentData(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "Id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static ulong TypeDefaultValue = 0UL;

    private ulong type_;
    /// <summary>
    ///类型 0 笔记 1 作品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Type {
      get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "Type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "Type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "Text" field.</summary>
    public const int TextFieldNumber = 3;
    private readonly static string TextDefaultValue = "";

    private string text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_ ?? TextDefaultValue; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Text" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasText {
      get { return text_ != null; }
    }
    /// <summary>Clears the value of the "Text" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearText() {
      text_ = null;
    }

    /// <summary>Field number for the "Image" field.</summary>
    public const int ImageFieldNumber = 4;
    private readonly static string ImageDefaultValue = "";

    private string image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_ ?? ImageDefaultValue; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Image" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImage {
      get { return image_ != null; }
    }
    /// <summary>Clears the value of the "Image" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImage() {
      image_ = null;
    }

    /// <summary>Field number for the "Author" field.</summary>
    public const int AuthorFieldNumber = 5;
    private static readonly pb::FieldCodec<global::YlPb.BaseUserInfo> _repeated_author_codec
        = pb::FieldCodec.ForMessage(42, global::YlPb.BaseUserInfo.Parser);
    private readonly pbc::RepeatedField<global::YlPb.BaseUserInfo> author_ = new pbc::RepeatedField<global::YlPb.BaseUserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::YlPb.BaseUserInfo> Author {
      get { return author_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShareContentData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShareContentData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (Text != other.Text) return false;
      if (Image != other.Image) return false;
      if(!author_.Equals(other.author_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasText) hash ^= Text.GetHashCode();
      if (HasImage) hash ^= Image.GetHashCode();
      hash ^= author_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteUInt64(Type);
      }
      if (HasText) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (HasImage) {
        output.WriteRawTag(34);
        output.WriteString(Image);
      }
      author_.WriteTo(output, _repeated_author_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Type);
      }
      if (HasText) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (HasImage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      size += author_.CalculateSize(_repeated_author_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShareContentData other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasText) {
        Text = other.Text;
      }
      if (other.HasImage) {
        Image = other.Image;
      }
      author_.Add(other.author_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Type = input.ReadUInt64();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
          case 34: {
            Image = input.ReadString();
            break;
          }
          case 42: {
            author_.AddEntriesFrom(input, _repeated_author_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///分享商店商品信息
  /// </summary>
  public sealed partial class ShareCWShopData : pb::IMessage<ShareCWShopData> {
    private static readonly pb::MessageParser<ShareCWShopData> _parser = new pb::MessageParser<ShareCWShopData>(() => new ShareCWShopData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShareCWShopData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareCWShopData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareCWShopData(ShareCWShopData other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      title_ = other.title_;
      image_ = other.image_;
      url_ = other.url_;
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareCWShopData Clone() {
      return new ShareCWShopData(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static uint TypeDefaultValue = 0;

    private uint type_;
    /// <summary>
    ///类型 0 商店 1 商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "Type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 2;
    private readonly static string TitleDefaultValue = "";

    private string title_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_ ?? TitleDefaultValue; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Title" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTitle {
      get { return title_ != null; }
    }
    /// <summary>Clears the value of the "Title" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTitle() {
      title_ = null;
    }

    /// <summary>Field number for the "Image" field.</summary>
    public const int ImageFieldNumber = 3;
    private readonly static string ImageDefaultValue = "";

    private string image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_ ?? ImageDefaultValue; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Image" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImage {
      get { return image_ != null; }
    }
    /// <summary>Clears the value of the "Image" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImage() {
      image_ = null;
    }

    /// <summary>Field number for the "Url" field.</summary>
    public const int UrlFieldNumber = 4;
    private readonly static string UrlDefaultValue = "";

    private string url_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_ ?? UrlDefaultValue; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUrl {
      get { return url_ != null; }
    }
    /// <summary>Clears the value of the "Url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUrl() {
      url_ = null;
    }

    /// <summary>Field number for the "Description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "Description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShareCWShopData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShareCWShopData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Title != other.Title) return false;
      if (Image != other.Image) return false;
      if (Url != other.Url) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasTitle) hash ^= Title.GetHashCode();
      if (HasImage) hash ^= Image.GetHashCode();
      if (HasUrl) hash ^= Url.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (HasTitle) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (HasImage) {
        output.WriteRawTag(26);
        output.WriteString(Image);
      }
      if (HasUrl) {
        output.WriteRawTag(34);
        output.WriteString(Url);
      }
      if (HasDescription) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (HasTitle) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (HasImage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      if (HasUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShareCWShopData other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasTitle) {
        Title = other.Title;
      }
      if (other.HasImage) {
        Image = other.Image;
      }
      if (other.HasUrl) {
        Url = other.Url;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Image = input.ReadString();
            break;
          }
          case 34: {
            Url = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///群头条
  /// </summary>
  public sealed partial class GroupTouTiao : pb::IMessage<GroupTouTiao> {
    private static readonly pb::MessageParser<GroupTouTiao> _parser = new pb::MessageParser<GroupTouTiao>(() => new GroupTouTiao());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupTouTiao> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupTouTiao() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupTouTiao(GroupTouTiao other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      title_ = other.title_;
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupTouTiao Clone() {
      return new GroupTouTiao(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "Id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 2;
    private readonly static string TitleDefaultValue = "";

    private string title_;
    /// <summary>
    ///标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_ ?? TitleDefaultValue; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Title" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTitle {
      get { return title_ != null; }
    }
    /// <summary>Clears the value of the "Title" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTitle() {
      title_ = null;
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 3;
    private readonly static string ContentDefaultValue = "";

    private string content_;
    /// <summary>
    ///内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_ ?? ContentDefaultValue; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Content" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContent {
      get { return content_ != null; }
    }
    /// <summary>Clears the value of the "Content" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupTouTiao);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupTouTiao other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Title != other.Title) return false;
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasTitle) hash ^= Title.GetHashCode();
      if (HasContent) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (HasTitle) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (HasContent) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (HasTitle) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (HasContent) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupTouTiao other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasTitle) {
        Title = other.Title;
      }
      if (other.HasContent) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///评价
  /// </summary>
  public sealed partial class AssessChat : pb::IMessage<AssessChat> {
    private static readonly pb::MessageParser<AssessChat> _parser = new pb::MessageParser<AssessChat>(() => new AssessChat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssessChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssessChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssessChat(AssessChat other) : this() {
      _hasBits0 = other._hasBits0;
      assessUserId_ = other.assessUserId_;
      language_ = other.language_;
      courtesy_ = other.courtesy_;
      appearance_ = other.appearance_;
      giftLevel_ = other.giftLevel_;
      isAssess_ = other.isAssess_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssessChat Clone() {
      return new AssessChat(this);
    }

    /// <summary>Field number for the "AssessUserId" field.</summary>
    public const int AssessUserIdFieldNumber = 1;
    private readonly static uint AssessUserIdDefaultValue = 0;

    private uint assessUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AssessUserId {
      get { if ((_hasBits0 & 1) != 0) { return assessUserId_; } else { return AssessUserIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        assessUserId_ = value;
      }
    }
    /// <summary>Gets whether the "AssessUserId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAssessUserId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "AssessUserId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAssessUserId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Language" field.</summary>
    public const int LanguageFieldNumber = 2;
    private readonly static uint LanguageDefaultValue = 0;

    private uint language_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Language {
      get { if ((_hasBits0 & 2) != 0) { return language_; } else { return LanguageDefaultValue; } }
      set {
        _hasBits0 |= 2;
        language_ = value;
      }
    }
    /// <summary>Gets whether the "Language" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLanguage {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "Language" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLanguage() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "Courtesy" field.</summary>
    public const int CourtesyFieldNumber = 3;
    private readonly static uint CourtesyDefaultValue = 0;

    private uint courtesy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Courtesy {
      get { if ((_hasBits0 & 4) != 0) { return courtesy_; } else { return CourtesyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        courtesy_ = value;
      }
    }
    /// <summary>Gets whether the "Courtesy" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCourtesy {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "Courtesy" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCourtesy() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "Appearance" field.</summary>
    public const int AppearanceFieldNumber = 4;
    private readonly static uint AppearanceDefaultValue = 0;

    private uint appearance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Appearance {
      get { if ((_hasBits0 & 8) != 0) { return appearance_; } else { return AppearanceDefaultValue; } }
      set {
        _hasBits0 |= 8;
        appearance_ = value;
      }
    }
    /// <summary>Gets whether the "Appearance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAppearance {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "Appearance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAppearance() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "GiftLevel" field.</summary>
    public const int GiftLevelFieldNumber = 5;
    private readonly static uint GiftLevelDefaultValue = 0;

    private uint giftLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GiftLevel {
      get { if ((_hasBits0 & 16) != 0) { return giftLevel_; } else { return GiftLevelDefaultValue; } }
      set {
        _hasBits0 |= 16;
        giftLevel_ = value;
      }
    }
    /// <summary>Gets whether the "GiftLevel" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGiftLevel {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "GiftLevel" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGiftLevel() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "IsAssess" field.</summary>
    public const int IsAssessFieldNumber = 6;
    private readonly static bool IsAssessDefaultValue = false;

    private bool isAssess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAssess {
      get { if ((_hasBits0 & 32) != 0) { return isAssess_; } else { return IsAssessDefaultValue; } }
      set {
        _hasBits0 |= 32;
        isAssess_ = value;
      }
    }
    /// <summary>Gets whether the "IsAssess" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsAssess {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "IsAssess" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsAssess() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssessChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssessChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssessUserId != other.AssessUserId) return false;
      if (Language != other.Language) return false;
      if (Courtesy != other.Courtesy) return false;
      if (Appearance != other.Appearance) return false;
      if (GiftLevel != other.GiftLevel) return false;
      if (IsAssess != other.IsAssess) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAssessUserId) hash ^= AssessUserId.GetHashCode();
      if (HasLanguage) hash ^= Language.GetHashCode();
      if (HasCourtesy) hash ^= Courtesy.GetHashCode();
      if (HasAppearance) hash ^= Appearance.GetHashCode();
      if (HasGiftLevel) hash ^= GiftLevel.GetHashCode();
      if (HasIsAssess) hash ^= IsAssess.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasAssessUserId) {
        output.WriteRawTag(8);
        output.WriteUInt32(AssessUserId);
      }
      if (HasLanguage) {
        output.WriteRawTag(16);
        output.WriteUInt32(Language);
      }
      if (HasCourtesy) {
        output.WriteRawTag(24);
        output.WriteUInt32(Courtesy);
      }
      if (HasAppearance) {
        output.WriteRawTag(32);
        output.WriteUInt32(Appearance);
      }
      if (HasGiftLevel) {
        output.WriteRawTag(40);
        output.WriteUInt32(GiftLevel);
      }
      if (HasIsAssess) {
        output.WriteRawTag(48);
        output.WriteBool(IsAssess);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAssessUserId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AssessUserId);
      }
      if (HasLanguage) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Language);
      }
      if (HasCourtesy) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Courtesy);
      }
      if (HasAppearance) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Appearance);
      }
      if (HasGiftLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GiftLevel);
      }
      if (HasIsAssess) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssessChat other) {
      if (other == null) {
        return;
      }
      if (other.HasAssessUserId) {
        AssessUserId = other.AssessUserId;
      }
      if (other.HasLanguage) {
        Language = other.Language;
      }
      if (other.HasCourtesy) {
        Courtesy = other.Courtesy;
      }
      if (other.HasAppearance) {
        Appearance = other.Appearance;
      }
      if (other.HasGiftLevel) {
        GiftLevel = other.GiftLevel;
      }
      if (other.HasIsAssess) {
        IsAssess = other.IsAssess;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AssessUserId = input.ReadUInt32();
            break;
          }
          case 16: {
            Language = input.ReadUInt32();
            break;
          }
          case 24: {
            Courtesy = input.ReadUInt32();
            break;
          }
          case 32: {
            Appearance = input.ReadUInt32();
            break;
          }
          case 40: {
            GiftLevel = input.ReadUInt32();
            break;
          }
          case 48: {
            IsAssess = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///签证订单
  /// </summary>
  public sealed partial class VisaOrder : pb::IMessage<VisaOrder> {
    private static readonly pb::MessageParser<VisaOrder> _parser = new pb::MessageParser<VisaOrder>(() => new VisaOrder());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisaOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisaOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisaOrder(VisaOrder other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      type_ = other.type_;
      count_ = other.count_;
      username_ = other.username_;
      telephone_ = other.telephone_;
      totalNum_ = other.totalNum_;
      realNum_ = other.realNum_;
      createTime_ = other.createTime_;
      status_ = other.status_;
      process_ = other.process_;
      city_ = other.city_;
      detailAddress_ = other.detailAddress_;
      costType_ = other.costType_;
      travelDate_ = other.travelDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisaOrder Clone() {
      return new VisaOrder(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "Id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    /// <summary>
    ///签证类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "Type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 3;
    private readonly static string CountDefaultValue = "";

    private string count_;
    /// <summary>
    ///签证次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Count {
      get { return count_ ?? CountDefaultValue; }
      set {
        count_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return count_ != null; }
    }
    /// <summary>Clears the value of the "Count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      count_ = null;
    }

    /// <summary>Field number for the "Username" field.</summary>
    public const int UsernameFieldNumber = 4;
    private readonly static string UsernameDefaultValue = "";

    private string username_;
    /// <summary>
    ///用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_ ?? UsernameDefaultValue; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Username" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUsername {
      get { return username_ != null; }
    }
    /// <summary>Clears the value of the "Username" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUsername() {
      username_ = null;
    }

    /// <summary>Field number for the "Telephone" field.</summary>
    public const int TelephoneFieldNumber = 5;
    private readonly static string TelephoneDefaultValue = "";

    private string telephone_;
    /// <summary>
    ///手机号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Telephone {
      get { return telephone_ ?? TelephoneDefaultValue; }
      set {
        telephone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Telephone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTelephone {
      get { return telephone_ != null; }
    }
    /// <summary>Clears the value of the "Telephone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTelephone() {
      telephone_ = null;
    }

    /// <summary>Field number for the "TotalNum" field.</summary>
    public const int TotalNumFieldNumber = 6;
    private readonly static int TotalNumDefaultValue = 0;

    private int totalNum_;
    /// <summary>
    ///总价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNum {
      get { if ((_hasBits0 & 1) != 0) { return totalNum_; } else { return TotalNumDefaultValue; } }
      set {
        _hasBits0 |= 1;
        totalNum_ = value;
      }
    }
    /// <summary>Gets whether the "TotalNum" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTotalNum {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "TotalNum" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTotalNum() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "RealNum" field.</summary>
    public const int RealNumFieldNumber = 7;
    private readonly static int RealNumDefaultValue = 0;

    private int realNum_;
    /// <summary>
    ///实际付款
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RealNum {
      get { if ((_hasBits0 & 2) != 0) { return realNum_; } else { return RealNumDefaultValue; } }
      set {
        _hasBits0 |= 2;
        realNum_ = value;
      }
    }
    /// <summary>Gets whether the "RealNum" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRealNum {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "RealNum" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRealNum() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "CreateTime" field.</summary>
    public const int CreateTimeFieldNumber = 8;
    private readonly static long CreateTimeDefaultValue = 0L;

    private long createTime_;
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { if ((_hasBits0 & 4) != 0) { return createTime_; } else { return CreateTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        createTime_ = value;
      }
    }
    /// <summary>Gets whether the "CreateTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreateTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "CreateTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreateTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 9;
    private readonly static int StatusDefaultValue = 0;

    private int status_;
    /// <summary>
    ///订单状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { if ((_hasBits0 & 8) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 8;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "Status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "Status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "Process" field.</summary>
    public const int ProcessFieldNumber = 10;
    private readonly static int ProcessDefaultValue = 0;

    private int process_;
    /// <summary>
    ///审核进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Process {
      get { if ((_hasBits0 & 16) != 0) { return process_; } else { return ProcessDefaultValue; } }
      set {
        _hasBits0 |= 16;
        process_ = value;
      }
    }
    /// <summary>Gets whether the "Process" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProcess {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "Process" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProcess() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "City" field.</summary>
    public const int CityFieldNumber = 11;
    private readonly static string CityDefaultValue = "";

    private string city_;
    /// <summary>
    ///长期地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string City {
      get { return city_ ?? CityDefaultValue; }
      set {
        city_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "City" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCity {
      get { return city_ != null; }
    }
    /// <summary>Clears the value of the "City" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCity() {
      city_ = null;
    }

    /// <summary>Field number for the "DetailAddress" field.</summary>
    public const int DetailAddressFieldNumber = 12;
    private readonly static string DetailAddressDefaultValue = "";

    private string detailAddress_;
    /// <summary>
    ///详细地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DetailAddress {
      get { return detailAddress_ ?? DetailAddressDefaultValue; }
      set {
        detailAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "DetailAddress" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDetailAddress {
      get { return detailAddress_ != null; }
    }
    /// <summary>Clears the value of the "DetailAddress" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDetailAddress() {
      detailAddress_ = null;
    }

    /// <summary>Field number for the "CostType" field.</summary>
    public const int CostTypeFieldNumber = 13;
    private readonly static int CostTypeDefaultValue = 0;

    private int costType_;
    /// <summary>
    ///支付类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostType {
      get { if ((_hasBits0 & 32) != 0) { return costType_; } else { return CostTypeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        costType_ = value;
      }
    }
    /// <summary>Gets whether the "CostType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCostType {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "CostType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCostType() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "TravelDate" field.</summary>
    public const int TravelDateFieldNumber = 14;
    private readonly static long TravelDateDefaultValue = 0L;

    private long travelDate_;
    /// <summary>
    ///出行日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TravelDate {
      get { if ((_hasBits0 & 64) != 0) { return travelDate_; } else { return TravelDateDefaultValue; } }
      set {
        _hasBits0 |= 64;
        travelDate_ = value;
      }
    }
    /// <summary>Gets whether the "TravelDate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTravelDate {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "TravelDate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTravelDate() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisaOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisaOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (Count != other.Count) return false;
      if (Username != other.Username) return false;
      if (Telephone != other.Telephone) return false;
      if (TotalNum != other.TotalNum) return false;
      if (RealNum != other.RealNum) return false;
      if (CreateTime != other.CreateTime) return false;
      if (Status != other.Status) return false;
      if (Process != other.Process) return false;
      if (City != other.City) return false;
      if (DetailAddress != other.DetailAddress) return false;
      if (CostType != other.CostType) return false;
      if (TravelDate != other.TravelDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (HasUsername) hash ^= Username.GetHashCode();
      if (HasTelephone) hash ^= Telephone.GetHashCode();
      if (HasTotalNum) hash ^= TotalNum.GetHashCode();
      if (HasRealNum) hash ^= RealNum.GetHashCode();
      if (HasCreateTime) hash ^= CreateTime.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (HasProcess) hash ^= Process.GetHashCode();
      if (HasCity) hash ^= City.GetHashCode();
      if (HasDetailAddress) hash ^= DetailAddress.GetHashCode();
      if (HasCostType) hash ^= CostType.GetHashCode();
      if (HasTravelDate) hash ^= TravelDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (HasCount) {
        output.WriteRawTag(26);
        output.WriteString(Count);
      }
      if (HasUsername) {
        output.WriteRawTag(34);
        output.WriteString(Username);
      }
      if (HasTelephone) {
        output.WriteRawTag(42);
        output.WriteString(Telephone);
      }
      if (HasTotalNum) {
        output.WriteRawTag(48);
        output.WriteInt32(TotalNum);
      }
      if (HasRealNum) {
        output.WriteRawTag(56);
        output.WriteInt32(RealNum);
      }
      if (HasCreateTime) {
        output.WriteRawTag(64);
        output.WriteInt64(CreateTime);
      }
      if (HasStatus) {
        output.WriteRawTag(72);
        output.WriteInt32(Status);
      }
      if (HasProcess) {
        output.WriteRawTag(80);
        output.WriteInt32(Process);
      }
      if (HasCity) {
        output.WriteRawTag(90);
        output.WriteString(City);
      }
      if (HasDetailAddress) {
        output.WriteRawTag(98);
        output.WriteString(DetailAddress);
      }
      if (HasCostType) {
        output.WriteRawTag(104);
        output.WriteInt32(CostType);
      }
      if (HasTravelDate) {
        output.WriteRawTag(112);
        output.WriteInt64(TravelDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Count);
      }
      if (HasUsername) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (HasTelephone) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Telephone);
      }
      if (HasTotalNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
      }
      if (HasRealNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RealNum);
      }
      if (HasCreateTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (HasProcess) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Process);
      }
      if (HasCity) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
      }
      if (HasDetailAddress) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DetailAddress);
      }
      if (HasCostType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostType);
      }
      if (HasTravelDate) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TravelDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisaOrder other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasUsername) {
        Username = other.Username;
      }
      if (other.HasTelephone) {
        Telephone = other.Telephone;
      }
      if (other.HasTotalNum) {
        TotalNum = other.TotalNum;
      }
      if (other.HasRealNum) {
        RealNum = other.RealNum;
      }
      if (other.HasCreateTime) {
        CreateTime = other.CreateTime;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasProcess) {
        Process = other.Process;
      }
      if (other.HasCity) {
        City = other.City;
      }
      if (other.HasDetailAddress) {
        DetailAddress = other.DetailAddress;
      }
      if (other.HasCostType) {
        CostType = other.CostType;
      }
      if (other.HasTravelDate) {
        TravelDate = other.TravelDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Count = input.ReadString();
            break;
          }
          case 34: {
            Username = input.ReadString();
            break;
          }
          case 42: {
            Telephone = input.ReadString();
            break;
          }
          case 48: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 56: {
            RealNum = input.ReadInt32();
            break;
          }
          case 64: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 72: {
            Status = input.ReadInt32();
            break;
          }
          case 80: {
            Process = input.ReadInt32();
            break;
          }
          case 90: {
            City = input.ReadString();
            break;
          }
          case 98: {
            DetailAddress = input.ReadString();
            break;
          }
          case 104: {
            CostType = input.ReadInt32();
            break;
          }
          case 112: {
            TravelDate = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///-------------------------------------------------------------------------消息--------------------------------------------------------------------------------------------------
  /// MsgId=1 聊天消息发送请求
  /// </summary>
  public sealed partial class ChatSendReq : pb::IMessage<ChatSendReq> {
    private static readonly pb::MessageParser<ChatSendReq> _parser = new pb::MessageParser<ChatSendReq>(() => new ChatSendReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatSendReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatSendReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatSendReq(ChatSendReq other) : this() {
      _hasBits0 = other._hasBits0;
      channelType_ = other.channelType_;
      targetId_ = other.targetId_;
      sendTime_ = other.sendTime_;
      cType_ = other.cType_;
      contentBuff_ = other.contentBuff_;
      contentSzie_ = other.contentSzie_;
      enclosureUrl_ = other.enclosureUrl_;
      altUserIds_ = other.altUserIds_.Clone();
      quoteMsg_ = other.quoteMsg_;
      transContent_ = other.transContent_;
      burnAfterReadTime_ = other.burnAfterReadTime_;
      cMType_ = other.cMType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatSendReq Clone() {
      return new ChatSendReq(this);
    }

    /// <summary>Field number for the "ChannelType" field.</summary>
    public const int ChannelTypeFieldNumber = 1;
    private readonly static global::YlPb.ChatChannelType ChannelTypeDefaultValue = global::YlPb.ChatChannelType.Session;

    private global::YlPb.ChatChannelType channelType_;
    /// <summary>
    ///发送频道类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatChannelType ChannelType {
      get { if ((_hasBits0 & 1) != 0) { return channelType_; } else { return ChannelTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        channelType_ = value;
      }
    }
    /// <summary>Gets whether the "ChannelType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ChannelType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "TargetId" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private readonly static uint TargetIdDefaultValue = 0;

    private uint targetId_;
    /// <summary>
    ///发送目标Id UserId or GroudId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { if ((_hasBits0 & 2) != 0) { return targetId_; } else { return TargetIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetId_ = value;
      }
    }
    /// <summary>Gets whether the "TargetId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "TargetId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "SendTime" field.</summary>
    public const int SendTimeFieldNumber = 3;
    private readonly static long SendTimeDefaultValue = 0L;

    private long sendTime_;
    /// <summary>
    ///发送时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTime {
      get { if ((_hasBits0 & 4) != 0) { return sendTime_; } else { return SendTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        sendTime_ = value;
      }
    }
    /// <summary>Gets whether the "SendTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSendTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "SendTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSendTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "CType" field.</summary>
    public const int CTypeFieldNumber = 4;
    private readonly static global::YlPb.ChatType CTypeDefaultValue = global::YlPb.ChatType.TextChatType;

    private global::YlPb.ChatType cType_;
    /// <summary>
    ///聊天类型 //文字 图片 短语音 短视频
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatType CType {
      get { if ((_hasBits0 & 8) != 0) { return cType_; } else { return CTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cType_ = value;
      }
    }
    /// <summary>Gets whether the "CType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "CType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "ContentBuff" field.</summary>
    public const int ContentBuffFieldNumber = 5;
    private readonly static pb::ByteString ContentBuffDefaultValue = pb::ByteString.Empty;

    private pb::ByteString contentBuff_;
    /// <summary>
    ///内容数据 10k 最大
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ContentBuff {
      get { return contentBuff_ ?? ContentBuffDefaultValue; }
      set {
        contentBuff_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ContentBuff" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContentBuff {
      get { return contentBuff_ != null; }
    }
    /// <summary>Clears the value of the "ContentBuff" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContentBuff() {
      contentBuff_ = null;
    }

    /// <summary>Field number for the "ContentSzie" field.</summary>
    public const int ContentSzieFieldNumber = 6;
    private readonly static int ContentSzieDefaultValue = 0;

    private int contentSzie_;
    /// <summary>
    ///内容大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContentSzie {
      get { if ((_hasBits0 & 16) != 0) { return contentSzie_; } else { return ContentSzieDefaultValue; } }
      set {
        _hasBits0 |= 16;
        contentSzie_ = value;
      }
    }
    /// <summary>Gets whether the "ContentSzie" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContentSzie {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "ContentSzie" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContentSzie() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "EnclosureUrl" field.</summary>
    public const int EnclosureUrlFieldNumber = 7;
    private readonly static string EnclosureUrlDefaultValue = "";

    private string enclosureUrl_;
    /// <summary>
    ///消息附件地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnclosureUrl {
      get { return enclosureUrl_ ?? EnclosureUrlDefaultValue; }
      set {
        enclosureUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "EnclosureUrl" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEnclosureUrl {
      get { return enclosureUrl_ != null; }
    }
    /// <summary>Clears the value of the "EnclosureUrl" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEnclosureUrl() {
      enclosureUrl_ = null;
    }

    /// <summary>Field number for the "AltUserIds" field.</summary>
    public const int AltUserIdsFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_altUserIds_codec
        = pb::FieldCodec.ForUInt32(64);
    private readonly pbc::RepeatedField<uint> altUserIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///alt用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AltUserIds {
      get { return altUserIds_; }
    }

    /// <summary>Field number for the "QuoteMsg" field.</summary>
    public const int QuoteMsgFieldNumber = 9;
    private readonly static pb::ByteString QuoteMsgDefaultValue = pb::ByteString.Empty;

    private pb::ByteString quoteMsg_;
    /// <summary>
    ///引用消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString QuoteMsg {
      get { return quoteMsg_ ?? QuoteMsgDefaultValue; }
      set {
        quoteMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "QuoteMsg" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuoteMsg {
      get { return quoteMsg_ != null; }
    }
    /// <summary>Clears the value of the "QuoteMsg" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuoteMsg() {
      quoteMsg_ = null;
    }

    /// <summary>Field number for the "TransContent" field.</summary>
    public const int TransContentFieldNumber = 10;
    private readonly static pb::ByteString TransContentDefaultValue = pb::ByteString.Empty;

    private pb::ByteString transContent_;
    /// <summary>
    ///翻译内容 文字聊天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransContent {
      get { return transContent_ ?? TransContentDefaultValue; }
      set {
        transContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "TransContent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTransContent {
      get { return transContent_ != null; }
    }
    /// <summary>Clears the value of the "TransContent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransContent() {
      transContent_ = null;
    }

    /// <summary>Field number for the "BurnAfterReadTime" field.</summary>
    public const int BurnAfterReadTimeFieldNumber = 11;
    private readonly static int BurnAfterReadTimeDefaultValue = 0;

    private int burnAfterReadTime_;
    /// <summary>
    ///阅后即焚时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BurnAfterReadTime {
      get { if ((_hasBits0 & 32) != 0) { return burnAfterReadTime_; } else { return BurnAfterReadTimeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        burnAfterReadTime_ = value;
      }
    }
    /// <summary>Gets whether the "BurnAfterReadTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBurnAfterReadTime {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "BurnAfterReadTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBurnAfterReadTime() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "CMType" field.</summary>
    public const int CMTypeFieldNumber = 12;
    private readonly static global::YlPb.ChatMsgType CMTypeDefaultValue = global::YlPb.ChatMsgType.UserMsg;

    private global::YlPb.ChatMsgType cMType_;
    /// <summary>
    ///消息类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatMsgType CMType {
      get { if ((_hasBits0 & 64) != 0) { return cMType_; } else { return CMTypeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        cMType_ = value;
      }
    }
    /// <summary>Gets whether the "CMType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCMType {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "CMType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCMType() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatSendReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatSendReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelType != other.ChannelType) return false;
      if (TargetId != other.TargetId) return false;
      if (SendTime != other.SendTime) return false;
      if (CType != other.CType) return false;
      if (ContentBuff != other.ContentBuff) return false;
      if (ContentSzie != other.ContentSzie) return false;
      if (EnclosureUrl != other.EnclosureUrl) return false;
      if(!altUserIds_.Equals(other.altUserIds_)) return false;
      if (QuoteMsg != other.QuoteMsg) return false;
      if (TransContent != other.TransContent) return false;
      if (BurnAfterReadTime != other.BurnAfterReadTime) return false;
      if (CMType != other.CMType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChannelType) hash ^= ChannelType.GetHashCode();
      if (HasTargetId) hash ^= TargetId.GetHashCode();
      if (HasSendTime) hash ^= SendTime.GetHashCode();
      if (HasCType) hash ^= CType.GetHashCode();
      if (HasContentBuff) hash ^= ContentBuff.GetHashCode();
      if (HasContentSzie) hash ^= ContentSzie.GetHashCode();
      if (HasEnclosureUrl) hash ^= EnclosureUrl.GetHashCode();
      hash ^= altUserIds_.GetHashCode();
      if (HasQuoteMsg) hash ^= QuoteMsg.GetHashCode();
      if (HasTransContent) hash ^= TransContent.GetHashCode();
      if (HasBurnAfterReadTime) hash ^= BurnAfterReadTime.GetHashCode();
      if (HasCMType) hash ^= CMType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasChannelType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChannelType);
      }
      if (HasTargetId) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetId);
      }
      if (HasSendTime) {
        output.WriteRawTag(24);
        output.WriteInt64(SendTime);
      }
      if (HasCType) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CType);
      }
      if (HasContentBuff) {
        output.WriteRawTag(42);
        output.WriteBytes(ContentBuff);
      }
      if (HasContentSzie) {
        output.WriteRawTag(48);
        output.WriteInt32(ContentSzie);
      }
      if (HasEnclosureUrl) {
        output.WriteRawTag(58);
        output.WriteString(EnclosureUrl);
      }
      altUserIds_.WriteTo(output, _repeated_altUserIds_codec);
      if (HasQuoteMsg) {
        output.WriteRawTag(74);
        output.WriteBytes(QuoteMsg);
      }
      if (HasTransContent) {
        output.WriteRawTag(82);
        output.WriteBytes(TransContent);
      }
      if (HasBurnAfterReadTime) {
        output.WriteRawTag(88);
        output.WriteInt32(BurnAfterReadTime);
      }
      if (HasCMType) {
        output.WriteRawTag(96);
        output.WriteEnum((int) CMType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasChannelType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChannelType);
      }
      if (HasTargetId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (HasSendTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTime);
      }
      if (HasCType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CType);
      }
      if (HasContentBuff) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContentBuff);
      }
      if (HasContentSzie) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContentSzie);
      }
      if (HasEnclosureUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnclosureUrl);
      }
      size += altUserIds_.CalculateSize(_repeated_altUserIds_codec);
      if (HasQuoteMsg) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(QuoteMsg);
      }
      if (HasTransContent) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransContent);
      }
      if (HasBurnAfterReadTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BurnAfterReadTime);
      }
      if (HasCMType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CMType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatSendReq other) {
      if (other == null) {
        return;
      }
      if (other.HasChannelType) {
        ChannelType = other.ChannelType;
      }
      if (other.HasTargetId) {
        TargetId = other.TargetId;
      }
      if (other.HasSendTime) {
        SendTime = other.SendTime;
      }
      if (other.HasCType) {
        CType = other.CType;
      }
      if (other.HasContentBuff) {
        ContentBuff = other.ContentBuff;
      }
      if (other.HasContentSzie) {
        ContentSzie = other.ContentSzie;
      }
      if (other.HasEnclosureUrl) {
        EnclosureUrl = other.EnclosureUrl;
      }
      altUserIds_.Add(other.altUserIds_);
      if (other.HasQuoteMsg) {
        QuoteMsg = other.QuoteMsg;
      }
      if (other.HasTransContent) {
        TransContent = other.TransContent;
      }
      if (other.HasBurnAfterReadTime) {
        BurnAfterReadTime = other.BurnAfterReadTime;
      }
      if (other.HasCMType) {
        CMType = other.CMType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelType = (global::YlPb.ChatChannelType) input.ReadEnum();
            break;
          }
          case 16: {
            TargetId = input.ReadUInt32();
            break;
          }
          case 24: {
            SendTime = input.ReadInt64();
            break;
          }
          case 32: {
            CType = (global::YlPb.ChatType) input.ReadEnum();
            break;
          }
          case 42: {
            ContentBuff = input.ReadBytes();
            break;
          }
          case 48: {
            ContentSzie = input.ReadInt32();
            break;
          }
          case 58: {
            EnclosureUrl = input.ReadString();
            break;
          }
          case 66:
          case 64: {
            altUserIds_.AddEntriesFrom(input, _repeated_altUserIds_codec);
            break;
          }
          case 74: {
            QuoteMsg = input.ReadBytes();
            break;
          }
          case 82: {
            TransContent = input.ReadBytes();
            break;
          }
          case 88: {
            BurnAfterReadTime = input.ReadInt32();
            break;
          }
          case 96: {
            CMType = (global::YlPb.ChatMsgType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId=2 聊天消息发送请求回应
  /// </summary>
  public sealed partial class ChatSendRes : pb::IMessage<ChatSendRes> {
    private static readonly pb::MessageParser<ChatSendRes> _parser = new pb::MessageParser<ChatSendRes>(() => new ChatSendRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatSendRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatSendRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatSendRes(ChatSendRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      channelType_ = other.channelType_;
      targetId_ = other.targetId_;
      sendTime_ = other.sendTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatSendRes Clone() {
      return new ChatSendRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///0发送成功 1参数异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ChannelType" field.</summary>
    public const int ChannelTypeFieldNumber = 2;
    private readonly static global::YlPb.ChatChannelType ChannelTypeDefaultValue = global::YlPb.ChatChannelType.Session;

    private global::YlPb.ChatChannelType channelType_;
    /// <summary>
    ///发送频道类型                                                                                                                                                                                                                
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatChannelType ChannelType {
      get { if ((_hasBits0 & 2) != 0) { return channelType_; } else { return ChannelTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        channelType_ = value;
      }
    }
    /// <summary>Gets whether the "ChannelType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ChannelType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "TargetId" field.</summary>
    public const int TargetIdFieldNumber = 3;
    private readonly static uint TargetIdDefaultValue = 0;

    private uint targetId_;
    /// <summary>
    ///发送目标Id UserId or GroudId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { if ((_hasBits0 & 4) != 0) { return targetId_; } else { return TargetIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        targetId_ = value;
      }
    }
    /// <summary>Gets whether the "TargetId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "TargetId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "SendTime" field.</summary>
    public const int SendTimeFieldNumber = 4;
    private readonly static long SendTimeDefaultValue = 0L;

    private long sendTime_;
    /// <summary>
    ///聊天消息Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTime {
      get { if ((_hasBits0 & 8) != 0) { return sendTime_; } else { return SendTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        sendTime_ = value;
      }
    }
    /// <summary>Gets whether the "SendTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSendTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "SendTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSendTime() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatSendRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatSendRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (ChannelType != other.ChannelType) return false;
      if (TargetId != other.TargetId) return false;
      if (SendTime != other.SendTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasChannelType) hash ^= ChannelType.GetHashCode();
      if (HasTargetId) hash ^= TargetId.GetHashCode();
      if (HasSendTime) hash ^= SendTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasChannelType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ChannelType);
      }
      if (HasTargetId) {
        output.WriteRawTag(24);
        output.WriteUInt32(TargetId);
      }
      if (HasSendTime) {
        output.WriteRawTag(32);
        output.WriteInt64(SendTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasChannelType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChannelType);
      }
      if (HasTargetId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (HasSendTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatSendRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasChannelType) {
        ChannelType = other.ChannelType;
      }
      if (other.HasTargetId) {
        TargetId = other.TargetId;
      }
      if (other.HasSendTime) {
        SendTime = other.SendTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 16: {
            ChannelType = (global::YlPb.ChatChannelType) input.ReadEnum();
            break;
          }
          case 24: {
            TargetId = input.ReadUInt32();
            break;
          }
          case 32: {
            SendTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId=3 推送用户聊天消息
  /// </summary>
  public sealed partial class PushChat : pb::IMessage<PushChat> {
    private static readonly pb::MessageParser<PushChat> _parser = new pb::MessageParser<PushChat>(() => new PushChat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PushChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushChat(PushChat other) : this() {
      _hasBits0 = other._hasBits0;
      channelType_ = other.channelType_;
      channelObj_ = other.HasChannelObj ? other.channelObj_.Clone() : null;
      cMType_ = other.cMType_;
      sendObj_ = other.HasSendObj ? other.sendObj_.Clone() : null;
      sendTime_ = other.sendTime_;
      cType_ = other.cType_;
      contentBuff_ = other.contentBuff_;
      contentSzie_ = other.contentSzie_;
      translateState_ = other.translateState_;
      tencentTranslate_ = other.tencentTranslate_;
      googleTranslate_ = other.googleTranslate_;
      humanTranslate_ = other.humanTranslate_;
      enclosureUrl_ = other.enclosureUrl_;
      altUserIds_ = other.altUserIds_.Clone();
      quoteMsg_ = other.quoteMsg_;
      msgState_ = other.msgState_;
      burnAfterReadTime_ = other.burnAfterReadTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushChat Clone() {
      return new PushChat(this);
    }

    /// <summary>Field number for the "ChannelType" field.</summary>
    public const int ChannelTypeFieldNumber = 1;
    private readonly static global::YlPb.ChatChannelType ChannelTypeDefaultValue = global::YlPb.ChatChannelType.Session;

    private global::YlPb.ChatChannelType channelType_;
    /// <summary>
    ///发送频道类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatChannelType ChannelType {
      get { if ((_hasBits0 & 1) != 0) { return channelType_; } else { return ChannelTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        channelType_ = value;
      }
    }
    /// <summary>Gets whether the "ChannelType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ChannelType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ChannelObj" field.</summary>
    public const int ChannelObjFieldNumber = 2;
    private global::YlPb.ChatMsgObjInfo channelObj_;
    /// <summary>
    ///发送频道目对象信息 UserId or GroudId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatMsgObjInfo ChannelObj {
      get { return channelObj_; }
      set {
        channelObj_ = value;
      }
    }
    /// <summary>Gets whether the ChannelObj field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelObj {
      get { return channelObj_ != null; }
    }
    /// <summary>Clears the value of the ChannelObj field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelObj() {
      channelObj_ = null;
    }

    /// <summary>Field number for the "CMType" field.</summary>
    public const int CMTypeFieldNumber = 3;
    private readonly static global::YlPb.ChatMsgType CMTypeDefaultValue = global::YlPb.ChatMsgType.UserMsg;

    private global::YlPb.ChatMsgType cMType_;
    /// <summary>
    ///消息类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatMsgType CMType {
      get { if ((_hasBits0 & 2) != 0) { return cMType_; } else { return CMTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cMType_ = value;
      }
    }
    /// <summary>Gets whether the "CMType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCMType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "CMType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCMType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "SendObj" field.</summary>
    public const int SendObjFieldNumber = 4;
    private global::YlPb.BaseUserInfo sendObj_;
    /// <summary>
    ///发送者Id 0 通知消息 1 更新消息   非这两种未用户发送消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.BaseUserInfo SendObj {
      get { return sendObj_; }
      set {
        sendObj_ = value;
      }
    }
    /// <summary>Gets whether the SendObj field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSendObj {
      get { return sendObj_ != null; }
    }
    /// <summary>Clears the value of the SendObj field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSendObj() {
      sendObj_ = null;
    }

    /// <summary>Field number for the "SendTime" field.</summary>
    public const int SendTimeFieldNumber = 5;
    private readonly static long SendTimeDefaultValue = 0L;

    private long sendTime_;
    /// <summary>
    ///发送时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTime {
      get { if ((_hasBits0 & 4) != 0) { return sendTime_; } else { return SendTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        sendTime_ = value;
      }
    }
    /// <summary>Gets whether the "SendTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSendTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "SendTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSendTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "CType" field.</summary>
    public const int CTypeFieldNumber = 6;
    private readonly static global::YlPb.ChatType CTypeDefaultValue = global::YlPb.ChatType.TextChatType;

    private global::YlPb.ChatType cType_;
    /// <summary>
    ///聊天类型 //文字 图片 短语音 短视频
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatType CType {
      get { if ((_hasBits0 & 8) != 0) { return cType_; } else { return CTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cType_ = value;
      }
    }
    /// <summary>Gets whether the "CType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "CType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "ContentBuff" field.</summary>
    public const int ContentBuffFieldNumber = 7;
    private readonly static pb::ByteString ContentBuffDefaultValue = pb::ByteString.Empty;

    private pb::ByteString contentBuff_;
    /// <summary>
    ///内容数据 10k 最大
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ContentBuff {
      get { return contentBuff_ ?? ContentBuffDefaultValue; }
      set {
        contentBuff_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ContentBuff" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContentBuff {
      get { return contentBuff_ != null; }
    }
    /// <summary>Clears the value of the "ContentBuff" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContentBuff() {
      contentBuff_ = null;
    }

    /// <summary>Field number for the "ContentSzie" field.</summary>
    public const int ContentSzieFieldNumber = 8;
    private readonly static int ContentSzieDefaultValue = 0;

    private int contentSzie_;
    /// <summary>
    ///内容大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContentSzie {
      get { if ((_hasBits0 & 16) != 0) { return contentSzie_; } else { return ContentSzieDefaultValue; } }
      set {
        _hasBits0 |= 16;
        contentSzie_ = value;
      }
    }
    /// <summary>Gets whether the "ContentSzie" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContentSzie {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "ContentSzie" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContentSzie() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "TranslateState" field.</summary>
    public const int TranslateStateFieldNumber = 9;
    private readonly static uint TranslateStateDefaultValue = 0;

    private uint translateState_;
    /// <summary>
    ///翻译状态 0不翻译 1机翻 2人工翻译
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TranslateState {
      get { if ((_hasBits0 & 32) != 0) { return translateState_; } else { return TranslateStateDefaultValue; } }
      set {
        _hasBits0 |= 32;
        translateState_ = value;
      }
    }
    /// <summary>Gets whether the "TranslateState" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTranslateState {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "TranslateState" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTranslateState() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "TencentTranslate" field.</summary>
    public const int TencentTranslateFieldNumber = 10;
    private readonly static pb::ByteString TencentTranslateDefaultValue = pb::ByteString.Empty;

    private pb::ByteString tencentTranslate_;
    /// <summary>
    ///Tencent翻译
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TencentTranslate {
      get { return tencentTranslate_ ?? TencentTranslateDefaultValue; }
      set {
        tencentTranslate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "TencentTranslate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTencentTranslate {
      get { return tencentTranslate_ != null; }
    }
    /// <summary>Clears the value of the "TencentTranslate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTencentTranslate() {
      tencentTranslate_ = null;
    }

    /// <summary>Field number for the "GoogleTranslate" field.</summary>
    public const int GoogleTranslateFieldNumber = 11;
    private readonly static pb::ByteString GoogleTranslateDefaultValue = pb::ByteString.Empty;

    private pb::ByteString googleTranslate_;
    /// <summary>
    ///Google翻译
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GoogleTranslate {
      get { return googleTranslate_ ?? GoogleTranslateDefaultValue; }
      set {
        googleTranslate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "GoogleTranslate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoogleTranslate {
      get { return googleTranslate_ != null; }
    }
    /// <summary>Clears the value of the "GoogleTranslate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoogleTranslate() {
      googleTranslate_ = null;
    }

    /// <summary>Field number for the "HumanTranslate" field.</summary>
    public const int HumanTranslateFieldNumber = 12;
    private readonly static pb::ByteString HumanTranslateDefaultValue = pb::ByteString.Empty;

    private pb::ByteString humanTranslate_;
    /// <summary>
    ///人工翻译翻译
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HumanTranslate {
      get { return humanTranslate_ ?? HumanTranslateDefaultValue; }
      set {
        humanTranslate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "HumanTranslate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHumanTranslate {
      get { return humanTranslate_ != null; }
    }
    /// <summary>Clears the value of the "HumanTranslate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHumanTranslate() {
      humanTranslate_ = null;
    }

    /// <summary>Field number for the "EnclosureUrl" field.</summary>
    public const int EnclosureUrlFieldNumber = 13;
    private readonly static string EnclosureUrlDefaultValue = "";

    private string enclosureUrl_;
    /// <summary>
    ///消息附件地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnclosureUrl {
      get { return enclosureUrl_ ?? EnclosureUrlDefaultValue; }
      set {
        enclosureUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "EnclosureUrl" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEnclosureUrl {
      get { return enclosureUrl_ != null; }
    }
    /// <summary>Clears the value of the "EnclosureUrl" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEnclosureUrl() {
      enclosureUrl_ = null;
    }

    /// <summary>Field number for the "AltUserIds" field.</summary>
    public const int AltUserIdsFieldNumber = 14;
    private static readonly pb::FieldCodec<uint> _repeated_altUserIds_codec
        = pb::FieldCodec.ForUInt32(112);
    private readonly pbc::RepeatedField<uint> altUserIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///alt用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AltUserIds {
      get { return altUserIds_; }
    }

    /// <summary>Field number for the "QuoteMsg" field.</summary>
    public const int QuoteMsgFieldNumber = 15;
    private readonly static pb::ByteString QuoteMsgDefaultValue = pb::ByteString.Empty;

    private pb::ByteString quoteMsg_;
    /// <summary>
    ///引用消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString QuoteMsg {
      get { return quoteMsg_ ?? QuoteMsgDefaultValue; }
      set {
        quoteMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "QuoteMsg" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuoteMsg {
      get { return quoteMsg_ != null; }
    }
    /// <summary>Clears the value of the "QuoteMsg" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuoteMsg() {
      quoteMsg_ = null;
    }

    /// <summary>Field number for the "MsgState" field.</summary>
    public const int MsgStateFieldNumber = 16;
    private readonly static int MsgStateDefaultValue = 0;

    private int msgState_;
    /// <summary>
    ///消息聊天状态 0 正常 1撤回 2阅后及焚
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgState {
      get { if ((_hasBits0 & 64) != 0) { return msgState_; } else { return MsgStateDefaultValue; } }
      set {
        _hasBits0 |= 64;
        msgState_ = value;
      }
    }
    /// <summary>Gets whether the "MsgState" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMsgState {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "MsgState" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsgState() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "BurnAfterReadTime" field.</summary>
    public const int BurnAfterReadTimeFieldNumber = 17;
    private readonly static int BurnAfterReadTimeDefaultValue = 0;

    private int burnAfterReadTime_;
    /// <summary>
    ///阅后即焚时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BurnAfterReadTime {
      get { if ((_hasBits0 & 128) != 0) { return burnAfterReadTime_; } else { return BurnAfterReadTimeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        burnAfterReadTime_ = value;
      }
    }
    /// <summary>Gets whether the "BurnAfterReadTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBurnAfterReadTime {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "BurnAfterReadTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBurnAfterReadTime() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PushChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PushChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelType != other.ChannelType) return false;
      if (!object.Equals(ChannelObj, other.ChannelObj)) return false;
      if (CMType != other.CMType) return false;
      if (!object.Equals(SendObj, other.SendObj)) return false;
      if (SendTime != other.SendTime) return false;
      if (CType != other.CType) return false;
      if (ContentBuff != other.ContentBuff) return false;
      if (ContentSzie != other.ContentSzie) return false;
      if (TranslateState != other.TranslateState) return false;
      if (TencentTranslate != other.TencentTranslate) return false;
      if (GoogleTranslate != other.GoogleTranslate) return false;
      if (HumanTranslate != other.HumanTranslate) return false;
      if (EnclosureUrl != other.EnclosureUrl) return false;
      if(!altUserIds_.Equals(other.altUserIds_)) return false;
      if (QuoteMsg != other.QuoteMsg) return false;
      if (MsgState != other.MsgState) return false;
      if (BurnAfterReadTime != other.BurnAfterReadTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChannelType) hash ^= ChannelType.GetHashCode();
      if (HasChannelObj) hash ^= ChannelObj.GetHashCode();
      if (HasCMType) hash ^= CMType.GetHashCode();
      if (HasSendObj) hash ^= SendObj.GetHashCode();
      if (HasSendTime) hash ^= SendTime.GetHashCode();
      if (HasCType) hash ^= CType.GetHashCode();
      if (HasContentBuff) hash ^= ContentBuff.GetHashCode();
      if (HasContentSzie) hash ^= ContentSzie.GetHashCode();
      if (HasTranslateState) hash ^= TranslateState.GetHashCode();
      if (HasTencentTranslate) hash ^= TencentTranslate.GetHashCode();
      if (HasGoogleTranslate) hash ^= GoogleTranslate.GetHashCode();
      if (HasHumanTranslate) hash ^= HumanTranslate.GetHashCode();
      if (HasEnclosureUrl) hash ^= EnclosureUrl.GetHashCode();
      hash ^= altUserIds_.GetHashCode();
      if (HasQuoteMsg) hash ^= QuoteMsg.GetHashCode();
      if (HasMsgState) hash ^= MsgState.GetHashCode();
      if (HasBurnAfterReadTime) hash ^= BurnAfterReadTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasChannelType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChannelType);
      }
      if (HasChannelObj) {
        output.WriteRawTag(18);
        output.WriteMessage(ChannelObj);
      }
      if (HasCMType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CMType);
      }
      if (HasSendObj) {
        output.WriteRawTag(34);
        output.WriteMessage(SendObj);
      }
      if (HasSendTime) {
        output.WriteRawTag(40);
        output.WriteInt64(SendTime);
      }
      if (HasCType) {
        output.WriteRawTag(48);
        output.WriteEnum((int) CType);
      }
      if (HasContentBuff) {
        output.WriteRawTag(58);
        output.WriteBytes(ContentBuff);
      }
      if (HasContentSzie) {
        output.WriteRawTag(64);
        output.WriteInt32(ContentSzie);
      }
      if (HasTranslateState) {
        output.WriteRawTag(72);
        output.WriteUInt32(TranslateState);
      }
      if (HasTencentTranslate) {
        output.WriteRawTag(82);
        output.WriteBytes(TencentTranslate);
      }
      if (HasGoogleTranslate) {
        output.WriteRawTag(90);
        output.WriteBytes(GoogleTranslate);
      }
      if (HasHumanTranslate) {
        output.WriteRawTag(98);
        output.WriteBytes(HumanTranslate);
      }
      if (HasEnclosureUrl) {
        output.WriteRawTag(106);
        output.WriteString(EnclosureUrl);
      }
      altUserIds_.WriteTo(output, _repeated_altUserIds_codec);
      if (HasQuoteMsg) {
        output.WriteRawTag(122);
        output.WriteBytes(QuoteMsg);
      }
      if (HasMsgState) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(MsgState);
      }
      if (HasBurnAfterReadTime) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(BurnAfterReadTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasChannelType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChannelType);
      }
      if (HasChannelObj) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelObj);
      }
      if (HasCMType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CMType);
      }
      if (HasSendObj) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendObj);
      }
      if (HasSendTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTime);
      }
      if (HasCType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CType);
      }
      if (HasContentBuff) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContentBuff);
      }
      if (HasContentSzie) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContentSzie);
      }
      if (HasTranslateState) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TranslateState);
      }
      if (HasTencentTranslate) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TencentTranslate);
      }
      if (HasGoogleTranslate) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GoogleTranslate);
      }
      if (HasHumanTranslate) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(HumanTranslate);
      }
      if (HasEnclosureUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnclosureUrl);
      }
      size += altUserIds_.CalculateSize(_repeated_altUserIds_codec);
      if (HasQuoteMsg) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(QuoteMsg);
      }
      if (HasMsgState) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MsgState);
      }
      if (HasBurnAfterReadTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BurnAfterReadTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PushChat other) {
      if (other == null) {
        return;
      }
      if (other.HasChannelType) {
        ChannelType = other.ChannelType;
      }
      if (other.HasChannelObj) {
        if (!HasChannelObj) {
          ChannelObj = new global::YlPb.ChatMsgObjInfo();
        }
        ChannelObj.MergeFrom(other.ChannelObj);
      }
      if (other.HasCMType) {
        CMType = other.CMType;
      }
      if (other.HasSendObj) {
        if (!HasSendObj) {
          SendObj = new global::YlPb.BaseUserInfo();
        }
        SendObj.MergeFrom(other.SendObj);
      }
      if (other.HasSendTime) {
        SendTime = other.SendTime;
      }
      if (other.HasCType) {
        CType = other.CType;
      }
      if (other.HasContentBuff) {
        ContentBuff = other.ContentBuff;
      }
      if (other.HasContentSzie) {
        ContentSzie = other.ContentSzie;
      }
      if (other.HasTranslateState) {
        TranslateState = other.TranslateState;
      }
      if (other.HasTencentTranslate) {
        TencentTranslate = other.TencentTranslate;
      }
      if (other.HasGoogleTranslate) {
        GoogleTranslate = other.GoogleTranslate;
      }
      if (other.HasHumanTranslate) {
        HumanTranslate = other.HumanTranslate;
      }
      if (other.HasEnclosureUrl) {
        EnclosureUrl = other.EnclosureUrl;
      }
      altUserIds_.Add(other.altUserIds_);
      if (other.HasQuoteMsg) {
        QuoteMsg = other.QuoteMsg;
      }
      if (other.HasMsgState) {
        MsgState = other.MsgState;
      }
      if (other.HasBurnAfterReadTime) {
        BurnAfterReadTime = other.BurnAfterReadTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelType = (global::YlPb.ChatChannelType) input.ReadEnum();
            break;
          }
          case 18: {
            if (!HasChannelObj) {
              ChannelObj = new global::YlPb.ChatMsgObjInfo();
            }
            input.ReadMessage(ChannelObj);
            break;
          }
          case 24: {
            CMType = (global::YlPb.ChatMsgType) input.ReadEnum();
            break;
          }
          case 34: {
            if (!HasSendObj) {
              SendObj = new global::YlPb.BaseUserInfo();
            }
            input.ReadMessage(SendObj);
            break;
          }
          case 40: {
            SendTime = input.ReadInt64();
            break;
          }
          case 48: {
            CType = (global::YlPb.ChatType) input.ReadEnum();
            break;
          }
          case 58: {
            ContentBuff = input.ReadBytes();
            break;
          }
          case 64: {
            ContentSzie = input.ReadInt32();
            break;
          }
          case 72: {
            TranslateState = input.ReadUInt32();
            break;
          }
          case 82: {
            TencentTranslate = input.ReadBytes();
            break;
          }
          case 90: {
            GoogleTranslate = input.ReadBytes();
            break;
          }
          case 98: {
            HumanTranslate = input.ReadBytes();
            break;
          }
          case 106: {
            EnclosureUrl = input.ReadString();
            break;
          }
          case 114:
          case 112: {
            altUserIds_.AddEntriesFrom(input, _repeated_altUserIds_codec);
            break;
          }
          case 122: {
            QuoteMsg = input.ReadBytes();
            break;
          }
          case 128: {
            MsgState = input.ReadInt32();
            break;
          }
          case 136: {
            BurnAfterReadTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=100  应答消息接收 
  /// </summary>
  public sealed partial class AnswerPushChat : pb::IMessage<AnswerPushChat> {
    private static readonly pb::MessageParser<AnswerPushChat> _parser = new pb::MessageParser<AnswerPushChat>(() => new AnswerPushChat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnswerPushChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnswerPushChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnswerPushChat(AnswerPushChat other) : this() {
      _hasBits0 = other._hasBits0;
      msgId_ = other.msgId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnswerPushChat Clone() {
      return new AnswerPushChat(this);
    }

    /// <summary>Field number for the "MsgId" field.</summary>
    public const int MsgIdFieldNumber = 1;
    private readonly static long MsgIdDefaultValue = 0L;

    private long msgId_;
    /// <summary>
    ///消息Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MsgId {
      get { if ((_hasBits0 & 1) != 0) { return msgId_; } else { return MsgIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        msgId_ = value;
      }
    }
    /// <summary>Gets whether the "MsgId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMsgId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "MsgId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsgId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnswerPushChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnswerPushChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgId != other.MsgId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMsgId) hash ^= MsgId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasMsgId) {
        output.WriteRawTag(8);
        output.WriteInt64(MsgId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMsgId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MsgId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnswerPushChat other) {
      if (other == null) {
        return;
      }
      if (other.HasMsgId) {
        MsgId = other.MsgId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MsgId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId=4 用户登陆成功后推送未读消息列表
  /// </summary>
  public sealed partial class PushUserUnreadMsgNotice : pb::IMessage<PushUserUnreadMsgNotice> {
    private static readonly pb::MessageParser<PushUserUnreadMsgNotice> _parser = new pb::MessageParser<PushUserUnreadMsgNotice>(() => new PushUserUnreadMsgNotice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PushUserUnreadMsgNotice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushUserUnreadMsgNotice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushUserUnreadMsgNotice(PushUserUnreadMsgNotice other) : this() {
      notices_ = other.notices_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushUserUnreadMsgNotice Clone() {
      return new PushUserUnreadMsgNotice(this);
    }

    /// <summary>Field number for the "Notices" field.</summary>
    public const int NoticesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::YlPb.UserUnreadMsgNotice> _repeated_notices_codec
        = pb::FieldCodec.ForMessage(18, global::YlPb.UserUnreadMsgNotice.Parser);
    private readonly pbc::RepeatedField<global::YlPb.UserUnreadMsgNotice> notices_ = new pbc::RepeatedField<global::YlPb.UserUnreadMsgNotice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::YlPb.UserUnreadMsgNotice> Notices {
      get { return notices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PushUserUnreadMsgNotice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PushUserUnreadMsgNotice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!notices_.Equals(other.notices_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= notices_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      notices_.WriteTo(output, _repeated_notices_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += notices_.CalculateSize(_repeated_notices_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PushUserUnreadMsgNotice other) {
      if (other == null) {
        return;
      }
      notices_.Add(other.notices_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            notices_.AddEntriesFrom(input, _repeated_notices_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///未读消息描述
  /// </summary>
  public sealed partial class UnreadMsgDes : pb::IMessage<UnreadMsgDes> {
    private static readonly pb::MessageParser<UnreadMsgDes> _parser = new pb::MessageParser<UnreadMsgDes>(() => new UnreadMsgDes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnreadMsgDes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnreadMsgDes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnreadMsgDes(UnreadMsgDes other) : this() {
      _hasBits0 = other._hasBits0;
      sendUserId_ = other.sendUserId_;
      sendTime_ = other.sendTime_;
      cType_ = other.cType_;
      contentBuff_ = other.contentBuff_;
      tencentTranslate_ = other.tencentTranslate_;
      googleTranslate_ = other.googleTranslate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnreadMsgDes Clone() {
      return new UnreadMsgDes(this);
    }

    /// <summary>Field number for the "SendUserId" field.</summary>
    public const int SendUserIdFieldNumber = 1;
    private readonly static uint SendUserIdDefaultValue = 0;

    private uint sendUserId_;
    /// <summary>
    ///发送者Id 0 通知消息 1 更新消息   非这两种未用户发送消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SendUserId {
      get { if ((_hasBits0 & 1) != 0) { return sendUserId_; } else { return SendUserIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sendUserId_ = value;
      }
    }
    /// <summary>Gets whether the "SendUserId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSendUserId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "SendUserId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSendUserId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "SendTime" field.</summary>
    public const int SendTimeFieldNumber = 2;
    private readonly static long SendTimeDefaultValue = 0L;

    private long sendTime_;
    /// <summary>
    ///发送时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTime {
      get { if ((_hasBits0 & 2) != 0) { return sendTime_; } else { return SendTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        sendTime_ = value;
      }
    }
    /// <summary>Gets whether the "SendTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSendTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "SendTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSendTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "CType" field.</summary>
    public const int CTypeFieldNumber = 3;
    private readonly static global::YlPb.ChatType CTypeDefaultValue = global::YlPb.ChatType.TextChatType;

    private global::YlPb.ChatType cType_;
    /// <summary>
    ///聊天类型 //文字 图片 短语音 短视频
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatType CType {
      get { if ((_hasBits0 & 4) != 0) { return cType_; } else { return CTypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cType_ = value;
      }
    }
    /// <summary>Gets whether the "CType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "CType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "ContentBuff" field.</summary>
    public const int ContentBuffFieldNumber = 4;
    private readonly static pb::ByteString ContentBuffDefaultValue = pb::ByteString.Empty;

    private pb::ByteString contentBuff_;
    /// <summary>
    ///内容数据 只有文字才有 其余的填空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ContentBuff {
      get { return contentBuff_ ?? ContentBuffDefaultValue; }
      set {
        contentBuff_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ContentBuff" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContentBuff {
      get { return contentBuff_ != null; }
    }
    /// <summary>Clears the value of the "ContentBuff" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContentBuff() {
      contentBuff_ = null;
    }

    /// <summary>Field number for the "TencentTranslate" field.</summary>
    public const int TencentTranslateFieldNumber = 5;
    private readonly static pb::ByteString TencentTranslateDefaultValue = pb::ByteString.Empty;

    private pb::ByteString tencentTranslate_;
    /// <summary>
    ///腾讯翻译
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TencentTranslate {
      get { return tencentTranslate_ ?? TencentTranslateDefaultValue; }
      set {
        tencentTranslate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "TencentTranslate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTencentTranslate {
      get { return tencentTranslate_ != null; }
    }
    /// <summary>Clears the value of the "TencentTranslate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTencentTranslate() {
      tencentTranslate_ = null;
    }

    /// <summary>Field number for the "GoogleTranslate" field.</summary>
    public const int GoogleTranslateFieldNumber = 6;
    private readonly static pb::ByteString GoogleTranslateDefaultValue = pb::ByteString.Empty;

    private pb::ByteString googleTranslate_;
    /// <summary>
    ///google翻译
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GoogleTranslate {
      get { return googleTranslate_ ?? GoogleTranslateDefaultValue; }
      set {
        googleTranslate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "GoogleTranslate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoogleTranslate {
      get { return googleTranslate_ != null; }
    }
    /// <summary>Clears the value of the "GoogleTranslate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoogleTranslate() {
      googleTranslate_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnreadMsgDes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnreadMsgDes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SendUserId != other.SendUserId) return false;
      if (SendTime != other.SendTime) return false;
      if (CType != other.CType) return false;
      if (ContentBuff != other.ContentBuff) return false;
      if (TencentTranslate != other.TencentTranslate) return false;
      if (GoogleTranslate != other.GoogleTranslate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSendUserId) hash ^= SendUserId.GetHashCode();
      if (HasSendTime) hash ^= SendTime.GetHashCode();
      if (HasCType) hash ^= CType.GetHashCode();
      if (HasContentBuff) hash ^= ContentBuff.GetHashCode();
      if (HasTencentTranslate) hash ^= TencentTranslate.GetHashCode();
      if (HasGoogleTranslate) hash ^= GoogleTranslate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSendUserId) {
        output.WriteRawTag(8);
        output.WriteUInt32(SendUserId);
      }
      if (HasSendTime) {
        output.WriteRawTag(16);
        output.WriteInt64(SendTime);
      }
      if (HasCType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CType);
      }
      if (HasContentBuff) {
        output.WriteRawTag(34);
        output.WriteBytes(ContentBuff);
      }
      if (HasTencentTranslate) {
        output.WriteRawTag(42);
        output.WriteBytes(TencentTranslate);
      }
      if (HasGoogleTranslate) {
        output.WriteRawTag(50);
        output.WriteBytes(GoogleTranslate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSendUserId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SendUserId);
      }
      if (HasSendTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTime);
      }
      if (HasCType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CType);
      }
      if (HasContentBuff) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContentBuff);
      }
      if (HasTencentTranslate) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TencentTranslate);
      }
      if (HasGoogleTranslate) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GoogleTranslate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnreadMsgDes other) {
      if (other == null) {
        return;
      }
      if (other.HasSendUserId) {
        SendUserId = other.SendUserId;
      }
      if (other.HasSendTime) {
        SendTime = other.SendTime;
      }
      if (other.HasCType) {
        CType = other.CType;
      }
      if (other.HasContentBuff) {
        ContentBuff = other.ContentBuff;
      }
      if (other.HasTencentTranslate) {
        TencentTranslate = other.TencentTranslate;
      }
      if (other.HasGoogleTranslate) {
        GoogleTranslate = other.GoogleTranslate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SendUserId = input.ReadUInt32();
            break;
          }
          case 16: {
            SendTime = input.ReadInt64();
            break;
          }
          case 24: {
            CType = (global::YlPb.ChatType) input.ReadEnum();
            break;
          }
          case 34: {
            ContentBuff = input.ReadBytes();
            break;
          }
          case 42: {
            TencentTranslate = input.ReadBytes();
            break;
          }
          case 50: {
            GoogleTranslate = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserUnreadMsgNotice : pb::IMessage<UserUnreadMsgNotice> {
    private static readonly pb::MessageParser<UserUnreadMsgNotice> _parser = new pb::MessageParser<UserUnreadMsgNotice>(() => new UserUnreadMsgNotice());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserUnreadMsgNotice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserUnreadMsgNotice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserUnreadMsgNotice(UserUnreadMsgNotice other) : this() {
      _hasBits0 = other._hasBits0;
      channelType_ = other.channelType_;
      targetId_ = other.targetId_;
      unreadMsgNum_ = other.unreadMsgNum_;
      lastUnreadMsg_ = other.HasLastUnreadMsg ? other.lastUnreadMsg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserUnreadMsgNotice Clone() {
      return new UserUnreadMsgNotice(this);
    }

    /// <summary>Field number for the "ChannelType" field.</summary>
    public const int ChannelTypeFieldNumber = 1;
    private readonly static global::YlPb.ChatChannelType ChannelTypeDefaultValue = global::YlPb.ChatChannelType.Session;

    private global::YlPb.ChatChannelType channelType_;
    /// <summary>
    ///发送频道类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatChannelType ChannelType {
      get { if ((_hasBits0 & 1) != 0) { return channelType_; } else { return ChannelTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        channelType_ = value;
      }
    }
    /// <summary>Gets whether the "ChannelType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ChannelType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "TargetId" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private readonly static uint TargetIdDefaultValue = 0;

    private uint targetId_;
    /// <summary>
    ///发送目标Id  SessionId or GroudId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { if ((_hasBits0 & 2) != 0) { return targetId_; } else { return TargetIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetId_ = value;
      }
    }
    /// <summary>Gets whether the "TargetId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "TargetId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "UnreadMsgNum" field.</summary>
    public const int UnreadMsgNumFieldNumber = 3;
    private readonly static uint UnreadMsgNumDefaultValue = 0;

    private uint unreadMsgNum_;
    /// <summary>
    ///未读消息数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnreadMsgNum {
      get { if ((_hasBits0 & 4) != 0) { return unreadMsgNum_; } else { return UnreadMsgNumDefaultValue; } }
      set {
        _hasBits0 |= 4;
        unreadMsgNum_ = value;
      }
    }
    /// <summary>Gets whether the "UnreadMsgNum" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUnreadMsgNum {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "UnreadMsgNum" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUnreadMsgNum() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "LastUnreadMsg" field.</summary>
    public const int LastUnreadMsgFieldNumber = 4;
    private global::YlPb.UnreadMsgDes lastUnreadMsg_;
    /// <summary>
    ///最后一条未读消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.UnreadMsgDes LastUnreadMsg {
      get { return lastUnreadMsg_; }
      set {
        lastUnreadMsg_ = value;
      }
    }
    /// <summary>Gets whether the LastUnreadMsg field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastUnreadMsg {
      get { return lastUnreadMsg_ != null; }
    }
    /// <summary>Clears the value of the LastUnreadMsg field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastUnreadMsg() {
      lastUnreadMsg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserUnreadMsgNotice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserUnreadMsgNotice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelType != other.ChannelType) return false;
      if (TargetId != other.TargetId) return false;
      if (UnreadMsgNum != other.UnreadMsgNum) return false;
      if (!object.Equals(LastUnreadMsg, other.LastUnreadMsg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChannelType) hash ^= ChannelType.GetHashCode();
      if (HasTargetId) hash ^= TargetId.GetHashCode();
      if (HasUnreadMsgNum) hash ^= UnreadMsgNum.GetHashCode();
      if (HasLastUnreadMsg) hash ^= LastUnreadMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasChannelType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChannelType);
      }
      if (HasTargetId) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetId);
      }
      if (HasUnreadMsgNum) {
        output.WriteRawTag(24);
        output.WriteUInt32(UnreadMsgNum);
      }
      if (HasLastUnreadMsg) {
        output.WriteRawTag(34);
        output.WriteMessage(LastUnreadMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasChannelType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChannelType);
      }
      if (HasTargetId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (HasUnreadMsgNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnreadMsgNum);
      }
      if (HasLastUnreadMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastUnreadMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserUnreadMsgNotice other) {
      if (other == null) {
        return;
      }
      if (other.HasChannelType) {
        ChannelType = other.ChannelType;
      }
      if (other.HasTargetId) {
        TargetId = other.TargetId;
      }
      if (other.HasUnreadMsgNum) {
        UnreadMsgNum = other.UnreadMsgNum;
      }
      if (other.HasLastUnreadMsg) {
        if (!HasLastUnreadMsg) {
          LastUnreadMsg = new global::YlPb.UnreadMsgDes();
        }
        LastUnreadMsg.MergeFrom(other.LastUnreadMsg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelType = (global::YlPb.ChatChannelType) input.ReadEnum();
            break;
          }
          case 16: {
            TargetId = input.ReadUInt32();
            break;
          }
          case 24: {
            UnreadMsgNum = input.ReadUInt32();
            break;
          }
          case 34: {
            if (!HasLastUnreadMsg) {
              LastUnreadMsg = new global::YlPb.UnreadMsgDes();
            }
            input.ReadMessage(LastUnreadMsg);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId=5 请求目标未读消息
  /// </summary>
  public sealed partial class RequestTargetUnreadReq : pb::IMessage<RequestTargetUnreadReq> {
    private static readonly pb::MessageParser<RequestTargetUnreadReq> _parser = new pb::MessageParser<RequestTargetUnreadReq>(() => new RequestTargetUnreadReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestTargetUnreadReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTargetUnreadReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTargetUnreadReq(RequestTargetUnreadReq other) : this() {
      _hasBits0 = other._hasBits0;
      channelType_ = other.channelType_;
      targetId_ = other.targetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTargetUnreadReq Clone() {
      return new RequestTargetUnreadReq(this);
    }

    /// <summary>Field number for the "ChannelType" field.</summary>
    public const int ChannelTypeFieldNumber = 1;
    private readonly static global::YlPb.ChatChannelType ChannelTypeDefaultValue = global::YlPb.ChatChannelType.Session;

    private global::YlPb.ChatChannelType channelType_;
    /// <summary>
    ///发送频道类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatChannelType ChannelType {
      get { if ((_hasBits0 & 1) != 0) { return channelType_; } else { return ChannelTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        channelType_ = value;
      }
    }
    /// <summary>Gets whether the "ChannelType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ChannelType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "TargetId" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private readonly static uint TargetIdDefaultValue = 0;

    private uint targetId_;
    /// <summary>
    ///发送目标Id  SessionId or GroudId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { if ((_hasBits0 & 2) != 0) { return targetId_; } else { return TargetIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetId_ = value;
      }
    }
    /// <summary>Gets whether the "TargetId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "TargetId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestTargetUnreadReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestTargetUnreadReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelType != other.ChannelType) return false;
      if (TargetId != other.TargetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChannelType) hash ^= ChannelType.GetHashCode();
      if (HasTargetId) hash ^= TargetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasChannelType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChannelType);
      }
      if (HasTargetId) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasChannelType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChannelType);
      }
      if (HasTargetId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestTargetUnreadReq other) {
      if (other == null) {
        return;
      }
      if (other.HasChannelType) {
        ChannelType = other.ChannelType;
      }
      if (other.HasTargetId) {
        TargetId = other.TargetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelType = (global::YlPb.ChatChannelType) input.ReadEnum();
            break;
          }
          case 16: {
            TargetId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId=6 请求目标未读消息回应
  /// </summary>
  public sealed partial class RequestTargetUnreadRes : pb::IMessage<RequestTargetUnreadRes> {
    private static readonly pb::MessageParser<RequestTargetUnreadRes> _parser = new pb::MessageParser<RequestTargetUnreadRes>(() => new RequestTargetUnreadRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestTargetUnreadRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTargetUnreadRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTargetUnreadRes(RequestTargetUnreadRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTargetUnreadRes Clone() {
      return new RequestTargetUnreadRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///0发送成功 1参数异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestTargetUnreadRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestTargetUnreadRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestTargetUnreadRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId=10 请求实时通话
  /// </summary>
  public sealed partial class RequestRealtimeCallReq : pb::IMessage<RequestRealtimeCallReq> {
    private static readonly pb::MessageParser<RequestRealtimeCallReq> _parser = new pb::MessageParser<RequestRealtimeCallReq>(() => new RequestRealtimeCallReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestRealtimeCallReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestRealtimeCallReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestRealtimeCallReq(RequestRealtimeCallReq other) : this() {
      _hasBits0 = other._hasBits0;
      tUserId_ = other.tUserId_;
      cType_ = other.cType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestRealtimeCallReq Clone() {
      return new RequestRealtimeCallReq(this);
    }

    /// <summary>Field number for the "TUserId" field.</summary>
    public const int TUserIdFieldNumber = 1;
    private readonly static uint TUserIdDefaultValue = 0;

    private uint tUserId_;
    /// <summary>
    ///目标用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TUserId {
      get { if ((_hasBits0 & 1) != 0) { return tUserId_; } else { return TUserIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tUserId_ = value;
      }
    }
    /// <summary>Gets whether the "TUserId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTUserId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "TUserId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTUserId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "CType" field.</summary>
    public const int CTypeFieldNumber = 2;
    private readonly static global::YlPb.ChatType CTypeDefaultValue = global::YlPb.ChatType.TextChatType;

    private global::YlPb.ChatType cType_;
    /// <summary>
    ///通话类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatType CType {
      get { if ((_hasBits0 & 2) != 0) { return cType_; } else { return CTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cType_ = value;
      }
    }
    /// <summary>Gets whether the "CType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "CType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCType() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestRealtimeCallReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestRealtimeCallReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TUserId != other.TUserId) return false;
      if (CType != other.CType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTUserId) hash ^= TUserId.GetHashCode();
      if (HasCType) hash ^= CType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTUserId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TUserId);
      }
      if (HasCType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTUserId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TUserId);
      }
      if (HasCType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestRealtimeCallReq other) {
      if (other == null) {
        return;
      }
      if (other.HasTUserId) {
        TUserId = other.TUserId;
      }
      if (other.HasCType) {
        CType = other.CType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TUserId = input.ReadUInt32();
            break;
          }
          case 16: {
            CType = (global::YlPb.ChatType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId=11 请求实时通话回应
  /// </summary>
  public sealed partial class RequestRealtimeCallRes : pb::IMessage<RequestRealtimeCallRes> {
    private static readonly pb::MessageParser<RequestRealtimeCallRes> _parser = new pb::MessageParser<RequestRealtimeCallRes>(() => new RequestRealtimeCallRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestRealtimeCallRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestRealtimeCallRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestRealtimeCallRes(RequestRealtimeCallRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestRealtimeCallRes Clone() {
      return new RequestRealtimeCallRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    /// 0发送成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestRealtimeCallRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestRealtimeCallRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestRealtimeCallRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId=12 推送实时通话请求
  /// </summary>
  public sealed partial class PushRealtimeCall : pb::IMessage<PushRealtimeCall> {
    private static readonly pb::MessageParser<PushRealtimeCall> _parser = new pb::MessageParser<PushRealtimeCall>(() => new PushRealtimeCall());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PushRealtimeCall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushRealtimeCall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushRealtimeCall(PushRealtimeCall other) : this() {
      _hasBits0 = other._hasBits0;
      sUserId_ = other.sUserId_;
      cType_ = other.cType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushRealtimeCall Clone() {
      return new PushRealtimeCall(this);
    }

    /// <summary>Field number for the "SUserId" field.</summary>
    public const int SUserIdFieldNumber = 1;
    private readonly static uint SUserIdDefaultValue = 0;

    private uint sUserId_;
    /// <summary>
    ///发起通话请求用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SUserId {
      get { if ((_hasBits0 & 1) != 0) { return sUserId_; } else { return SUserIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sUserId_ = value;
      }
    }
    /// <summary>Gets whether the "SUserId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSUserId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "SUserId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSUserId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "CType" field.</summary>
    public const int CTypeFieldNumber = 2;
    private readonly static global::YlPb.ChatType CTypeDefaultValue = global::YlPb.ChatType.TextChatType;

    private global::YlPb.ChatType cType_;
    /// <summary>
    ///通话类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatType CType {
      get { if ((_hasBits0 & 2) != 0) { return cType_; } else { return CTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cType_ = value;
      }
    }
    /// <summary>Gets whether the "CType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "CType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCType() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PushRealtimeCall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PushRealtimeCall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SUserId != other.SUserId) return false;
      if (CType != other.CType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSUserId) hash ^= SUserId.GetHashCode();
      if (HasCType) hash ^= CType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSUserId) {
        output.WriteRawTag(8);
        output.WriteUInt32(SUserId);
      }
      if (HasCType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSUserId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SUserId);
      }
      if (HasCType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PushRealtimeCall other) {
      if (other == null) {
        return;
      }
      if (other.HasSUserId) {
        SUserId = other.SUserId;
      }
      if (other.HasCType) {
        CType = other.CType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SUserId = input.ReadUInt32();
            break;
          }
          case 16: {
            CType = (global::YlPb.ChatType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId=13 请求挂断实时通话请求
  /// </summary>
  public sealed partial class RespondRealtimeCallReq : pb::IMessage<RespondRealtimeCallReq> {
    private static readonly pb::MessageParser<RespondRealtimeCallReq> _parser = new pb::MessageParser<RespondRealtimeCallReq>(() => new RespondRealtimeCallReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RespondRealtimeCallReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespondRealtimeCallReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespondRealtimeCallReq(RespondRealtimeCallReq other) : this() {
      _hasBits0 = other._hasBits0;
      sUserId_ = other.sUserId_;
      isAnswer_ = other.isAnswer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespondRealtimeCallReq Clone() {
      return new RespondRealtimeCallReq(this);
    }

    /// <summary>Field number for the "SUserId" field.</summary>
    public const int SUserIdFieldNumber = 1;
    private readonly static uint SUserIdDefaultValue = 0;

    private uint sUserId_;
    /// <summary>
    ///发起通话请求用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SUserId {
      get { if ((_hasBits0 & 1) != 0) { return sUserId_; } else { return SUserIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sUserId_ = value;
      }
    }
    /// <summary>Gets whether the "SUserId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSUserId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "SUserId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSUserId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "IsAnswer" field.</summary>
    public const int IsAnswerFieldNumber = 2;
    private readonly static bool IsAnswerDefaultValue = false;

    private bool isAnswer_;
    /// <summary>
    ///是否应答 true 应答 false 挂断
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAnswer {
      get { if ((_hasBits0 & 2) != 0) { return isAnswer_; } else { return IsAnswerDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isAnswer_ = value;
      }
    }
    /// <summary>Gets whether the "IsAnswer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsAnswer {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "IsAnswer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsAnswer() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RespondRealtimeCallReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RespondRealtimeCallReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SUserId != other.SUserId) return false;
      if (IsAnswer != other.IsAnswer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSUserId) hash ^= SUserId.GetHashCode();
      if (HasIsAnswer) hash ^= IsAnswer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSUserId) {
        output.WriteRawTag(8);
        output.WriteUInt32(SUserId);
      }
      if (HasIsAnswer) {
        output.WriteRawTag(16);
        output.WriteBool(IsAnswer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSUserId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SUserId);
      }
      if (HasIsAnswer) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RespondRealtimeCallReq other) {
      if (other == null) {
        return;
      }
      if (other.HasSUserId) {
        SUserId = other.SUserId;
      }
      if (other.HasIsAnswer) {
        IsAnswer = other.IsAnswer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SUserId = input.ReadUInt32();
            break;
          }
          case 16: {
            IsAnswer = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId=14 推送挂断实时通话请求
  /// </summary>
  public sealed partial class PushRealtimeCallRespond : pb::IMessage<PushRealtimeCallRespond> {
    private static readonly pb::MessageParser<PushRealtimeCallRespond> _parser = new pb::MessageParser<PushRealtimeCallRespond>(() => new PushRealtimeCallRespond());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PushRealtimeCallRespond> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushRealtimeCallRespond() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushRealtimeCallRespond(PushRealtimeCallRespond other) : this() {
      _hasBits0 = other._hasBits0;
      tUserId_ = other.tUserId_;
      isAnswer_ = other.isAnswer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushRealtimeCallRespond Clone() {
      return new PushRealtimeCallRespond(this);
    }

    /// <summary>Field number for the "TUserId" field.</summary>
    public const int TUserIdFieldNumber = 1;
    private readonly static uint TUserIdDefaultValue = 0;

    private uint tUserId_;
    /// <summary>
    ///目标用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TUserId {
      get { if ((_hasBits0 & 1) != 0) { return tUserId_; } else { return TUserIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tUserId_ = value;
      }
    }
    /// <summary>Gets whether the "TUserId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTUserId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "TUserId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTUserId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "IsAnswer" field.</summary>
    public const int IsAnswerFieldNumber = 2;
    private readonly static bool IsAnswerDefaultValue = false;

    private bool isAnswer_;
    /// <summary>
    ///是否应答 true 应答 false 挂断
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAnswer {
      get { if ((_hasBits0 & 2) != 0) { return isAnswer_; } else { return IsAnswerDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isAnswer_ = value;
      }
    }
    /// <summary>Gets whether the "IsAnswer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsAnswer {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "IsAnswer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsAnswer() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PushRealtimeCallRespond);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PushRealtimeCallRespond other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TUserId != other.TUserId) return false;
      if (IsAnswer != other.IsAnswer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTUserId) hash ^= TUserId.GetHashCode();
      if (HasIsAnswer) hash ^= IsAnswer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTUserId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TUserId);
      }
      if (HasIsAnswer) {
        output.WriteRawTag(16);
        output.WriteBool(IsAnswer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTUserId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TUserId);
      }
      if (HasIsAnswer) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PushRealtimeCallRespond other) {
      if (other == null) {
        return;
      }
      if (other.HasTUserId) {
        TUserId = other.TUserId;
      }
      if (other.HasIsAnswer) {
        IsAnswer = other.IsAnswer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TUserId = input.ReadUInt32();
            break;
          }
          case 16: {
            IsAnswer = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId=17 请求送礼物
  /// </summary>
  public sealed partial class RequestGiftGivingReq : pb::IMessage<RequestGiftGivingReq> {
    private static readonly pb::MessageParser<RequestGiftGivingReq> _parser = new pb::MessageParser<RequestGiftGivingReq>(() => new RequestGiftGivingReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestGiftGivingReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestGiftGivingReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestGiftGivingReq(RequestGiftGivingReq other) : this() {
      _hasBits0 = other._hasBits0;
      targetUserId_ = other.targetUserId_;
      giftId_ = other.giftId_;
      giftAmount_ = other.giftAmount_;
      money_ = other.money_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestGiftGivingReq Clone() {
      return new RequestGiftGivingReq(this);
    }

    /// <summary>Field number for the "TargetUserId" field.</summary>
    public const int TargetUserIdFieldNumber = 1;
    private readonly static uint TargetUserIdDefaultValue = 0;

    private uint targetUserId_;
    /// <summary>
    ///目标用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetUserId {
      get { if ((_hasBits0 & 1) != 0) { return targetUserId_; } else { return TargetUserIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        targetUserId_ = value;
      }
    }
    /// <summary>Gets whether the "TargetUserId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetUserId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "TargetUserId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetUserId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "GiftId" field.</summary>
    public const int GiftIdFieldNumber = 2;
    private readonly static uint GiftIdDefaultValue = 0;

    private uint giftId_;
    /// <summary>
    ///礼物Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GiftId {
      get { if ((_hasBits0 & 2) != 0) { return giftId_; } else { return GiftIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        giftId_ = value;
      }
    }
    /// <summary>Gets whether the "GiftId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGiftId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "GiftId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGiftId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "GiftAmount" field.</summary>
    public const int GiftAmountFieldNumber = 3;
    private readonly static uint GiftAmountDefaultValue = 0;

    private uint giftAmount_;
    /// <summary>
    ///礼物数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GiftAmount {
      get { if ((_hasBits0 & 4) != 0) { return giftAmount_; } else { return GiftAmountDefaultValue; } }
      set {
        _hasBits0 |= 4;
        giftAmount_ = value;
      }
    }
    /// <summary>Gets whether the "GiftAmount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGiftAmount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "GiftAmount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGiftAmount() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "Money" field.</summary>
    public const int MoneyFieldNumber = 4;
    private readonly static uint MoneyDefaultValue = 0;

    private uint money_;
    /// <summary>
    ///钱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Money {
      get { if ((_hasBits0 & 8) != 0) { return money_; } else { return MoneyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        money_ = value;
      }
    }
    /// <summary>Gets whether the "Money" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMoney {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "Money" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMoney() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestGiftGivingReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestGiftGivingReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetUserId != other.TargetUserId) return false;
      if (GiftId != other.GiftId) return false;
      if (GiftAmount != other.GiftAmount) return false;
      if (Money != other.Money) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTargetUserId) hash ^= TargetUserId.GetHashCode();
      if (HasGiftId) hash ^= GiftId.GetHashCode();
      if (HasGiftAmount) hash ^= GiftAmount.GetHashCode();
      if (HasMoney) hash ^= Money.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTargetUserId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetUserId);
      }
      if (HasGiftId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GiftId);
      }
      if (HasGiftAmount) {
        output.WriteRawTag(24);
        output.WriteUInt32(GiftAmount);
      }
      if (HasMoney) {
        output.WriteRawTag(32);
        output.WriteUInt32(Money);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTargetUserId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetUserId);
      }
      if (HasGiftId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GiftId);
      }
      if (HasGiftAmount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GiftAmount);
      }
      if (HasMoney) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Money);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestGiftGivingReq other) {
      if (other == null) {
        return;
      }
      if (other.HasTargetUserId) {
        TargetUserId = other.TargetUserId;
      }
      if (other.HasGiftId) {
        GiftId = other.GiftId;
      }
      if (other.HasGiftAmount) {
        GiftAmount = other.GiftAmount;
      }
      if (other.HasMoney) {
        Money = other.Money;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetUserId = input.ReadUInt32();
            break;
          }
          case 16: {
            GiftId = input.ReadUInt32();
            break;
          }
          case 24: {
            GiftAmount = input.ReadUInt32();
            break;
          }
          case 32: {
            Money = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId=18 推送送礼
  /// </summary>
  public sealed partial class PushGiftGiving : pb::IMessage<PushGiftGiving> {
    private static readonly pb::MessageParser<PushGiftGiving> _parser = new pb::MessageParser<PushGiftGiving>(() => new PushGiftGiving());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PushGiftGiving> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushGiftGiving() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushGiftGiving(PushGiftGiving other) : this() {
      _hasBits0 = other._hasBits0;
      sendUserId_ = other.sendUserId_;
      giftId_ = other.giftId_;
      giftAmount_ = other.giftAmount_;
      money_ = other.money_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushGiftGiving Clone() {
      return new PushGiftGiving(this);
    }

    /// <summary>Field number for the "SendUserId" field.</summary>
    public const int SendUserIdFieldNumber = 1;
    private readonly static uint SendUserIdDefaultValue = 0;

    private uint sendUserId_;
    /// <summary>
    ///目标用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SendUserId {
      get { if ((_hasBits0 & 1) != 0) { return sendUserId_; } else { return SendUserIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sendUserId_ = value;
      }
    }
    /// <summary>Gets whether the "SendUserId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSendUserId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "SendUserId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSendUserId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "GiftId" field.</summary>
    public const int GiftIdFieldNumber = 2;
    private readonly static uint GiftIdDefaultValue = 0;

    private uint giftId_;
    /// <summary>
    ///礼物Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GiftId {
      get { if ((_hasBits0 & 2) != 0) { return giftId_; } else { return GiftIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        giftId_ = value;
      }
    }
    /// <summary>Gets whether the "GiftId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGiftId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "GiftId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGiftId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "GiftAmount" field.</summary>
    public const int GiftAmountFieldNumber = 3;
    private readonly static uint GiftAmountDefaultValue = 0;

    private uint giftAmount_;
    /// <summary>
    ///礼物数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GiftAmount {
      get { if ((_hasBits0 & 4) != 0) { return giftAmount_; } else { return GiftAmountDefaultValue; } }
      set {
        _hasBits0 |= 4;
        giftAmount_ = value;
      }
    }
    /// <summary>Gets whether the "GiftAmount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGiftAmount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "GiftAmount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGiftAmount() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "Money" field.</summary>
    public const int MoneyFieldNumber = 4;
    private readonly static uint MoneyDefaultValue = 0;

    private uint money_;
    /// <summary>
    ///钱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Money {
      get { if ((_hasBits0 & 8) != 0) { return money_; } else { return MoneyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        money_ = value;
      }
    }
    /// <summary>Gets whether the "Money" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMoney {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "Money" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMoney() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PushGiftGiving);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PushGiftGiving other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SendUserId != other.SendUserId) return false;
      if (GiftId != other.GiftId) return false;
      if (GiftAmount != other.GiftAmount) return false;
      if (Money != other.Money) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSendUserId) hash ^= SendUserId.GetHashCode();
      if (HasGiftId) hash ^= GiftId.GetHashCode();
      if (HasGiftAmount) hash ^= GiftAmount.GetHashCode();
      if (HasMoney) hash ^= Money.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSendUserId) {
        output.WriteRawTag(8);
        output.WriteUInt32(SendUserId);
      }
      if (HasGiftId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GiftId);
      }
      if (HasGiftAmount) {
        output.WriteRawTag(24);
        output.WriteUInt32(GiftAmount);
      }
      if (HasMoney) {
        output.WriteRawTag(32);
        output.WriteUInt32(Money);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSendUserId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SendUserId);
      }
      if (HasGiftId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GiftId);
      }
      if (HasGiftAmount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GiftAmount);
      }
      if (HasMoney) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Money);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PushGiftGiving other) {
      if (other == null) {
        return;
      }
      if (other.HasSendUserId) {
        SendUserId = other.SendUserId;
      }
      if (other.HasGiftId) {
        GiftId = other.GiftId;
      }
      if (other.HasGiftAmount) {
        GiftAmount = other.GiftAmount;
      }
      if (other.HasMoney) {
        Money = other.Money;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SendUserId = input.ReadUInt32();
            break;
          }
          case 16: {
            GiftId = input.ReadUInt32();
            break;
          }
          case 24: {
            GiftAmount = input.ReadUInt32();
            break;
          }
          case 32: {
            Money = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=80 查询用户基本信息
  /// </summary>
  public sealed partial class QueryUsersInfoReq : pb::IMessage<QueryUsersInfoReq> {
    private static readonly pb::MessageParser<QueryUsersInfoReq> _parser = new pb::MessageParser<QueryUsersInfoReq>(() => new QueryUsersInfoReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryUsersInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUsersInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUsersInfoReq(QueryUsersInfoReq other) : this() {
      userIds_ = other.userIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUsersInfoReq Clone() {
      return new QueryUsersInfoReq(this);
    }

    /// <summary>Field number for the "UserIds" field.</summary>
    public const int UserIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_userIds_codec
        = pb::FieldCodec.ForUInt32(8);
    private readonly pbc::RepeatedField<uint> userIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UserIds {
      get { return userIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryUsersInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryUsersInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userIds_.Equals(other.userIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      userIds_.WriteTo(output, _repeated_userIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryUsersInfoReq other) {
      if (other == null) {
        return;
      }
      userIds_.Add(other.userIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=81 查询用户基本信息回应
  /// </summary>
  public sealed partial class QueryUsersInfoRes : pb::IMessage<QueryUsersInfoRes> {
    private static readonly pb::MessageParser<QueryUsersInfoRes> _parser = new pb::MessageParser<QueryUsersInfoRes>(() => new QueryUsersInfoRes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryUsersInfoRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUsersInfoRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUsersInfoRes(QueryUsersInfoRes other) : this() {
      infos_ = other.infos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUsersInfoRes Clone() {
      return new QueryUsersInfoRes(this);
    }

    /// <summary>Field number for the "Infos" field.</summary>
    public const int InfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::YlPb.BaseUserInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::YlPb.BaseUserInfo.Parser);
    private readonly pbc::RepeatedField<global::YlPb.BaseUserInfo> infos_ = new pbc::RepeatedField<global::YlPb.BaseUserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::YlPb.BaseUserInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryUsersInfoRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryUsersInfoRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!infos_.Equals(other.infos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= infos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryUsersInfoRes other) {
      if (other == null) {
        return;
      }
      infos_.Add(other.infos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=82 消息测回
  /// </summary>
  public sealed partial class ChatMessageRecallReq : pb::IMessage<ChatMessageRecallReq> {
    private static readonly pb::MessageParser<ChatMessageRecallReq> _parser = new pb::MessageParser<ChatMessageRecallReq>(() => new ChatMessageRecallReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatMessageRecallReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessageRecallReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessageRecallReq(ChatMessageRecallReq other) : this() {
      _hasBits0 = other._hasBits0;
      channelType_ = other.channelType_;
      targetId_ = other.targetId_;
      sendTime_ = other.sendTime_;
      cType_ = other.cType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessageRecallReq Clone() {
      return new ChatMessageRecallReq(this);
    }

    /// <summary>Field number for the "ChannelType" field.</summary>
    public const int ChannelTypeFieldNumber = 1;
    private readonly static global::YlPb.ChatChannelType ChannelTypeDefaultValue = global::YlPb.ChatChannelType.Session;

    private global::YlPb.ChatChannelType channelType_;
    /// <summary>
    ///发送频道类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatChannelType ChannelType {
      get { if ((_hasBits0 & 1) != 0) { return channelType_; } else { return ChannelTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        channelType_ = value;
      }
    }
    /// <summary>Gets whether the "ChannelType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ChannelType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "TargetId" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private readonly static uint TargetIdDefaultValue = 0;

    private uint targetId_;
    /// <summary>
    ///发送目标Id SessionId or GroudId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { if ((_hasBits0 & 2) != 0) { return targetId_; } else { return TargetIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetId_ = value;
      }
    }
    /// <summary>Gets whether the "TargetId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "TargetId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "SendTime" field.</summary>
    public const int SendTimeFieldNumber = 3;
    private readonly static long SendTimeDefaultValue = 0L;

    private long sendTime_;
    /// <summary>
    ///发送时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTime {
      get { if ((_hasBits0 & 4) != 0) { return sendTime_; } else { return SendTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        sendTime_ = value;
      }
    }
    /// <summary>Gets whether the "SendTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSendTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "SendTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSendTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "CType" field.</summary>
    public const int CTypeFieldNumber = 4;
    private readonly static global::YlPb.ChatType CTypeDefaultValue = global::YlPb.ChatType.TextChatType;

    private global::YlPb.ChatType cType_;
    /// <summary>
    ///聊天类型 //文字 图片 短语音 短视频
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatType CType {
      get { if ((_hasBits0 & 8) != 0) { return cType_; } else { return CTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cType_ = value;
      }
    }
    /// <summary>Gets whether the "CType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "CType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCType() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatMessageRecallReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatMessageRecallReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelType != other.ChannelType) return false;
      if (TargetId != other.TargetId) return false;
      if (SendTime != other.SendTime) return false;
      if (CType != other.CType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChannelType) hash ^= ChannelType.GetHashCode();
      if (HasTargetId) hash ^= TargetId.GetHashCode();
      if (HasSendTime) hash ^= SendTime.GetHashCode();
      if (HasCType) hash ^= CType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasChannelType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChannelType);
      }
      if (HasTargetId) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetId);
      }
      if (HasSendTime) {
        output.WriteRawTag(24);
        output.WriteInt64(SendTime);
      }
      if (HasCType) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasChannelType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChannelType);
      }
      if (HasTargetId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (HasSendTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTime);
      }
      if (HasCType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatMessageRecallReq other) {
      if (other == null) {
        return;
      }
      if (other.HasChannelType) {
        ChannelType = other.ChannelType;
      }
      if (other.HasTargetId) {
        TargetId = other.TargetId;
      }
      if (other.HasSendTime) {
        SendTime = other.SendTime;
      }
      if (other.HasCType) {
        CType = other.CType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelType = (global::YlPb.ChatChannelType) input.ReadEnum();
            break;
          }
          case 16: {
            TargetId = input.ReadUInt32();
            break;
          }
          case 24: {
            SendTime = input.ReadInt64();
            break;
          }
          case 32: {
            CType = (global::YlPb.ChatType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=83 消息测回
  /// </summary>
  public sealed partial class ChatMessageRecallRes : pb::IMessage<ChatMessageRecallRes> {
    private static readonly pb::MessageParser<ChatMessageRecallRes> _parser = new pb::MessageParser<ChatMessageRecallRes>(() => new ChatMessageRecallRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatMessageRecallRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessageRecallRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessageRecallRes(ChatMessageRecallRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessageRecallRes Clone() {
      return new ChatMessageRecallRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    /// 0发送成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatMessageRecallRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatMessageRecallRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatMessageRecallRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=84 消息阅后即焚
  /// </summary>
  public sealed partial class BurnAfterReadReq : pb::IMessage<BurnAfterReadReq> {
    private static readonly pb::MessageParser<BurnAfterReadReq> _parser = new pb::MessageParser<BurnAfterReadReq>(() => new BurnAfterReadReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BurnAfterReadReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BurnAfterReadReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BurnAfterReadReq(BurnAfterReadReq other) : this() {
      _hasBits0 = other._hasBits0;
      channelType_ = other.channelType_;
      targetId_ = other.targetId_;
      sendTime_ = other.sendTime_;
      cType_ = other.cType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BurnAfterReadReq Clone() {
      return new BurnAfterReadReq(this);
    }

    /// <summary>Field number for the "ChannelType" field.</summary>
    public const int ChannelTypeFieldNumber = 1;
    private readonly static global::YlPb.ChatChannelType ChannelTypeDefaultValue = global::YlPb.ChatChannelType.Session;

    private global::YlPb.ChatChannelType channelType_;
    /// <summary>
    ///发送频道类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatChannelType ChannelType {
      get { if ((_hasBits0 & 1) != 0) { return channelType_; } else { return ChannelTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        channelType_ = value;
      }
    }
    /// <summary>Gets whether the "ChannelType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ChannelType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "TargetId" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private readonly static uint TargetIdDefaultValue = 0;

    private uint targetId_;
    /// <summary>
    ///发送目标Id SessionId or GroudId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { if ((_hasBits0 & 2) != 0) { return targetId_; } else { return TargetIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetId_ = value;
      }
    }
    /// <summary>Gets whether the "TargetId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "TargetId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "SendTime" field.</summary>
    public const int SendTimeFieldNumber = 3;
    private readonly static long SendTimeDefaultValue = 0L;

    private long sendTime_;
    /// <summary>
    ///发送时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTime {
      get { if ((_hasBits0 & 4) != 0) { return sendTime_; } else { return SendTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        sendTime_ = value;
      }
    }
    /// <summary>Gets whether the "SendTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSendTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "SendTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSendTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "CType" field.</summary>
    public const int CTypeFieldNumber = 4;
    private readonly static global::YlPb.ChatType CTypeDefaultValue = global::YlPb.ChatType.TextChatType;

    private global::YlPb.ChatType cType_;
    /// <summary>
    ///聊天类型 //文字 图片 短语音 短视频
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.ChatType CType {
      get { if ((_hasBits0 & 8) != 0) { return cType_; } else { return CTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cType_ = value;
      }
    }
    /// <summary>Gets whether the "CType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "CType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCType() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BurnAfterReadReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BurnAfterReadReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelType != other.ChannelType) return false;
      if (TargetId != other.TargetId) return false;
      if (SendTime != other.SendTime) return false;
      if (CType != other.CType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChannelType) hash ^= ChannelType.GetHashCode();
      if (HasTargetId) hash ^= TargetId.GetHashCode();
      if (HasSendTime) hash ^= SendTime.GetHashCode();
      if (HasCType) hash ^= CType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasChannelType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChannelType);
      }
      if (HasTargetId) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetId);
      }
      if (HasSendTime) {
        output.WriteRawTag(24);
        output.WriteInt64(SendTime);
      }
      if (HasCType) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasChannelType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChannelType);
      }
      if (HasTargetId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (HasSendTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTime);
      }
      if (HasCType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BurnAfterReadReq other) {
      if (other == null) {
        return;
      }
      if (other.HasChannelType) {
        ChannelType = other.ChannelType;
      }
      if (other.HasTargetId) {
        TargetId = other.TargetId;
      }
      if (other.HasSendTime) {
        SendTime = other.SendTime;
      }
      if (other.HasCType) {
        CType = other.CType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelType = (global::YlPb.ChatChannelType) input.ReadEnum();
            break;
          }
          case 16: {
            TargetId = input.ReadUInt32();
            break;
          }
          case 24: {
            SendTime = input.ReadInt64();
            break;
          }
          case 32: {
            CType = (global::YlPb.ChatType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=85 消息阅后即焚测回
  /// </summary>
  public sealed partial class BurnAfterReadRes : pb::IMessage<BurnAfterReadRes> {
    private static readonly pb::MessageParser<BurnAfterReadRes> _parser = new pb::MessageParser<BurnAfterReadRes>(() => new BurnAfterReadRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BurnAfterReadRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BurnAfterReadRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BurnAfterReadRes(BurnAfterReadRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BurnAfterReadRes Clone() {
      return new BurnAfterReadRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    /// 0发送成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BurnAfterReadRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BurnAfterReadRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BurnAfterReadRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GroupTagInfo : pb::IMessage<GroupTagInfo> {
    private static readonly pb::MessageParser<GroupTagInfo> _parser = new pb::MessageParser<GroupTagInfo>(() => new GroupTagInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupTagInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupTagInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupTagInfo(GroupTagInfo other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      text_ = other.text_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupTagInfo Clone() {
      return new GroupTagInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    /// <summary>
    ///标签Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "Id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Text" field.</summary>
    public const int TextFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_text_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> text_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///文字描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Text {
      get { return text_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupTagInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupTagInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!text_.Equals(other.text_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      hash ^= text_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      text_.WriteTo(output, _repeated_text_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      size += text_.CalculateSize(_repeated_text_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupTagInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      text_.Add(other.text_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            text_.AddEntriesFrom(input, _repeated_text_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///群成员结构
  /// </summary>
  public sealed partial class GroupMember : pb::IMessage<GroupMember> {
    private static readonly pb::MessageParser<GroupMember> _parser = new pb::MessageParser<GroupMember>(() => new GroupMember());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMember(GroupMember other) : this() {
      _hasBits0 = other._hasBits0;
      info_ = other.HasInfo ? other.info_.Clone() : null;
      name_ = other.name_;
      identity_ = other.identity_;
      messageFree_ = other.messageFree_;
      effectiveUser_ = other.effectiveUser_;
      isShowMenberNiceName_ = other.isShowMenberNiceName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMember Clone() {
      return new GroupMember(this);
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::YlPb.BaseUserInfo info_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.BaseUserInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }
    /// <summary>Gets whether the Info field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInfo {
      get { return info_ != null; }
    }
    /// <summary>Clears the value of the Info field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInfo() {
      info_ = null;
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "Name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "Identity" field.</summary>
    public const int IdentityFieldNumber = 3;
    private readonly static global::YlPb.GroupMemberIdentity IdentityDefaultValue = global::YlPb.GroupMemberIdentity.IdentityNormal;

    private global::YlPb.GroupMemberIdentity identity_;
    /// <summary>
    ///成员身份
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.GroupMemberIdentity Identity {
      get { if ((_hasBits0 & 1) != 0) { return identity_; } else { return IdentityDefaultValue; } }
      set {
        _hasBits0 |= 1;
        identity_ = value;
      }
    }
    /// <summary>Gets whether the "Identity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIdentity {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Identity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdentity() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "MessageFree" field.</summary>
    public const int MessageFreeFieldNumber = 4;
    private readonly static bool MessageFreeDefaultValue = false;

    private bool messageFree_;
    /// <summary>
    ///消息打扰标记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MessageFree {
      get { if ((_hasBits0 & 2) != 0) { return messageFree_; } else { return MessageFreeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        messageFree_ = value;
      }
    }
    /// <summary>Gets whether the "MessageFree" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessageFree {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "MessageFree" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageFree() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "EffectiveUser" field.</summary>
    public const int EffectiveUserFieldNumber = 5;
    private readonly static bool EffectiveUserDefaultValue = false;

    private bool effectiveUser_;
    /// <summary>
    ///有效用户  移除群成员不直接删除数据而是修改有效标签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EffectiveUser {
      get { if ((_hasBits0 & 4) != 0) { return effectiveUser_; } else { return EffectiveUserDefaultValue; } }
      set {
        _hasBits0 |= 4;
        effectiveUser_ = value;
      }
    }
    /// <summary>Gets whether the "EffectiveUser" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEffectiveUser {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "EffectiveUser" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEffectiveUser() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "IsShowMenberNiceName" field.</summary>
    public const int IsShowMenberNiceNameFieldNumber = 6;
    private readonly static bool IsShowMenberNiceNameDefaultValue = false;

    private bool isShowMenberNiceName_;
    /// <summary>
    ///是否显示成员昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShowMenberNiceName {
      get { if ((_hasBits0 & 8) != 0) { return isShowMenberNiceName_; } else { return IsShowMenberNiceNameDefaultValue; } }
      set {
        _hasBits0 |= 8;
        isShowMenberNiceName_ = value;
      }
    }
    /// <summary>Gets whether the "IsShowMenberNiceName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsShowMenberNiceName {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "IsShowMenberNiceName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsShowMenberNiceName() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      if (Name != other.Name) return false;
      if (Identity != other.Identity) return false;
      if (MessageFree != other.MessageFree) return false;
      if (EffectiveUser != other.EffectiveUser) return false;
      if (IsShowMenberNiceName != other.IsShowMenberNiceName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasInfo) hash ^= Info.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasIdentity) hash ^= Identity.GetHashCode();
      if (HasMessageFree) hash ^= MessageFree.GetHashCode();
      if (HasEffectiveUser) hash ^= EffectiveUser.GetHashCode();
      if (HasIsShowMenberNiceName) hash ^= IsShowMenberNiceName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasInfo) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasIdentity) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Identity);
      }
      if (HasMessageFree) {
        output.WriteRawTag(32);
        output.WriteBool(MessageFree);
      }
      if (HasEffectiveUser) {
        output.WriteRawTag(40);
        output.WriteBool(EffectiveUser);
      }
      if (HasIsShowMenberNiceName) {
        output.WriteRawTag(48);
        output.WriteBool(IsShowMenberNiceName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Identity);
      }
      if (HasMessageFree) {
        size += 1 + 1;
      }
      if (HasEffectiveUser) {
        size += 1 + 1;
      }
      if (HasIsShowMenberNiceName) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupMember other) {
      if (other == null) {
        return;
      }
      if (other.HasInfo) {
        if (!HasInfo) {
          Info = new global::YlPb.BaseUserInfo();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasIdentity) {
        Identity = other.Identity;
      }
      if (other.HasMessageFree) {
        MessageFree = other.MessageFree;
      }
      if (other.HasEffectiveUser) {
        EffectiveUser = other.EffectiveUser;
      }
      if (other.HasIsShowMenberNiceName) {
        IsShowMenberNiceName = other.IsShowMenberNiceName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasInfo) {
              Info = new global::YlPb.BaseUserInfo();
            }
            input.ReadMessage(Info);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Identity = (global::YlPb.GroupMemberIdentity) input.ReadEnum();
            break;
          }
          case 32: {
            MessageFree = input.ReadBool();
            break;
          }
          case 40: {
            EffectiveUser = input.ReadBool();
            break;
          }
          case 48: {
            IsShowMenberNiceName = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///群结构
  /// </summary>
  public sealed partial class GroupInfo : pb::IMessage<GroupInfo> {
    private static readonly pb::MessageParser<GroupInfo> _parser = new pb::MessageParser<GroupInfo>(() => new GroupInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupInfo(GroupInfo other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      code_ = other.code_;
      groupName_ = other.groupName_;
      url_ = other.url_;
      notice_ = other.notice_;
      members_ = other.members_.Clone();
      isOpenMemberCheck_ = other.isOpenMemberCheck_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupInfo Clone() {
      return new GroupInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    /// <summary>
    ///群Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "Id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 2;
    private readonly static uint CodeDefaultValue = 0;

    private uint code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Code {
      get { if ((_hasBits0 & 2) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "Code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "Code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "GroupName" field.</summary>
    public const int GroupNameFieldNumber = 3;
    private readonly static string GroupNameDefaultValue = "";

    private string groupName_;
    /// <summary>
    ///群名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupName {
      get { return groupName_ ?? GroupNameDefaultValue; }
      set {
        groupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "GroupName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupName {
      get { return groupName_ != null; }
    }
    /// <summary>Clears the value of the "GroupName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupName() {
      groupName_ = null;
    }

    /// <summary>Field number for the "Url" field.</summary>
    public const int UrlFieldNumber = 4;
    private readonly static string UrlDefaultValue = "";

    private string url_;
    /// <summary>
    ///群图片
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_ ?? UrlDefaultValue; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUrl {
      get { return url_ != null; }
    }
    /// <summary>Clears the value of the "Url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUrl() {
      url_ = null;
    }

    /// <summary>Field number for the "Notice" field.</summary>
    public const int NoticeFieldNumber = 5;
    private readonly static string NoticeDefaultValue = "";

    private string notice_;
    /// <summary>
    ///群公告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Notice {
      get { return notice_ ?? NoticeDefaultValue; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Notice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNotice {
      get { return notice_ != null; }
    }
    /// <summary>Clears the value of the "Notice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNotice() {
      notice_ = null;
    }

    /// <summary>Field number for the "Members" field.</summary>
    public const int MembersFieldNumber = 6;
    private static readonly pb::FieldCodec<global::YlPb.GroupMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(50, global::YlPb.GroupMember.Parser);
    private readonly pbc::RepeatedField<global::YlPb.GroupMember> members_ = new pbc::RepeatedField<global::YlPb.GroupMember>();
    /// <summary>
    ///群成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::YlPb.GroupMember> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "IsOpenMemberCheck" field.</summary>
    public const int IsOpenMemberCheckFieldNumber = 7;
    private readonly static bool IsOpenMemberCheckDefaultValue = false;

    private bool isOpenMemberCheck_;
    /// <summary>
    ///是否开启成员校验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpenMemberCheck {
      get { if ((_hasBits0 & 4) != 0) { return isOpenMemberCheck_; } else { return IsOpenMemberCheckDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isOpenMemberCheck_ = value;
      }
    }
    /// <summary>Gets whether the "IsOpenMemberCheck" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsOpenMemberCheck {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "IsOpenMemberCheck" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsOpenMemberCheck() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "Tags" field.</summary>
    public const int TagsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::YlPb.GroupTagInfo> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(66, global::YlPb.GroupTagInfo.Parser);
    private readonly pbc::RepeatedField<global::YlPb.GroupTagInfo> tags_ = new pbc::RepeatedField<global::YlPb.GroupTagInfo>();
    /// <summary>
    ///标签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::YlPb.GroupTagInfo> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Code != other.Code) return false;
      if (GroupName != other.GroupName) return false;
      if (Url != other.Url) return false;
      if (Notice != other.Notice) return false;
      if(!members_.Equals(other.members_)) return false;
      if (IsOpenMemberCheck != other.IsOpenMemberCheck) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasGroupName) hash ^= GroupName.GetHashCode();
      if (HasUrl) hash ^= Url.GetHashCode();
      if (HasNotice) hash ^= Notice.GetHashCode();
      hash ^= members_.GetHashCode();
      if (HasIsOpenMemberCheck) hash ^= IsOpenMemberCheck.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasCode) {
        output.WriteRawTag(16);
        output.WriteUInt32(Code);
      }
      if (HasGroupName) {
        output.WriteRawTag(26);
        output.WriteString(GroupName);
      }
      if (HasUrl) {
        output.WriteRawTag(34);
        output.WriteString(Url);
      }
      if (HasNotice) {
        output.WriteRawTag(42);
        output.WriteString(Notice);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (HasIsOpenMemberCheck) {
        output.WriteRawTag(56);
        output.WriteBool(IsOpenMemberCheck);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
      }
      if (HasGroupName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupName);
      }
      if (HasUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (HasNotice) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Notice);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (HasIsOpenMemberCheck) {
        size += 1 + 1;
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasGroupName) {
        GroupName = other.GroupName;
      }
      if (other.HasUrl) {
        Url = other.Url;
      }
      if (other.HasNotice) {
        Notice = other.Notice;
      }
      members_.Add(other.members_);
      if (other.HasIsOpenMemberCheck) {
        IsOpenMemberCheck = other.IsOpenMemberCheck;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Code = input.ReadUInt32();
            break;
          }
          case 26: {
            GroupName = input.ReadString();
            break;
          }
          case 34: {
            Url = input.ReadString();
            break;
          }
          case 42: {
            Notice = input.ReadString();
            break;
          }
          case 50: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 56: {
            IsOpenMemberCheck = input.ReadBool();
            break;
          }
          case 66: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///推送聊天群变化信息
  /// </summary>
  public sealed partial class GroupChatNotice : pb::IMessage<GroupChatNotice> {
    private static readonly pb::MessageParser<GroupChatNotice> _parser = new pb::MessageParser<GroupChatNotice>(() => new GroupChatNotice());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupChatNotice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupChatNotice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupChatNotice(GroupChatNotice other) : this() {
      _hasBits0 = other._hasBits0;
      changeType_ = other.changeType_;
      operatuId_ = other.HasOperatuId ? other.operatuId_.Clone() : null;
      operateduId_ = other.operateduId_.Clone();
      changeStr_ = other.changeStr_;
      changeBool_ = other.changeBool_;
      tags_ = other.tags_.Clone();
      changeIdentity_ = other.changeIdentity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupChatNotice Clone() {
      return new GroupChatNotice(this);
    }

    /// <summary>Field number for the "ChangeType" field.</summary>
    public const int ChangeTypeFieldNumber = 1;
    private readonly static global::YlPb.GroupChangeType ChangeTypeDefaultValue = global::YlPb.GroupChangeType.AddMember;

    private global::YlPb.GroupChangeType changeType_;
    /// <summary>
    ///信息改变类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.GroupChangeType ChangeType {
      get { if ((_hasBits0 & 1) != 0) { return changeType_; } else { return ChangeTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        changeType_ = value;
      }
    }
    /// <summary>Gets whether the "ChangeType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChangeType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ChangeType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChangeType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "OperatuId" field.</summary>
    public const int OperatuIdFieldNumber = 2;
    private global::YlPb.BaseUserInfo operatuId_;
    /// <summary>
    ///操作用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.BaseUserInfo OperatuId {
      get { return operatuId_; }
      set {
        operatuId_ = value;
      }
    }
    /// <summary>Gets whether the OperatuId field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOperatuId {
      get { return operatuId_ != null; }
    }
    /// <summary>Clears the value of the OperatuId field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOperatuId() {
      operatuId_ = null;
    }

    /// <summary>Field number for the "OperateduId" field.</summary>
    public const int OperateduIdFieldNumber = 3;
    private static readonly pb::FieldCodec<global::YlPb.BaseUserInfo> _repeated_operateduId_codec
        = pb::FieldCodec.ForMessage(26, global::YlPb.BaseUserInfo.Parser);
    private readonly pbc::RepeatedField<global::YlPb.BaseUserInfo> operateduId_ = new pbc::RepeatedField<global::YlPb.BaseUserInfo>();
    /// <summary>
    ///被操作用户Ids 有可能是多人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::YlPb.BaseUserInfo> OperateduId {
      get { return operateduId_; }
    }

    /// <summary>Field number for the "ChangeStr" field.</summary>
    public const int ChangeStrFieldNumber = 4;
    private readonly static string ChangeStrDefaultValue = "";

    private string changeStr_;
    /// <summary>
    ///改变消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChangeStr {
      get { return changeStr_ ?? ChangeStrDefaultValue; }
      set {
        changeStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ChangeStr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChangeStr {
      get { return changeStr_ != null; }
    }
    /// <summary>Clears the value of the "ChangeStr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChangeStr() {
      changeStr_ = null;
    }

    /// <summary>Field number for the "ChangeBool" field.</summary>
    public const int ChangeBoolFieldNumber = 5;
    private readonly static bool ChangeBoolDefaultValue = false;

    private bool changeBool_;
    /// <summary>
    ///变化bool值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ChangeBool {
      get { if ((_hasBits0 & 2) != 0) { return changeBool_; } else { return ChangeBoolDefaultValue; } }
      set {
        _hasBits0 |= 2;
        changeBool_ = value;
      }
    }
    /// <summary>Gets whether the "ChangeBool" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChangeBool {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ChangeBool" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChangeBool() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "Tags" field.</summary>
    public const int TagsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::YlPb.GroupTagInfo> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(50, global::YlPb.GroupTagInfo.Parser);
    private readonly pbc::RepeatedField<global::YlPb.GroupTagInfo> tags_ = new pbc::RepeatedField<global::YlPb.GroupTagInfo>();
    /// <summary>
    ///标签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::YlPb.GroupTagInfo> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "ChangeIdentity" field.</summary>
    public const int ChangeIdentityFieldNumber = 7;
    private readonly static global::YlPb.GroupMemberIdentity ChangeIdentityDefaultValue = global::YlPb.GroupMemberIdentity.IdentityNormal;

    private global::YlPb.GroupMemberIdentity changeIdentity_;
    /// <summary>
    ///改变身份
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.GroupMemberIdentity ChangeIdentity {
      get { if ((_hasBits0 & 4) != 0) { return changeIdentity_; } else { return ChangeIdentityDefaultValue; } }
      set {
        _hasBits0 |= 4;
        changeIdentity_ = value;
      }
    }
    /// <summary>Gets whether the "ChangeIdentity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChangeIdentity {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ChangeIdentity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChangeIdentity() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupChatNotice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupChatNotice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChangeType != other.ChangeType) return false;
      if (!object.Equals(OperatuId, other.OperatuId)) return false;
      if(!operateduId_.Equals(other.operateduId_)) return false;
      if (ChangeStr != other.ChangeStr) return false;
      if (ChangeBool != other.ChangeBool) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (ChangeIdentity != other.ChangeIdentity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChangeType) hash ^= ChangeType.GetHashCode();
      if (HasOperatuId) hash ^= OperatuId.GetHashCode();
      hash ^= operateduId_.GetHashCode();
      if (HasChangeStr) hash ^= ChangeStr.GetHashCode();
      if (HasChangeBool) hash ^= ChangeBool.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (HasChangeIdentity) hash ^= ChangeIdentity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasChangeType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChangeType);
      }
      if (HasOperatuId) {
        output.WriteRawTag(18);
        output.WriteMessage(OperatuId);
      }
      operateduId_.WriteTo(output, _repeated_operateduId_codec);
      if (HasChangeStr) {
        output.WriteRawTag(34);
        output.WriteString(ChangeStr);
      }
      if (HasChangeBool) {
        output.WriteRawTag(40);
        output.WriteBool(ChangeBool);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (HasChangeIdentity) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ChangeIdentity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasChangeType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChangeType);
      }
      if (HasOperatuId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OperatuId);
      }
      size += operateduId_.CalculateSize(_repeated_operateduId_codec);
      if (HasChangeStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChangeStr);
      }
      if (HasChangeBool) {
        size += 1 + 1;
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (HasChangeIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChangeIdentity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupChatNotice other) {
      if (other == null) {
        return;
      }
      if (other.HasChangeType) {
        ChangeType = other.ChangeType;
      }
      if (other.HasOperatuId) {
        if (!HasOperatuId) {
          OperatuId = new global::YlPb.BaseUserInfo();
        }
        OperatuId.MergeFrom(other.OperatuId);
      }
      operateduId_.Add(other.operateduId_);
      if (other.HasChangeStr) {
        ChangeStr = other.ChangeStr;
      }
      if (other.HasChangeBool) {
        ChangeBool = other.ChangeBool;
      }
      tags_.Add(other.tags_);
      if (other.HasChangeIdentity) {
        ChangeIdentity = other.ChangeIdentity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChangeType = (global::YlPb.GroupChangeType) input.ReadEnum();
            break;
          }
          case 18: {
            if (!HasOperatuId) {
              OperatuId = new global::YlPb.BaseUserInfo();
            }
            input.ReadMessage(OperatuId);
            break;
          }
          case 26: {
            operateduId_.AddEntriesFrom(input, _repeated_operateduId_codec);
            break;
          }
          case 34: {
            ChangeStr = input.ReadString();
            break;
          }
          case 40: {
            ChangeBool = input.ReadBool();
            break;
          }
          case 50: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 56: {
            ChangeIdentity = (global::YlPb.GroupMemberIdentity) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateChatGroupReq : pb::IMessage<CreateChatGroupReq> {
    private static readonly pb::MessageParser<CreateChatGroupReq> _parser = new pb::MessageParser<CreateChatGroupReq>(() => new CreateChatGroupReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateChatGroupReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateChatGroupReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateChatGroupReq(CreateChatGroupReq other) : this() {
      members_ = other.members_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateChatGroupReq Clone() {
      return new CreateChatGroupReq(this);
    }

    /// <summary>Field number for the "Members" field.</summary>
    public const int MembersFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_members_codec
        = pb::FieldCodec.ForUInt32(24);
    private readonly pbc::RepeatedField<uint> members_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///群成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateChatGroupReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateChatGroupReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!members_.Equals(other.members_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= members_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      members_.WriteTo(output, _repeated_members_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += members_.CalculateSize(_repeated_members_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateChatGroupReq other) {
      if (other == null) {
        return;
      }
      members_.Add(other.members_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26:
          case 24: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=202  创建聊天群回应
  /// </summary>
  public sealed partial class CreateChatGroupRes : pb::IMessage<CreateChatGroupRes> {
    private static readonly pb::MessageParser<CreateChatGroupRes> _parser = new pb::MessageParser<CreateChatGroupRes>(() => new CreateChatGroupRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateChatGroupRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateChatGroupRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateChatGroupRes(CreateChatGroupRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      group_ = other.HasGroup ? other.group_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateChatGroupRes Clone() {
      return new CreateChatGroupRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///详见错误码文档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Group" field.</summary>
    public const int GroupFieldNumber = 2;
    private global::YlPb.GroupInfo group_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.GroupInfo Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }
    /// <summary>Gets whether the Group field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroup {
      get { return group_ != null; }
    }
    /// <summary>Clears the value of the Group field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroup() {
      group_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateChatGroupRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateChatGroupRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (!object.Equals(Group, other.Group)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasGroup) hash ^= Group.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasGroup) {
        output.WriteRawTag(18);
        output.WriteMessage(Group);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasGroup) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateChatGroupRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasGroup) {
        if (!HasGroup) {
          Group = new global::YlPb.GroupInfo();
        }
        Group.MergeFrom(other.Group);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            if (!HasGroup) {
              Group = new global::YlPb.GroupInfo();
            }
            input.ReadMessage(Group);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=203 退出聊天群
  /// </summary>
  public sealed partial class QuitChatGroupReq : pb::IMessage<QuitChatGroupReq> {
    private static readonly pb::MessageParser<QuitChatGroupReq> _parser = new pb::MessageParser<QuitChatGroupReq>(() => new QuitChatGroupReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuitChatGroupReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuitChatGroupReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuitChatGroupReq(QuitChatGroupReq other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuitChatGroupReq Clone() {
      return new QuitChatGroupReq(this);
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuitChatGroupReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuitChatGroupReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuitChatGroupReq other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=204 退出聊天群回应
  /// </summary>
  public sealed partial class QuitChatGroupRes : pb::IMessage<QuitChatGroupRes> {
    private static readonly pb::MessageParser<QuitChatGroupRes> _parser = new pb::MessageParser<QuitChatGroupRes>(() => new QuitChatGroupRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuitChatGroupRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuitChatGroupRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuitChatGroupRes(QuitChatGroupRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuitChatGroupRes Clone() {
      return new QuitChatGroupRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///详见错误码文档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 2) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuitChatGroupRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuitChatGroupRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasGroupId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuitChatGroupRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=205  查询聊天群组信息
  /// </summary>
  public sealed partial class QueryChatGroupReq : pb::IMessage<QueryChatGroupReq> {
    private static readonly pb::MessageParser<QueryChatGroupReq> _parser = new pb::MessageParser<QueryChatGroupReq>(() => new QueryChatGroupReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryChatGroupReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryChatGroupReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryChatGroupReq(QueryChatGroupReq other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryChatGroupReq Clone() {
      return new QueryChatGroupReq(this);
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryChatGroupReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryChatGroupReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryChatGroupReq other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=206  查询聊天群组信息
  /// </summary>
  public sealed partial class QueryChatGroupRes : pb::IMessage<QueryChatGroupRes> {
    private static readonly pb::MessageParser<QueryChatGroupRes> _parser = new pb::MessageParser<QueryChatGroupRes>(() => new QueryChatGroupRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryChatGroupRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryChatGroupRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryChatGroupRes(QueryChatGroupRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      group_ = other.HasGroup ? other.group_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryChatGroupRes Clone() {
      return new QueryChatGroupRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///详见错误码文档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Group" field.</summary>
    public const int GroupFieldNumber = 2;
    private global::YlPb.GroupInfo group_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.GroupInfo Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }
    /// <summary>Gets whether the Group field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroup {
      get { return group_ != null; }
    }
    /// <summary>Clears the value of the Group field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroup() {
      group_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryChatGroupRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryChatGroupRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (!object.Equals(Group, other.Group)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasGroup) hash ^= Group.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasGroup) {
        output.WriteRawTag(18);
        output.WriteMessage(Group);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasGroup) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryChatGroupRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasGroup) {
        if (!HasGroup) {
          Group = new global::YlPb.GroupInfo();
        }
        Group.MergeFrom(other.Group);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            if (!HasGroup) {
              Group = new global::YlPb.GroupInfo();
            }
            input.ReadMessage(Group);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=207 添加群成员
  /// </summary>
  public sealed partial class AddGroupMemberReq : pb::IMessage<AddGroupMemberReq> {
    private static readonly pb::MessageParser<AddGroupMemberReq> _parser = new pb::MessageParser<AddGroupMemberReq>(() => new AddGroupMemberReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddGroupMemberReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddGroupMemberReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddGroupMemberReq(AddGroupMemberReq other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      userIds_ = other.userIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddGroupMemberReq Clone() {
      return new AddGroupMemberReq(this);
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "UserIds" field.</summary>
    public const int UserIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_userIds_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> userIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UserIds {
      get { return userIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddGroupMemberReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddGroupMemberReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if(!userIds_.Equals(other.userIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      hash ^= userIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      userIds_.WriteTo(output, _repeated_userIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddGroupMemberReq other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      userIds_.Add(other.userIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=208 添加群成员回应
  /// </summary>
  public sealed partial class AddGroupMemberRes : pb::IMessage<AddGroupMemberRes> {
    private static readonly pb::MessageParser<AddGroupMemberRes> _parser = new pb::MessageParser<AddGroupMemberRes>(() => new AddGroupMemberRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddGroupMemberRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddGroupMemberRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddGroupMemberRes(AddGroupMemberRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddGroupMemberRes Clone() {
      return new AddGroupMemberRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///详见错误码文档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 2) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddGroupMemberRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddGroupMemberRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasGroupId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddGroupMemberRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=209 移除群成员回应
  /// </summary>
  public sealed partial class RemoveGroupMemberReq : pb::IMessage<RemoveGroupMemberReq> {
    private static readonly pb::MessageParser<RemoveGroupMemberReq> _parser = new pb::MessageParser<RemoveGroupMemberReq>(() => new RemoveGroupMemberReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveGroupMemberReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveGroupMemberReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveGroupMemberReq(RemoveGroupMemberReq other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      userIds_ = other.userIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveGroupMemberReq Clone() {
      return new RemoveGroupMemberReq(this);
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "UserIds" field.</summary>
    public const int UserIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_userIds_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> userIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UserIds {
      get { return userIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveGroupMemberReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveGroupMemberReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if(!userIds_.Equals(other.userIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      hash ^= userIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      userIds_.WriteTo(output, _repeated_userIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveGroupMemberReq other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      userIds_.Add(other.userIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=210 移除群成员回应
  /// </summary>
  public sealed partial class RemoveGroupMemberRes : pb::IMessage<RemoveGroupMemberRes> {
    private static readonly pb::MessageParser<RemoveGroupMemberRes> _parser = new pb::MessageParser<RemoveGroupMemberRes>(() => new RemoveGroupMemberRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveGroupMemberRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveGroupMemberRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveGroupMemberRes(RemoveGroupMemberRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveGroupMemberRes Clone() {
      return new RemoveGroupMemberRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///详见错误码文档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 2) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveGroupMemberRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveGroupMemberRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasGroupId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveGroupMemberRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=211 修改群公告请求
  /// </summary>
  public sealed partial class ModifyGroupNoticeReq : pb::IMessage<ModifyGroupNoticeReq> {
    private static readonly pb::MessageParser<ModifyGroupNoticeReq> _parser = new pb::MessageParser<ModifyGroupNoticeReq>(() => new ModifyGroupNoticeReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModifyGroupNoticeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyGroupNoticeReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyGroupNoticeReq(ModifyGroupNoticeReq other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      notice_ = other.notice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyGroupNoticeReq Clone() {
      return new ModifyGroupNoticeReq(this);
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Notice" field.</summary>
    public const int NoticeFieldNumber = 2;
    private readonly static string NoticeDefaultValue = "";

    private string notice_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Notice {
      get { return notice_ ?? NoticeDefaultValue; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Notice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNotice {
      get { return notice_ != null; }
    }
    /// <summary>Clears the value of the "Notice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNotice() {
      notice_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModifyGroupNoticeReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModifyGroupNoticeReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (Notice != other.Notice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (HasNotice) hash ^= Notice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (HasNotice) {
        output.WriteRawTag(18);
        output.WriteString(Notice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (HasNotice) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Notice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModifyGroupNoticeReq other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      if (other.HasNotice) {
        Notice = other.Notice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 18: {
            Notice = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=212 修改群公告请求回应
  /// </summary>
  public sealed partial class ModifyGroupNoticeRes : pb::IMessage<ModifyGroupNoticeRes> {
    private static readonly pb::MessageParser<ModifyGroupNoticeRes> _parser = new pb::MessageParser<ModifyGroupNoticeRes>(() => new ModifyGroupNoticeRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModifyGroupNoticeRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyGroupNoticeRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyGroupNoticeRes(ModifyGroupNoticeRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyGroupNoticeRes Clone() {
      return new ModifyGroupNoticeRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///详见错误码文档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 2) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModifyGroupNoticeRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModifyGroupNoticeRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasGroupId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModifyGroupNoticeRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=213 修改群昵称请求
  /// </summary>
  public sealed partial class ModifyGroupNameReq : pb::IMessage<ModifyGroupNameReq> {
    private static readonly pb::MessageParser<ModifyGroupNameReq> _parser = new pb::MessageParser<ModifyGroupNameReq>(() => new ModifyGroupNameReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModifyGroupNameReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyGroupNameReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyGroupNameReq(ModifyGroupNameReq other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyGroupNameReq Clone() {
      return new ModifyGroupNameReq(this);
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "Name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModifyGroupNameReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModifyGroupNameReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModifyGroupNameReq other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=214 修改群昵称请求回应
  /// </summary>
  public sealed partial class ModifyGroupNameRes : pb::IMessage<ModifyGroupNameRes> {
    private static readonly pb::MessageParser<ModifyGroupNameRes> _parser = new pb::MessageParser<ModifyGroupNameRes>(() => new ModifyGroupNameRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModifyGroupNameRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyGroupNameRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyGroupNameRes(ModifyGroupNameRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyGroupNameRes Clone() {
      return new ModifyGroupNameRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///详见错误码文档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 2) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModifyGroupNameRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModifyGroupNameRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasGroupId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModifyGroupNameRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=215 群成员修改别名请求
  /// </summary>
  public sealed partial class GroupMemberModifyAliasReq : pb::IMessage<GroupMemberModifyAliasReq> {
    private static readonly pb::MessageParser<GroupMemberModifyAliasReq> _parser = new pb::MessageParser<GroupMemberModifyAliasReq>(() => new GroupMemberModifyAliasReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupMemberModifyAliasReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMemberModifyAliasReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMemberModifyAliasReq(GroupMemberModifyAliasReq other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMemberModifyAliasReq Clone() {
      return new GroupMemberModifyAliasReq(this);
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "Name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupMemberModifyAliasReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupMemberModifyAliasReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupMemberModifyAliasReq other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=216 群成员修改别名请求回应
  /// </summary>
  public sealed partial class GroupMemberModifyAliasRes : pb::IMessage<GroupMemberModifyAliasRes> {
    private static readonly pb::MessageParser<GroupMemberModifyAliasRes> _parser = new pb::MessageParser<GroupMemberModifyAliasRes>(() => new GroupMemberModifyAliasRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupMemberModifyAliasRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMemberModifyAliasRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMemberModifyAliasRes(GroupMemberModifyAliasRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      groupId_ = other.groupId_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMemberModifyAliasRes Clone() {
      return new GroupMemberModifyAliasRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///详见错误码文档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 2) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "Name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupMemberModifyAliasRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupMemberModifyAliasRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (GroupId != other.GroupId) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasGroupId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupMemberModifyAliasRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=217 请求用户关联群列表
  /// </summary>
  public sealed partial class QueryUserRelationGroupReq : pb::IMessage<QueryUserRelationGroupReq> {
    private static readonly pb::MessageParser<QueryUserRelationGroupReq> _parser = new pb::MessageParser<QueryUserRelationGroupReq>(() => new QueryUserRelationGroupReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryUserRelationGroupReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUserRelationGroupReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUserRelationGroupReq(QueryUserRelationGroupReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUserRelationGroupReq Clone() {
      return new QueryUserRelationGroupReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryUserRelationGroupReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryUserRelationGroupReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryUserRelationGroupReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///MsgId=218 请求用户关联群列表回应
  /// </summary>
  public sealed partial class QueryUserRelationGroupRes : pb::IMessage<QueryUserRelationGroupRes> {
    private static readonly pb::MessageParser<QueryUserRelationGroupRes> _parser = new pb::MessageParser<QueryUserRelationGroupRes>(() => new QueryUserRelationGroupRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryUserRelationGroupRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUserRelationGroupRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUserRelationGroupRes(QueryUserRelationGroupRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      relationGroup_ = other.relationGroup_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUserRelationGroupRes Clone() {
      return new QueryUserRelationGroupRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///详见错误码文档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "RelationGroup" field.</summary>
    public const int RelationGroupFieldNumber = 2;
    private static readonly pb::FieldCodec<global::YlPb.GroupInfo> _repeated_relationGroup_codec
        = pb::FieldCodec.ForMessage(18, global::YlPb.GroupInfo.Parser);
    private readonly pbc::RepeatedField<global::YlPb.GroupInfo> relationGroup_ = new pbc::RepeatedField<global::YlPb.GroupInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::YlPb.GroupInfo> RelationGroup {
      get { return relationGroup_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryUserRelationGroupRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryUserRelationGroupRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if(!relationGroup_.Equals(other.relationGroup_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      hash ^= relationGroup_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      relationGroup_.WriteTo(output, _repeated_relationGroup_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      size += relationGroup_.CalculateSize(_repeated_relationGroup_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryUserRelationGroupRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      relationGroup_.Add(other.relationGroup_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            relationGroup_.AddEntriesFrom(input, _repeated_relationGroup_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=219 设置成员校验
  /// </summary>
  public sealed partial class SettingGroupReq : pb::IMessage<SettingGroupReq> {
    private static readonly pb::MessageParser<SettingGroupReq> _parser = new pb::MessageParser<SettingGroupReq>(() => new SettingGroupReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SettingGroupReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingGroupReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingGroupReq(SettingGroupReq other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      isOpenMemberCheck_ = other.isOpenMemberCheck_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingGroupReq Clone() {
      return new SettingGroupReq(this);
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "IsOpenMemberCheck" field.</summary>
    public const int IsOpenMemberCheckFieldNumber = 2;
    private readonly static bool IsOpenMemberCheckDefaultValue = false;

    private bool isOpenMemberCheck_;
    /// <summary>
    ///是否开启群验证
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpenMemberCheck {
      get { if ((_hasBits0 & 2) != 0) { return isOpenMemberCheck_; } else { return IsOpenMemberCheckDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isOpenMemberCheck_ = value;
      }
    }
    /// <summary>Gets whether the "IsOpenMemberCheck" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsOpenMemberCheck {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "IsOpenMemberCheck" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsOpenMemberCheck() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SettingGroupReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SettingGroupReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (IsOpenMemberCheck != other.IsOpenMemberCheck) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (HasIsOpenMemberCheck) hash ^= IsOpenMemberCheck.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (HasIsOpenMemberCheck) {
        output.WriteRawTag(16);
        output.WriteBool(IsOpenMemberCheck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (HasIsOpenMemberCheck) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SettingGroupReq other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      if (other.HasIsOpenMemberCheck) {
        IsOpenMemberCheck = other.IsOpenMemberCheck;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 16: {
            IsOpenMemberCheck = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=220 请求用户关联群列表回应
  /// </summary>
  public sealed partial class SettingGroupRes : pb::IMessage<SettingGroupRes> {
    private static readonly pb::MessageParser<SettingGroupRes> _parser = new pb::MessageParser<SettingGroupRes>(() => new SettingGroupRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SettingGroupRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingGroupRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingGroupRes(SettingGroupRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingGroupRes Clone() {
      return new SettingGroupRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///详见错误码文档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 2) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SettingGroupRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SettingGroupRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasGroupId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SettingGroupRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=221 用户二维码加入群请求
  /// </summary>
  public sealed partial class GroupQRcodeAddMemberReq : pb::IMessage<GroupQRcodeAddMemberReq> {
    private static readonly pb::MessageParser<GroupQRcodeAddMemberReq> _parser = new pb::MessageParser<GroupQRcodeAddMemberReq>(() => new GroupQRcodeAddMemberReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupQRcodeAddMemberReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupQRcodeAddMemberReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupQRcodeAddMemberReq(GroupQRcodeAddMemberReq other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupQRcodeAddMemberReq Clone() {
      return new GroupQRcodeAddMemberReq(this);
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupQRcodeAddMemberReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupQRcodeAddMemberReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupQRcodeAddMemberReq other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=222 用户二维码加入群请求回应
  /// </summary>
  public sealed partial class GroupQRcodeAddMemberRes : pb::IMessage<GroupQRcodeAddMemberRes> {
    private static readonly pb::MessageParser<GroupQRcodeAddMemberRes> _parser = new pb::MessageParser<GroupQRcodeAddMemberRes>(() => new GroupQRcodeAddMemberRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupQRcodeAddMemberRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupQRcodeAddMemberRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupQRcodeAddMemberRes(GroupQRcodeAddMemberRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      group_ = other.HasGroup ? other.group_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupQRcodeAddMemberRes Clone() {
      return new GroupQRcodeAddMemberRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///详见错误码文档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Group" field.</summary>
    public const int GroupFieldNumber = 2;
    private global::YlPb.GroupInfo group_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.GroupInfo Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }
    /// <summary>Gets whether the Group field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroup {
      get { return group_ != null; }
    }
    /// <summary>Clears the value of the Group field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroup() {
      group_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupQRcodeAddMemberRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupQRcodeAddMemberRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (!object.Equals(Group, other.Group)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasGroup) hash ^= Group.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasGroup) {
        output.WriteRawTag(18);
        output.WriteMessage(Group);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasGroup) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupQRcodeAddMemberRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasGroup) {
        if (!HasGroup) {
          Group = new global::YlPb.GroupInfo();
        }
        Group.MergeFrom(other.Group);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            if (!HasGroup) {
              Group = new global::YlPb.GroupInfo();
            }
            input.ReadMessage(Group);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=223 群主转让请求
  /// </summary>
  public sealed partial class GroupMasterTransReq : pb::IMessage<GroupMasterTransReq> {
    private static readonly pb::MessageParser<GroupMasterTransReq> _parser = new pb::MessageParser<GroupMasterTransReq>(() => new GroupMasterTransReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupMasterTransReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMasterTransReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMasterTransReq(GroupMasterTransReq other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMasterTransReq Clone() {
      return new GroupMasterTransReq(this);
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private readonly static uint UserIdDefaultValue = 0;

    private uint userId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { if ((_hasBits0 & 2) != 0) { return userId_; } else { return UserIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        userId_ = value;
      }
    }
    /// <summary>Gets whether the "UserId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUserId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "UserId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUserId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupMasterTransReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupMasterTransReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (HasUserId) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (HasUserId) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (HasUserId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupMasterTransReq other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      if (other.HasUserId) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 16: {
            UserId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=224 群主转让请求回应
  /// </summary>
  public sealed partial class GroupMasterTransRes : pb::IMessage<GroupMasterTransRes> {
    private static readonly pb::MessageParser<GroupMasterTransRes> _parser = new pb::MessageParser<GroupMasterTransRes>(() => new GroupMasterTransRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupMasterTransRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMasterTransRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMasterTransRes(GroupMasterTransRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      groupId_ = other.groupId_;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMasterTransRes Clone() {
      return new GroupMasterTransRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///详见错误码文档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 2) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 3;
    private readonly static uint UserIdDefaultValue = 0;

    private uint userId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { if ((_hasBits0 & 4) != 0) { return userId_; } else { return UserIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        userId_ = value;
      }
    }
    /// <summary>Gets whether the "UserId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUserId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "UserId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUserId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupMasterTransRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupMasterTransRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (GroupId != other.GroupId) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (HasUserId) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasGroupId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      if (HasUserId) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (HasUserId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupMasterTransRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      if (other.HasUserId) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 24: {
            UserId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=225 群主校验用户接口
  /// </summary>
  public sealed partial class GroupMasterCheckAddMemberReq : pb::IMessage<GroupMasterCheckAddMemberReq> {
    private static readonly pb::MessageParser<GroupMasterCheckAddMemberReq> _parser = new pb::MessageParser<GroupMasterCheckAddMemberReq>(() => new GroupMasterCheckAddMemberReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupMasterCheckAddMemberReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMasterCheckAddMemberReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMasterCheckAddMemberReq(GroupMasterCheckAddMemberReq other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      userIds_ = other.userIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMasterCheckAddMemberReq Clone() {
      return new GroupMasterCheckAddMemberReq(this);
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "UserIds" field.</summary>
    public const int UserIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_userIds_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> userIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UserIds {
      get { return userIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupMasterCheckAddMemberReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupMasterCheckAddMemberReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if(!userIds_.Equals(other.userIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      hash ^= userIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      userIds_.WriteTo(output, _repeated_userIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupMasterCheckAddMemberReq other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      userIds_.Add(other.userIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=226 群主校验用户接口
  /// </summary>
  public sealed partial class GroupMasterCheckAddMemberRes : pb::IMessage<GroupMasterCheckAddMemberRes> {
    private static readonly pb::MessageParser<GroupMasterCheckAddMemberRes> _parser = new pb::MessageParser<GroupMasterCheckAddMemberRes>(() => new GroupMasterCheckAddMemberRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupMasterCheckAddMemberRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMasterCheckAddMemberRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMasterCheckAddMemberRes(GroupMasterCheckAddMemberRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      groupId_ = other.groupId_;
      userIds_ = other.userIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMasterCheckAddMemberRes Clone() {
      return new GroupMasterCheckAddMemberRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///详见错误码文档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 2) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "UserIds" field.</summary>
    public const int UserIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_userIds_codec
        = pb::FieldCodec.ForUInt32(24);
    private readonly pbc::RepeatedField<uint> userIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UserIds {
      get { return userIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupMasterCheckAddMemberRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupMasterCheckAddMemberRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (GroupId != other.GroupId) return false;
      if(!userIds_.Equals(other.userIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      hash ^= userIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasGroupId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      userIds_.WriteTo(output, _repeated_userIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupMasterCheckAddMemberRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      userIds_.Add(other.userIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=227 消息免打扰
  /// </summary>
  public sealed partial class SetGroupMasterMessageFreeReq : pb::IMessage<SetGroupMasterMessageFreeReq> {
    private static readonly pb::MessageParser<SetGroupMasterMessageFreeReq> _parser = new pb::MessageParser<SetGroupMasterMessageFreeReq>(() => new SetGroupMasterMessageFreeReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetGroupMasterMessageFreeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupMasterMessageFreeReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupMasterMessageFreeReq(SetGroupMasterMessageFreeReq other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      messageFree_ = other.messageFree_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupMasterMessageFreeReq Clone() {
      return new SetGroupMasterMessageFreeReq(this);
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "MessageFree" field.</summary>
    public const int MessageFreeFieldNumber = 2;
    private readonly static bool MessageFreeDefaultValue = false;

    private bool messageFree_;
    /// <summary>
    ///消息免打扰
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MessageFree {
      get { if ((_hasBits0 & 2) != 0) { return messageFree_; } else { return MessageFreeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        messageFree_ = value;
      }
    }
    /// <summary>Gets whether the "MessageFree" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessageFree {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "MessageFree" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageFree() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetGroupMasterMessageFreeReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetGroupMasterMessageFreeReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (MessageFree != other.MessageFree) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (HasMessageFree) hash ^= MessageFree.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (HasMessageFree) {
        output.WriteRawTag(16);
        output.WriteBool(MessageFree);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (HasMessageFree) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetGroupMasterMessageFreeReq other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      if (other.HasMessageFree) {
        MessageFree = other.MessageFree;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 16: {
            MessageFree = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=228 消息免打扰
  /// </summary>
  public sealed partial class SetGroupMasterMessageFreeRes : pb::IMessage<SetGroupMasterMessageFreeRes> {
    private static readonly pb::MessageParser<SetGroupMasterMessageFreeRes> _parser = new pb::MessageParser<SetGroupMasterMessageFreeRes>(() => new SetGroupMasterMessageFreeRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetGroupMasterMessageFreeRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupMasterMessageFreeRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupMasterMessageFreeRes(SetGroupMasterMessageFreeRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      groupId_ = other.groupId_;
      messageFree_ = other.messageFree_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupMasterMessageFreeRes Clone() {
      return new SetGroupMasterMessageFreeRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///详见错误码文档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 2) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "MessageFree" field.</summary>
    public const int MessageFreeFieldNumber = 3;
    private readonly static bool MessageFreeDefaultValue = false;

    private bool messageFree_;
    /// <summary>
    ///消息免打扰
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MessageFree {
      get { if ((_hasBits0 & 4) != 0) { return messageFree_; } else { return MessageFreeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        messageFree_ = value;
      }
    }
    /// <summary>Gets whether the "MessageFree" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessageFree {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "MessageFree" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageFree() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetGroupMasterMessageFreeRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetGroupMasterMessageFreeRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (GroupId != other.GroupId) return false;
      if (MessageFree != other.MessageFree) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (HasMessageFree) hash ^= MessageFree.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasGroupId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      if (HasMessageFree) {
        output.WriteRawTag(24);
        output.WriteBool(MessageFree);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (HasMessageFree) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetGroupMasterMessageFreeRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      if (other.HasMessageFree) {
        MessageFree = other.MessageFree;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 24: {
            MessageFree = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=229 消息免打扰
  /// </summary>
  public sealed partial class SetGroupIsShowMenberNiceNameReq : pb::IMessage<SetGroupIsShowMenberNiceNameReq> {
    private static readonly pb::MessageParser<SetGroupIsShowMenberNiceNameReq> _parser = new pb::MessageParser<SetGroupIsShowMenberNiceNameReq>(() => new SetGroupIsShowMenberNiceNameReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetGroupIsShowMenberNiceNameReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupIsShowMenberNiceNameReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupIsShowMenberNiceNameReq(SetGroupIsShowMenberNiceNameReq other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      isShowMenberNiceName_ = other.isShowMenberNiceName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupIsShowMenberNiceNameReq Clone() {
      return new SetGroupIsShowMenberNiceNameReq(this);
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "IsShowMenberNiceName" field.</summary>
    public const int IsShowMenberNiceNameFieldNumber = 2;
    private readonly static bool IsShowMenberNiceNameDefaultValue = false;

    private bool isShowMenberNiceName_;
    /// <summary>
    ///消息免打扰
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShowMenberNiceName {
      get { if ((_hasBits0 & 2) != 0) { return isShowMenberNiceName_; } else { return IsShowMenberNiceNameDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isShowMenberNiceName_ = value;
      }
    }
    /// <summary>Gets whether the "IsShowMenberNiceName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsShowMenberNiceName {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "IsShowMenberNiceName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsShowMenberNiceName() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetGroupIsShowMenberNiceNameReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetGroupIsShowMenberNiceNameReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (IsShowMenberNiceName != other.IsShowMenberNiceName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (HasIsShowMenberNiceName) hash ^= IsShowMenberNiceName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (HasIsShowMenberNiceName) {
        output.WriteRawTag(16);
        output.WriteBool(IsShowMenberNiceName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (HasIsShowMenberNiceName) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetGroupIsShowMenberNiceNameReq other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      if (other.HasIsShowMenberNiceName) {
        IsShowMenberNiceName = other.IsShowMenberNiceName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 16: {
            IsShowMenberNiceName = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=230 消息免打扰
  /// </summary>
  public sealed partial class SetGroupIsShowMenberNiceNameRes : pb::IMessage<SetGroupIsShowMenberNiceNameRes> {
    private static readonly pb::MessageParser<SetGroupIsShowMenberNiceNameRes> _parser = new pb::MessageParser<SetGroupIsShowMenberNiceNameRes>(() => new SetGroupIsShowMenberNiceNameRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetGroupIsShowMenberNiceNameRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupIsShowMenberNiceNameRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupIsShowMenberNiceNameRes(SetGroupIsShowMenberNiceNameRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      groupId_ = other.groupId_;
      isShowMenberNiceName_ = other.isShowMenberNiceName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupIsShowMenberNiceNameRes Clone() {
      return new SetGroupIsShowMenberNiceNameRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///详见错误码文档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 2) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "IsShowMenberNiceName" field.</summary>
    public const int IsShowMenberNiceNameFieldNumber = 3;
    private readonly static bool IsShowMenberNiceNameDefaultValue = false;

    private bool isShowMenberNiceName_;
    /// <summary>
    ///消息免打扰
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShowMenberNiceName {
      get { if ((_hasBits0 & 4) != 0) { return isShowMenberNiceName_; } else { return IsShowMenberNiceNameDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isShowMenberNiceName_ = value;
      }
    }
    /// <summary>Gets whether the "IsShowMenberNiceName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsShowMenberNiceName {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "IsShowMenberNiceName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsShowMenberNiceName() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetGroupIsShowMenberNiceNameRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetGroupIsShowMenberNiceNameRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (GroupId != other.GroupId) return false;
      if (IsShowMenberNiceName != other.IsShowMenberNiceName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (HasIsShowMenberNiceName) hash ^= IsShowMenberNiceName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasGroupId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      if (HasIsShowMenberNiceName) {
        output.WriteRawTag(24);
        output.WriteBool(IsShowMenberNiceName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (HasIsShowMenberNiceName) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetGroupIsShowMenberNiceNameRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      if (other.HasIsShowMenberNiceName) {
        IsShowMenberNiceName = other.IsShowMenberNiceName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 24: {
            IsShowMenberNiceName = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=231 拉取群标签列表
  /// </summary>
  public sealed partial class GetGroupTagsReq : pb::IMessage<GetGroupTagsReq> {
    private static readonly pb::MessageParser<GetGroupTagsReq> _parser = new pb::MessageParser<GetGroupTagsReq>(() => new GetGroupTagsReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGroupTagsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGroupTagsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGroupTagsReq(GetGroupTagsReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGroupTagsReq Clone() {
      return new GetGroupTagsReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGroupTagsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGroupTagsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGroupTagsReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///MsgId=232 拉取群标签列表
  /// </summary>
  public sealed partial class GetGroupTagsRes : pb::IMessage<GetGroupTagsRes> {
    private static readonly pb::MessageParser<GetGroupTagsRes> _parser = new pb::MessageParser<GetGroupTagsRes>(() => new GetGroupTagsRes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGroupTagsRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGroupTagsRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGroupTagsRes(GetGroupTagsRes other) : this() {
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGroupTagsRes Clone() {
      return new GetGroupTagsRes(this);
    }

    /// <summary>Field number for the "Tags" field.</summary>
    public const int TagsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::YlPb.GroupTagInfo> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(10, global::YlPb.GroupTagInfo.Parser);
    private readonly pbc::RepeatedField<global::YlPb.GroupTagInfo> tags_ = new pbc::RepeatedField<global::YlPb.GroupTagInfo>();
    /// <summary>
    ///标签集
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::YlPb.GroupTagInfo> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGroupTagsRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGroupTagsRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGroupTagsRes other) {
      if (other == null) {
        return;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=233 设置群标签
  /// </summary>
  public sealed partial class SetGroupTagsReq : pb::IMessage<SetGroupTagsReq> {
    private static readonly pb::MessageParser<SetGroupTagsReq> _parser = new pb::MessageParser<SetGroupTagsReq>(() => new SetGroupTagsReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetGroupTagsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupTagsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupTagsReq(SetGroupTagsReq other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupTagsReq Clone() {
      return new SetGroupTagsReq(this);
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Tags" field.</summary>
    public const int TagsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_tags_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> tags_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///标签集
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetGroupTagsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetGroupTagsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetGroupTagsReq other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=234 设置群标签回应
  /// </summary>
  public sealed partial class SetGroupTagsRes : pb::IMessage<SetGroupTagsRes> {
    private static readonly pb::MessageParser<SetGroupTagsRes> _parser = new pb::MessageParser<SetGroupTagsRes>(() => new SetGroupTagsRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetGroupTagsRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupTagsRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupTagsRes(SetGroupTagsRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupTagsRes Clone() {
      return new SetGroupTagsRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///详见错误码文档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 2) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetGroupTagsRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetGroupTagsRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasGroupId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetGroupTagsRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=235 设置群成员身份
  /// </summary>
  public sealed partial class SetGroupMemberIdentityReq : pb::IMessage<SetGroupMemberIdentityReq> {
    private static readonly pb::MessageParser<SetGroupMemberIdentityReq> _parser = new pb::MessageParser<SetGroupMemberIdentityReq>(() => new SetGroupMemberIdentityReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetGroupMemberIdentityReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupMemberIdentityReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupMemberIdentityReq(SetGroupMemberIdentityReq other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      userIds_ = other.userIds_.Clone();
      identity_ = other.identity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupMemberIdentityReq Clone() {
      return new SetGroupMemberIdentityReq(this);
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "UserIds" field.</summary>
    public const int UserIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_userIds_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> userIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///标签集
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UserIds {
      get { return userIds_; }
    }

    /// <summary>Field number for the "Identity" field.</summary>
    public const int IdentityFieldNumber = 3;
    private readonly static global::YlPb.GroupMemberIdentity IdentityDefaultValue = global::YlPb.GroupMemberIdentity.IdentityNormal;

    private global::YlPb.GroupMemberIdentity identity_;
    /// <summary>
    ///目标身份
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.GroupMemberIdentity Identity {
      get { if ((_hasBits0 & 2) != 0) { return identity_; } else { return IdentityDefaultValue; } }
      set {
        _hasBits0 |= 2;
        identity_ = value;
      }
    }
    /// <summary>Gets whether the "Identity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIdentity {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "Identity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdentity() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetGroupMemberIdentityReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetGroupMemberIdentityReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if(!userIds_.Equals(other.userIds_)) return false;
      if (Identity != other.Identity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      hash ^= userIds_.GetHashCode();
      if (HasIdentity) hash ^= Identity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      userIds_.WriteTo(output, _repeated_userIds_codec);
      if (HasIdentity) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Identity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      if (HasIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Identity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetGroupMemberIdentityReq other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      userIds_.Add(other.userIds_);
      if (other.HasIdentity) {
        Identity = other.Identity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
          case 24: {
            Identity = (global::YlPb.GroupMemberIdentity) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=236 设置群成员身份
  /// </summary>
  public sealed partial class SetGroupMemberIdentityRes : pb::IMessage<SetGroupMemberIdentityRes> {
    private static readonly pb::MessageParser<SetGroupMemberIdentityRes> _parser = new pb::MessageParser<SetGroupMemberIdentityRes>(() => new SetGroupMemberIdentityRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetGroupMemberIdentityRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupMemberIdentityRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupMemberIdentityRes(SetGroupMemberIdentityRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      groupId_ = other.groupId_;
      userIds_ = other.userIds_.Clone();
      identity_ = other.identity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGroupMemberIdentityRes Clone() {
      return new SetGroupMemberIdentityRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///详见错误码文档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 2) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "UserIds" field.</summary>
    public const int UserIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_userIds_codec
        = pb::FieldCodec.ForUInt32(24);
    private readonly pbc::RepeatedField<uint> userIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///标签集
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UserIds {
      get { return userIds_; }
    }

    /// <summary>Field number for the "Identity" field.</summary>
    public const int IdentityFieldNumber = 4;
    private readonly static global::YlPb.GroupMemberIdentity IdentityDefaultValue = global::YlPb.GroupMemberIdentity.IdentityNormal;

    private global::YlPb.GroupMemberIdentity identity_;
    /// <summary>
    ///目标身份
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::YlPb.GroupMemberIdentity Identity {
      get { if ((_hasBits0 & 4) != 0) { return identity_; } else { return IdentityDefaultValue; } }
      set {
        _hasBits0 |= 4;
        identity_ = value;
      }
    }
    /// <summary>Gets whether the "Identity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIdentity {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "Identity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdentity() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetGroupMemberIdentityRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetGroupMemberIdentityRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (GroupId != other.GroupId) return false;
      if(!userIds_.Equals(other.userIds_)) return false;
      if (Identity != other.Identity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      hash ^= userIds_.GetHashCode();
      if (HasIdentity) hash ^= Identity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasGroupId) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      userIds_.WriteTo(output, _repeated_userIds_codec);
      if (HasIdentity) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Identity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      if (HasIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Identity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetGroupMemberIdentityRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      userIds_.Add(other.userIds_);
      if (other.HasIdentity) {
        Identity = other.Identity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
          case 32: {
            Identity = (global::YlPb.GroupMemberIdentity) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=237 发布群头条
  /// </summary>
  public sealed partial class ReleaseGroupTTReq : pb::IMessage<ReleaseGroupTTReq> {
    private static readonly pb::MessageParser<ReleaseGroupTTReq> _parser = new pb::MessageParser<ReleaseGroupTTReq>(() => new ReleaseGroupTTReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReleaseGroupTTReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseGroupTTReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseGroupTTReq(ReleaseGroupTTReq other) : this() {
      _hasBits0 = other._hasBits0;
      groupId_ = other.groupId_;
      tags_ = other.tags_.Clone();
      title_ = other.title_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseGroupTTReq Clone() {
      return new ReleaseGroupTTReq(this);
    }

    /// <summary>Field number for the "GroupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private readonly static uint GroupIdDefaultValue = 0;

    private uint groupId_;
    /// <summary>
    ///群信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "GroupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "GroupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Tags" field.</summary>
    public const int TagsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_tags_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> tags_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///群头条便签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 3;
    private readonly static string TitleDefaultValue = "";

    private string title_;
    /// <summary>
    ///群头条便签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_ ?? TitleDefaultValue; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Title" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTitle {
      get { return title_ != null; }
    }
    /// <summary>Clears the value of the "Title" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTitle() {
      title_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReleaseGroupTTReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReleaseGroupTTReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (Title != other.Title) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (HasTitle) hash ^= Title.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGroupId) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (HasTitle) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (HasTitle) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReleaseGroupTTReq other) {
      if (other == null) {
        return;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      tags_.Add(other.tags_);
      if (other.HasTitle) {
        Title = other.Title;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId=238 发布群头条
  /// </summary>
  public sealed partial class ReleaseGroupTTRes : pb::IMessage<ReleaseGroupTTRes> {
    private static readonly pb::MessageParser<ReleaseGroupTTRes> _parser = new pb::MessageParser<ReleaseGroupTTRes>(() => new ReleaseGroupTTRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReleaseGroupTTRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::YlPb.ChatReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseGroupTTRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseGroupTTRes(ReleaseGroupTTRes other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseGroupTTRes Clone() {
      return new ReleaseGroupTTRes(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    /// <summary>
    ///详见错误码文档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "ErrorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ErrorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReleaseGroupTTRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReleaseGroupTTRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReleaseGroupTTRes other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

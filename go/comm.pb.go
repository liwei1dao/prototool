// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comm.proto

package pb

import (
	fmt "fmt"
	_ "github.com/frankee/protobuf/gogoproto"
	proto "github.com/frankee/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//公用消息结构代码
type UserInfo struct {
	UserId               uint32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId" bson:"_id"`
	NiceName             string   `protobuf:"bytes,2,opt,name=NiceName,proto3" json:"NiceName,omitempty"`
	Sex                  uint32   `protobuf:"varint,3,opt,name=Sex,proto3" json:"Sex,omitempty"`
	HeadUrl              string   `protobuf:"bytes,4,opt,name=HeadUrl,proto3" json:"HeadUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_84d45c80f8c19d36, []int{0}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInfo.Unmarshal(m, b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return xxx_messageInfo_UserInfo.Size(m)
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserInfo) GetNiceName() string {
	if m != nil {
		return m.NiceName
	}
	return ""
}

func (m *UserInfo) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UserInfo) GetHeadUrl() string {
	if m != nil {
		return m.HeadUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*UserInfo)(nil), "pb.UserInfo")
}

func init() { proto.RegisterFile("comm.proto", fileDescriptor_84d45c80f8c19d36) }

var fileDescriptor_84d45c80f8c19d36 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xce, 0xcf, 0xcd,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0x12, 0x49, 0xcf, 0x4f, 0xcf,
	0x07, 0x73, 0xf5, 0x41, 0x2c, 0x88, 0x8c, 0x52, 0x0b, 0x23, 0x17, 0x47, 0x68, 0x71, 0x6a, 0x91,
	0x67, 0x5e, 0x5a, 0xbe, 0x90, 0x01, 0x17, 0x1b, 0x98, 0x9d, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1,
	0xeb, 0x24, 0xf1, 0xea, 0x9e, 0x3c, 0x54, 0xe4, 0xd3, 0x3d, 0x79, 0xae, 0xa4, 0xe2, 0xfc, 0x3c,
	0x2b, 0xa5, 0xf8, 0xcc, 0x14, 0xa5, 0x20, 0xa8, 0xa8, 0x90, 0x14, 0x17, 0x87, 0x5f, 0x66, 0x72,
	0xaa, 0x5f, 0x62, 0x6e, 0xaa, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x9c, 0x2f, 0x24, 0xc0,
	0xc5, 0x1c, 0x9c, 0x5a, 0x21, 0xc1, 0x0c, 0x32, 0x2a, 0x08, 0xc4, 0x14, 0x92, 0xe0, 0x62, 0xf7,
	0x48, 0x4d, 0x4c, 0x09, 0x2d, 0xca, 0x91, 0x60, 0x01, 0x2b, 0x86, 0x71, 0x9d, 0x58, 0x7e, 0x3c,
	0x94, 0x63, 0x4c, 0x62, 0x03, 0xbb, 0xc9, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x52, 0x07,
	0xab, 0xbb, 0x00, 0x00, 0x00,
}

func NewPopulatedUserInfo(r randyComm, easy bool) *UserInfo {
	this := &UserInfo{}
	this.UserId = uint32(r.Uint32())
	this.NiceName = string(randStringComm(r))
	this.Sex = uint32(r.Uint32())
	this.HeadUrl = string(randStringComm(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedComm(r, 5)
	}
	return this
}

type randyComm interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneComm(r randyComm) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringComm(r randyComm) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneComm(r)
	}
	return string(tmps)
}
func randUnrecognizedComm(r randyComm, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldComm(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldComm(dAtA []byte, r randyComm, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateComm(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateComm(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateComm(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateComm(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateComm(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateComm(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateComm(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
